#include "../include/AOE_binData.h"

// "Children" macros to increment our internal counter (i)
#define NEXT_INITSEQ_2_NOVAR(binSeqDef, name, desc, offset, seq0, seq1, fmeaning0, fmeaning1) INITSEQ_2_NOVAR(binSeqDef, name, desc, offset, seq0, seq1, fmeaning0, fmeaning1); i++;
#define NEXT_INITSEQ_1_VAR(binSeqDef, name, desc, offset, seq0, vartype0, varoffset0) INITSEQ_1_VAR(binSeqDef, name, desc, offset, seq0, vartype0, varoffset0); i++;
#define NEXT_INITSEQ_3_NOVAR(binSeqDef, name, desc, offset, seq0, seq1, seq2, fmeaning0, fmeaning1, fmeaning2) INITSEQ_3_NOVAR(binSeqDef, name, desc, offset, seq0, seq1, seq2, fmeaning0, fmeaning1, fmeaning2); i++;


// throws AOE_binDataSetupException
AOE_binData::AOE_binData() {
	this->currentVersion = AOE_INVALID_FILE;
	this->InitData();
}

AOE_binData::~AOE_binData() {

}

AOE_FILE_VERSION AOE_binData::GetCurrentVersion() {
	return this->currentVersion;
}

// Returns a BinarySeqDefSet objects corresponding to criteria (game file version + category)
// Returns NULL if the choice is incorrect / not supported
BinarySeqDefSet *AOE_binData::GetSeqDefSet(AOE_FILE_VERSION version, BINSEQ_CATEGORIES category) {
	switch (version) {
	case AOE_INVALID_FILE: return NULL;
	case AOE_VERSION_AOE1_0B:
		switch (category) {
		case BC_NONE: return NULL;
		case BC_WINDOWED_MODE: return &this->windowedMode_AOE10b;
		case BC_ROR_API: return &this->ROR_API_AOE10b;
		case BC_OPTIONS: return &this->options_AOE10b;
		default: return NULL;
		}
	case AOE_VERSION_AOE1_0C:
		switch (category) {
		case BC_NONE: return NULL;
		case BC_WINDOWED_MODE: return &this->windowedMode_AOE10c;
		case BC_ROR_API: return &this->ROR_API_AOE10c;
		case BC_OPTIONS: return &this->options_AOE10c;
		default: return NULL;
		}
	case AOE_VERSION_ROR1_0B:
		switch (category) {
		case BC_NONE: return NULL;
		case BC_TECH_FIXES: return &this->techFixes_10b;
		case BC_RESOLUTION: return &this->resolution_10b;
		case BC_WINDOWED_MODE: return &this->windowedMode_10b;
		case BC_VEG_WINDOWED_MODE: return &this->VEG_windowedMode_10b;
		case BC_SELECTED_UNITS: return &this->selectedUnits_10b;
		case BC_ROR_API: return &this->ROR_API_10b;
		case BC_MANAGE_AI: return &this->manageAI_10b;
		case BC_OPTIONS: return &this->options_10b;
		case BC_OBSOLETES: return &this->obsoletes_10b;
		default: return NULL;
		}
	case AOE_VERSION_ROR1_0C:
	case AOE_VERSION_UPATCH_BETA:
	case AOE_VERSION_UPATCH_1_1_HD:
		switch (category) {
		case BC_NONE: return NULL;
		case BC_TECH_FIXES: return &this->techFixes_10c;
		case BC_RESOLUTION: return &this->resolution_10c;
		case BC_WINDOWED_MODE: return &this->windowedMode_10c;
		case BC_VEG_WINDOWED_MODE: return &this->VEG_windowedMode_10c;
		case BC_SELECTED_UNITS: return &this->selectedUnits_10c;
		case BC_ROR_API: return &this->ROR_API_10c;
		case BC_MANAGE_AI: return &this->manageAI_10c;
		case BC_AUDIO_VIDEO: return &this->audioVideo_10c;
		case BC_OPTIONS: return &this->options_10c;
		case BC_OBSOLETES: return &this->obsoletes_10c;
		default: return NULL;
		}
	default: return NULL;
	}
}

void AOE_binData::SetCurrentVersion(AOE_FILE_VERSION value) {
	this->currentVersion = value;
}

// Binseq sets number of elements. Use the macro for run-time checks
#define COUNT_options_AOE10b 2
#define COUNT_options_AOE10c 2
#define COUNT_options_10b 15
#define COUNT_options_10c 61
#define COUNT_techFixes_10b 5
#define COUNT_techFixes_10c 36
#define COUNT_resolution_10b 52
#define COUNT_resolution_10c 76
#define COUNT_windowedMode_AOE10b 3
#define COUNT_windowedMode_AOE10c 3
#define COUNT_windowedMode_10b 3
#define COUNT_windowedMode_10c 3
#define COUNT_VEG_windowedMode_10c 21
#define COUNT_selectedUnits_10c 87
#define COUNT_obsoletes_10c 25
#define COUNT_ROR_API_AOE10b 6
#define COUNT_ROR_API_AOE10c 6
#define COUNT_ROR_API_10b 6
#define COUNT_ROR_API_10c 134
#define COUNT_manageAI_10c 13
#define COUNT_audio_video_10c 9


// Throws exceptions if configuration is not OK
void AOE_binData::InitData() {
	this->options_AOE10b.SetCount(COUNT_options_AOE10b);
	this->options_AOE10c.SetCount(COUNT_options_AOE10c);
	this->options_10b.SetCount(COUNT_options_10b);
	this->options_10c.SetCount(COUNT_options_10c);
	this->techFixes_10b.SetCount(COUNT_techFixes_10b);
	this->techFixes_10c.SetCount(COUNT_techFixes_10c);
	this->resolution_10b.SetCount(COUNT_resolution_10b);
	this->resolution_10c.SetCount(COUNT_resolution_10c);
	this->windowedMode_AOE10b.SetCount(COUNT_windowedMode_AOE10b);
	this->windowedMode_AOE10c.SetCount(COUNT_windowedMode_AOE10c);
	this->windowedMode_10b.SetCount(COUNT_windowedMode_10b);
	this->windowedMode_10c.SetCount(COUNT_windowedMode_10c);
	this->VEG_windowedMode_10c.SetCount(COUNT_VEG_windowedMode_10c);
	//this->selectedUnits_10b.SetCount();
	this->selectedUnits_10c.SetCount(COUNT_selectedUnits_10c);
	//this->obsoletes_10b.SetCount();
	this->obsoletes_10c.SetCount(COUNT_obsoletes_10c);
	this->ROR_API_AOE10b.SetCount(COUNT_ROR_API_AOE10b);
	this->ROR_API_AOE10c.SetCount(COUNT_ROR_API_AOE10c);
	this->ROR_API_10b.SetCount(COUNT_ROR_API_10b);
	this->ROR_API_10c.SetCount(COUNT_ROR_API_10c);
	//this->manageAI_10b.SetCount(0);
	this->manageAI_10c.SetCount(COUNT_manageAI_10c);
	this->audioVideo_10c.SetCount(COUNT_audio_video_10c);
	
	this->InitResolution_b();
	this->InitResolution_c();
	this->InitWindowedMode_AOEb();
	this->InitWindowedMode_AOEc();
	this->InitWindowedMode_b();
	this->InitWindowedMode_c();
	this->InitTechFixes_10b();
	this->InitTechFixes_10c();
	this->InitOptions_AOE10b();
	this->InitOptions_AOE10c();
	this->InitOptions_10b();
	this->InitOptions_10c();
	this->InitSelectedUnits();
	this->InitObsoletes();
	this->InitROR_API_AOE10b();
	this->InitROR_API_AOE10c();
	this->InitROR_API_10b();
	this->InitROR_API_10c();
	this->InitManageAI();
	this->InitAudioVideo_10c();
#ifdef _DEBUG
	printf("**************************\n");
#endif
}



void AOE_binData::InitResolution_b() {
	int i = 0;

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize1,
		"Horizontal size",
		90590,
		(0xB9, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize2,
		"Horizontal size",
		96289,
		(0xC7, 0x82, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		6
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize3,
		"Horizontal size",
		97757,
		(0xBF, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize4,
		"Horizontal size",
		196270,
		(0x3D, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize5,
		"Horizontal size",
		196375,
		(0x68, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize6,
		"Horizontal size",
		198863,
		(0xBF, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize7,
		"Horizontal size",
		222937,
		(0x81, 0xFD, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		2
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize8,
		"Horizontal size",
		223118,
		(0x81, 0xFA, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		2
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize9,
		"Horizontal size",
		223304,
		(0x81, 0xFA, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		2
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize10,
		"Horizontal size",
		223472,
		(0x3D, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize11,
		"Horizontal size",
		223572,
		(0x3D, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize12,
		"Horizontal size",
		347158,
		(0x81, 0x79, 0x18, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize13,
		"Horizontal size",
		340866,
		(0x81, 0xFD, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		2
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize14,
		"Horizontal size",
		522997,
		(0x3D, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize15,
		"Horizontal size",
		512076,
		(0x68, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize16,
		"Horizontal size",
		515220,
		(0x3D, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize17,
		"Horizontal size",
		523134,
		(0x68, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize18,
		"Horizontal size",
		534169,
		(0x3D, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize19,
		"Horizontal size",
		543592,
		(0x3D, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize20,
		"Horizontal size",
		543902,
		(0x3D, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HSize21,
		"Horizontal size",
		653802,
		(0x68, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VSize1,
		"Vertical size",
		90638,
		(0xC7, 0x80, 0xE4, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		6
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VSize2,
		"Vertical size",
		96302,
		(0xC7, 0x80, 0xE4, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		6
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VSize3,
		"Vertical size",
		97799,
		(0xC7, 0x80, 0xE4, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		6
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VSize4,
		"Vertical size",
		198868,
		(0xBD, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VSize5,
		"Vertical size",
		223126,
		(0x81, 0x79, 0x08, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VSize6,
		"Vertical size",
		223312,
		(0x81, 0x79, 0x08, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VSize7,
		"Vertical size",
		523008,
		(0x81, 0x7E, 0x18, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VSize8,
		"Vertical size",
		534176,
		(0x81, 0x7E, 0x18, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VSize9,
		"Vertical size",
		543599,
		(0x81, 0x7E, 0x18, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VSize10,
		"Vertical size",
		543909,
		(0x81, 0x7E, 0x18, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VSize11,
		"Vertical size",
		653797,
		(0x68, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VPos_GameZoneBottom,
		"Vertical (bottom) limit of the game zone.", // Should be = VerticalResolution - 146
		523129,
		(0x68, 0x6E, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VPos_Map,
		"Vertical position of the game map.", // Should be = VerticalResolution - 120
		523161,
		(0x68, 0x88, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VPos_UnitInfoZone,
		"Vertical position of the unit information zone.", // Should be = VerticalResolution - 119
		523255,
		(0x68, 0x89, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VPos_ScoreInformation,
		"Vertical position of score information (when displayed with F4).", // Should be = VerticalResolution - 118
		523267,
		(0xC7, 0x44, 0x24, 0x38, 0x8A, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		4
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VPos_HelpButton,
		"Vertical position of Help button (normally in the bottom right corner).", // Should be = VerticalResolution - 36
		523432,
		(0x68, 0xDC, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VPos_ScoreButton,
		"Vertical position of Score button in the bottom panel.", // Should be = VerticalResolution - 118
		523471,
		(0x68, 0x8A, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VPos_BottomPanel,
		"Vertical position of the bottom panel.", // Should be = VerticalResolution - 126
		543642,
		(0x68, 0x82, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VPos_PanelImage,
		"Vertical position where the bottom panel image is displayed.", // Should be = VerticalResolution - 126
		543952,
		(0x68, 0x82, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HPos_ScoreButton,
		"Horizontal position of Score button in the bottom panel.", // Should be = HorizontalResolution - 35
		523476,
		(0x68, 0xDD, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HPos_HelpButton,
		"Horizontal position of Help button (normally in the bottom right corner).", // Should be = HorizontalResolution - 35
		523439,
		(0x68, 0xDD, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HPos_Map,
		"Horizontal position of the game map. You may also like to center it.", // Should be = HorizontalResolution - 229
		523168,
		(0x68, 0x1B, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HPos_MenuButton,
		"Horizontal position of menu button + impact on bottom panel image size", // Should be = HorizontalResolution - 72
		523414,
		(0x68, 0xB8, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HPos_DiplButton,
		"Horizontal position of diplomacy button.", // Should be = HorizontalResolution - 180
		523392,
		(0x68, 0x4C, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HPos_ButtonsZone,
		"Horizontal position of diplomacy/menu buttons zone.", // Should be = HorizontalResolution - 252
		523370,
		(0x68, 0x04, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);



	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VPos_UnknownSize1,
		"Default 1280.",
		90599,
		(0x3D, 0x00, 0x05, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VPos_UnknownSize2,
		"Default 1280.",
		97814,
		(0xBB, 0x00, 0x05, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VPos_UnknownSize3,
		"Default 1280.",
		222948,
		(0x81, 0xFD, 0x00, 0x05, 0x00, 0x00),
		SVT_INT_2B,
		2
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		VPos_UnknownSize4,
		"Default 1280.",
		223479,
		(0x3D, 0x00, 0x05, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	// Horizontal position of game zone ?
	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HPos_UnknownSize1,
		"Default 1024.",
		523107,
		(0x68, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10b.GetBinSeqDefinition(i),
		HPos_UnknownSize2,
		"Default 1024.",
		523084,
		(0x68, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);


	if (i != COUNT_resolution_10b) {
		throw AOE_binDataSetupException("Binary setup error for resolution_10b. Bad element count.");
	}
#ifdef _DEBUG
	printf("resolution_10b=%d\n", i);
#endif
}


void AOE_binData::InitResolution_c() {
	int i = 0;

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize1,
		"Horizontal size",
		91893,
		(0xB9, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize2,
		"Horizontal size",
		97757,
		(0xC7, 0x82, 0xE0, 0x08, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		6
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize3,
		"Horizontal size",
		99181,
		(0xBF, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize4,
		"Horizontal size",
		198552,
		(0x3D, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize5,
		"Horizontal size",
		198657,
		(0x68, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize6,
		"Horizontal size",
		201165,
		(0xBF, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize7,
		"Horizontal size",
		224681,
		(0x81, 0xFD, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		2
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize8,
		"Horizontal size",
		224862,
		(0x81, 0xFA, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		2
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize9,
		"Horizontal size",
		225048,
		(0x81, 0xFA, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		2
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize10,
		"Horizontal size",
		225218,
		(0x3D, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize11,
		"Horizontal size",
		225318,
		(0x3D, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize12,
		"Horizontal size",
		346379,
		(0x81, 0x79, 0x18, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize13,
		"Horizontal size",
		403995,
		(0x81, 0xF9, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		2
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize14,
		"Horizontal size",
		520375,
		(0x3D, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize15,
		"Horizontal size",
		520462,
		(0x68, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize16,
		"Horizontal size",
		520485,
		(0x68, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize17,
		"Horizontal size",
		520512,
		(0x68, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize18,
		"Horizontal size",
		531600,
		(0x3D, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize19,
		"Horizontal size",
		541141,
		(0x3D, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize20,
		"Horizontal size",
		541448,
		(0x3D, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize21,
		"Horizontal size",
		651369,
		(0x68, 0x00, 0x04, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VSize1,
		"Vertical size",
		91986,
		(0xC7, 0x80, 0xE4, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		6
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VSize2,
		"Vertical size",
		97770,
		(0xC7, 0x80, 0xE4, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		6
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VSize3,
		"Vertical size",
		99223,
		(0xC7, 0x80, 0xE4, 0x08, 0x00, 0x00, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		6
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VSize4,
		"Vertical size",
		201170,
		(0xBD, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VSize5,
		"Vertical size",
		224870,
		(0x81, 0x79, 0x08, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VSize6,
		"Vertical size",
		225056,
		(0x81, 0x79, 0x08, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VSize7,
		"Vertical size",
		520386,
		(0x81, 0x7E, 0x18, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VSize8,
		"Vertical size",
		531607,
		(0x81, 0x7E, 0x18, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VSize9,
		"Vertical size",
		541148,
		(0x81, 0x7E, 0x18, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VSize10,
		"Vertical size",
		541455,
		(0x81, 0x7E, 0x18, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VSize11,
		"Vertical size",
		651364,
		(0x68, 0x00, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VPos_GameZoneBottom,
		"Vertical (bottom) limit of the game zone.", // Should be = VerticalResolution - 146
		520507,
		(0x68, 0x6E, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VPos_Map,
		"Vertical position of the game map.", // Should be = VerticalResolution - 120
		520539,
		(0x68, 0x88, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VPos_UnitInfoZone,
		"Vertical position of the unit information zone.", // Should be = VerticalResolution - 119
		520633,
		(0x68, 0x89, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VPos_ScoreInformation,
		"Vertical position of score information (when displayed with F4).", // Should be = VerticalResolution - 118
		520645,
		(0xBB, 0x8A, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VPos_HelpButton,
		"Vertical position of Help button (normally in the bottom right corner).", // Should be = VerticalResolution - 36
		520806,
		(0x68, 0xDC, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VPos_ScoreButton,
		"Vertical position of Score button in the bottom panel.", // Should be = VerticalResolution - 118
		520845,
		(0x68, 0x8A, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VPos_BottomPanel,
		"Vertical position of the bottom panel.", // Should be = VerticalResolution - 126
		541191,
		(0x68, 0x82, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VPos_PanelImage,
		"Vertical position where the bottom panel image is displayed.", // Should be = VerticalResolution - 126
		541498,
		(0x68, 0x82, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HPos_ScoreButton,
		"Horizontal position of Score button in the bottom panel.", // Should be = HorizontalResolution - 35
		520850,
		(0x68, 0xDD, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HPos_HelpButton,
		"Horizontal position of Help button (normally in the bottom right corner).", // Should be = HorizontalResolution - 35
		520813,
		(0x68, 0xDD, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HPos_Map,
		"Horizontal position of the game map. You may also like to center it.", // Should be = HorizontalResolution - 229
		520546,
		(0x68, 0x1B, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HPos_MenuButton,
		"Horizontal position of menu button + impact on bottom panel image size", // Should be = HorizontalResolution - 72
		520788,
		(0x68, 0xB8, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HPos_DiplButton,
		"Horizontal position of diplomacy button.", // Should be = HorizontalResolution - 180
		520766,
		(0x68, 0x4C, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HPos_ButtonsZone,
		"Horizontal position of chat buttons zone.", // Should be = HorizontalResolution - 252
		520744,
		(0x68, 0x04, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		VSize_GameZoneMinus30,
		"Vertical size of game zone positioned 30 pixels below top panel.", // Should be VerticalResolution - 176.
		520480,
		(0x68, 0x50, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HSize_AgePanel,
		"Horizontal size of current age panel determines the position of the text label.", // Should be HorizontalResolution - 532.
		520562,
		(0x68, 0xEC, 0x01, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		HPos_PopLimit,
		"Horizontal position of pop limit string.", // Should be (HorizontalResolution * 0.5) - 80.
		520435,
		(0x68, 0xB0, 0x01, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	// Scenario instructions
	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_HPos_TopLabel,
		"Horizontal position of the top label in Scenario Instructions.", // Should be HorizontalResolution - 6.
		651389,
		(0x68, 0xFA, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_VSize_TextArea,
		"Vertical size of Text area.", // Do not change this
		651405,
		(0x68, 0x1D, 0x01, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_HSize_TextArea,
		"Horizontal size of Text area.", // Should be horizontal size - 80
		651410,
		(0x68, 0xB0, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_VPos_TextArea,
		"Vertical position of Text area.", // Do not change this
		651415,
		(0x6A, 0x41),
		SVT_INT_1B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_HPos_TextArea,
		"Horizontal position of Text area.", // Do not change this
		651419,
		(0x6A, 0x28),
		SVT_INT_1B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_VSize_HistoryButton,
		"Vertical size of History button.", // Do not change this
		651426,
		(0x6A, 0x32),
		SVT_INT_1B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_VSize_InstrButton,
		"Vertical size of Instructions button.", // Do not change this
		651451,
		(0x6A, 0x32),
		SVT_INT_1B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_VSize_HintsButton,
		"Vertical size of Hints button.", // Do not change this
		651479,
		(0x6A, 0x32),
		SVT_INT_1B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_VSize_OkButton,
		"Vertical size of OK button.", // Do not change this
		651507,
		(0x6A, 0x32),
		SVT_INT_1B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_HSize_HistButton,
		"Horizontal size of History button.", // Do not change this
		651428,
		(0x68, 0xF0, 0x00, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_HSize_InstrButton,
		"Horizontal size of Instructions button.", // Do not change this
		651453,
		(0x68, 0xF0, 0x00, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_HSize_HintsButton,
		"Horizontal size of Hints button.", // Do not change this
		651481,
		(0x68, 0xF0, 0x00, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_HSize_OkButton,
		"Horizontal size of OK button.", // Do not change this
		651509,
		(0x68, 0xF0, 0x00, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_VPos_HistButton,
		"Vertical size of History button.", // Should be VerticalResolution - 78
		651433,
		(0x68, 0xB2, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_VPos_InstrButton,
		"Vertical size of Instructions button.", // Should be VerticalResolution - 78
		651458,
		(0x68, 0xB2, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_VPos_HintsButton,
		"Vertical size of Hints button.", // Should be VerticalResolution - 78
		651486,
		(0x68, 0xB2, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_VPos_OkButton,
		"Vertical size of OK button.", // Should be VerticalResolution - 78
		651514,
		(0x68, 0xB2, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_HPos_HistButton,
		"Vertical size of History button.", // Do not change this
		651440,
		(0x6A, 0x0A),
		SVT_INT_1B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_HPos_InstrButton,
		"Horizontal position of Instructions button.", // Do not change this
		651465,
		(0x68, 0x0A, 0x01, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_HPos_HintsButton,
		"Horizontal position of Hints button.", // Do not change this
		651493,
		(0x68, 0x0A, 0x02, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_HPos_OkButton,
		"Horizontal position of OK button.", // Do not change this
		651521,
		(0x68, 0x06, 0x03, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_HPos_Map,
		"Horizontal position of mission map.", // Do not change this
		652337,
		(0x81, 0xC1, 0xC5, 0x00, 0x00, 0x00),
		SVT_INT_2B,
		2
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		SI_VPos_Map,
		"Vertical position of mission map.", // Do not change this
		652331,
		(0x05, 0x6B, 0x01, 0x00, 0x00),
		SVT_INT_2B,
		1
		);


	// Unknowns
	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		UnknownSize1,
		"Default 1280.",
		91998,
		(0x3D, 0x00, 0x05, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		UnknownSize2,
		"Default 1280.",
		99238,
		(0xBB, 0x00, 0x05, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		UnknownSize3,
		"Default 1280.",
		224692,
		(0x81, 0xFD, 0x00, 0x05, 0x00, 0x00),
		SVT_INT_2B,
		2
		);

	NEXT_INITSEQ_1_VAR(this->resolution_10c.GetBinSeqDefinition(i),
		UnknownSize4,
		"Default 1280.",
		225225,
		(0x3D, 0x00, 0x05, 0x00, 0x00),
		SVT_INT_2B,
		1
		);

	if (i != COUNT_resolution_10c) {
		throw AOE_binDataSetupException("Binary setup error for resolution_10c. Bad element count.");
	}
#ifdef _DEBUG
	printf("resolution_10c=%d\n", i);
#endif
}



void AOE_binData::InitWindowedMode_AOEb() {
	int i = 0;
	
	NEXT_INITSEQ_2_NOVAR(this->windowedMode_AOE10b.GetBinSeqDefinition(i),
		ScreenToClient1,
		"Fix ScreenToClient call.\n Impacts mouse when placing an object...",
		0xE8A10,
		(0x8B, 0x47, 0x0C, 0x8B, 0x88, 0x94, 0x08, 0x00, 0x00, 0x85, 0xC9, 0x75, 0x2D, 0x56, 0x8B, 0x47, 0x10, 0x50, 0xFF, 0x15, 0x24, 0x18, 0x7E, 0x00, 0x8B, 0x06, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x07, 0x2D, 0x00, 0x00, 0x01, 0x00, 0x89, 0x06, 0x8B, 0x46, 0x04, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x08, 0x2D, 0x00, 0x00, 0x01, 0x00, 0x89, 0x46, 0x04, 0x5F, 0x5E, 0x5B, 0xC2, 0x04, 0x00), // default=no
		(0x8B, 0x4F, 0x10, 0x56, 0x51, 0xFF, 0x15, 0x24, 0x18, 0x7E, 0x00, 0x8B, 0x06, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x07, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x89, 0x06, 0x8B, 0x46, 0x04, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x08, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x89, 0x46, 0x04, 0x5F, 0x5E, 0x5B, 0xC2, 0x04, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->windowedMode_AOE10b.GetBinSeqDefinition(i),
		ScreenToClient2,
		"Fix ScreenToClient call. Impacts mouse position...",
		0x106B44,
		(0x8B, 0x4E, 0x04, 0x8B, 0x01, 0x8A, 0x90, 0x79, 0x04, 0x00, 0x00, 0x80, 0xFA, 0x01, 0x75, 0x37, 0x8D, 0x44, 0x24, 0x10, 0x8B, 0x49, 0x04, 0x50, 0x51, 0xFF, 0x15, 0x24, 0x18, 0x7E, 0x00, 0x8B, 0x44, 0x24, 0x10, 0x3D, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x09, 0x2D, 0x00, 0x00, 0x01, 0x00, 0x89, 0x44, 0x24, 0x10, 0x8B, 0x44, 0x24, 0x14, 0x3D, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x09, 0x2D, 0x00, 0x00, 0x01, 0x00), // default=no
		(0x8B, 0x46, 0x04, 0x8B, 0x40, 0x04, 0x8D, 0x54, 0x24, 0x10, 0x52, 0x50, 0xFF, 0x15, 0x24, 0x18, 0x7E, 0x00, 0x8B, 0x54, 0x24, 0x10, 0x81, 0xFA, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x0A, 0x81, 0xEA, 0x00, 0x10, 0x00, 0x00, 0x89, 0x54, 0x24, 0x10, 0x8B, 0x44, 0x24, 0x14, 0x3D, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x09, 0x2D, 0x00, 0x00, 0x01, 0x00, 0x89, 0x44, 0x24, 0x14, 0xEB, 0x09, 0x2D, 0x00, 0x00, 0x01, 0x00),
		FM_OFF,
		FM_ON
		);
	
	NEXT_INITSEQ_2_NOVAR(this->windowedMode_AOE10b.GetBinSeqDefinition(i),
		ScreenToClient3,
		"Fix ScreenToClient call. Impacts mouse cursor change according to underlying object (possible action)",
		0x10CFF0,
		(0x8B, 0x47, 0x20, 0x8B, 0x08, 0x8A, 0x91, 0x79, 0x04, 0x00, 0x00, 0x80, 0xFA, 0x01, 0x75, 0x2D, 0x56), // default=no
		(0x8B, 0x47, 0x20, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x56),
		FM_OFF,
		FM_ON
		);

	if (i != COUNT_windowedMode_AOE10b) {
		throw AOE_binDataSetupException("Binary setup error for windowedMode_AOE10b. Bad element count.");
	}
#ifdef _DEBUG
	printf("windowed_AOE10b=%d\n", i);
#endif
}


void AOE_binData::InitWindowedMode_AOEc() {
	int i = 0;

	NEXT_INITSEQ_2_NOVAR(this->windowedMode_AOE10c.GetBinSeqDefinition(i),
		ScreenToClient1,
		"Fix ScreenToClient call.\n Impacts mouse when placing an object...",
		0x0197FF,
		(0x8B, 0x47, 0x0C, 0x8B, 0x88, 0x94, 0x08, 0x00, 0x00, 0x85, 0xC9, 0x75, 0x2D, 0x8B, 0x4F, 0x10, 0x56, 0x51, 0xFF, 0x15, 0xB0, 0xB2, 0x53, 0x00, 0x8B, 0x06, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x07, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x89, 0x06, 0x8B, 0x46, 0x04, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x08, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x89, 0x46, 0x04, 0x5F, 0x5E, 0xC2, 0x04, 0x00, 0x90), // default=no
		(0x8B, 0x4F, 0x10, 0x56, 0x51, 0xFF, 0x15, 0xB0, 0xB2, 0x53, 0x00, 0x8B, 0x06, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x07, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x89, 0x06, 0x8B, 0x46, 0x04, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x08, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x89, 0x46, 0x04, 0x5F, 0x5E, 0xC2, 0x04, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->windowedMode_AOE10c.GetBinSeqDefinition(i),
		ScreenToClient2,
		"Fix ScreenToClient call. Impacts mouse position...",
		0x4BBB4,
		(0x8B, 0x46, 0x04, 0x8B, 0x08, 0x80, 0xB9, 0x79, 0x04, 0x00, 0x00, 0x01, 0x75, 0x3B, 0x8B, 0x40, 0x04, 0x8D, 0x54, 0x24, 0x10, 0x52, 0x50, 0xFF, 0x15, 0xB0, 0xB2, 0x53, 0x00, 0x8B, 0x54, 0x24, 0x10, 0x81, 0xFA, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x0A, 0x81, 0xEA, 0x00, 0x00, 0x01, 0x00, 0x89, 0x54, 0x24, 0x10, 0x8B, 0x44, 0x24, 0x14, 0x3D, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x13, 0x2D, 0x00, 0x00, 0x01, 0x00, 0x89, 0x44, 0x24, 0x14, 0xEB, 0x08, 0x8B, 0x44, 0x24, 0x14, 0x8B, 0x54, 0x24, 0x10, 0x89, 0x56), // default=no
		(0x8B, 0x46, 0x04, 0x8B, 0x40, 0x04, 0x8D, 0x54, 0x24, 0x10, 0x52, 0x50, 0xFF, 0x15, 0xB0, 0xB2, 0x53, 0x00, 0x8B, 0x54, 0x24, 0x10, 0x81, 0xFA, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x0A, 0x81, 0xEA, 0x00, 0x00, 0x01, 0x00, 0x89, 0x54, 0x24, 0x10, 0x8B, 0x44, 0x24, 0x14, 0x3D, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x09, 0x2D, 0x00, 0x00, 0x01, 0x00, 0x89, 0x44, 0x24, 0x14, 0xEB, 0x13, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x89, 0x56),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->windowedMode_AOE10c.GetBinSeqDefinition(i),
		ScreenToClient3,
		"Fix ScreenToClient call. Impacts mouse cursor change according to underlying object (possible action)",
		0x10E01F,
		(0x8B, 0x47, 0x20, 0x8B, 0x08, 0x80, 0xB9, 0x79, 0x04, 0x00, 0x00, 0x01, 0x75, 0x2D), // default=no
		(0x8B, 0x47, 0x20, 0xEB, 0x09, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	if (i != COUNT_windowedMode_AOE10c) {
		throw AOE_binDataSetupException("Binary setup error for windowedMode_AOE10c. Bad element count.");
	}
#ifdef _DEBUG
	printf("windowed_AOE10c=%d\n", i);
#endif
}


void AOE_binData::InitWindowedMode_b() {
	int i = 0;

	NEXT_INITSEQ_2_NOVAR(this->windowedMode_10b.GetBinSeqDefinition(i),
		ScreenToClient1,
		"Fix ScreenToClient call.\n Impacts mouse when placing an object...",
		0x01961F,
		(0x8B, 0x47, 0x0C, 0x8B, 0x88, 0x94, 0x08, 0x00, 0x00, 0x85, 0xC9, 0x75, 0x2D, 0x8B, 0x4F, 0x10, 0x56, 0x51, 0xFF, 0x15, 0xC4, 0xA7, 0x7D, 0x00, 0x8B, 0x06, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x07, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x89, 0x06, 0x8B, 0x46, 0x04, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x08, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x89, 0x46, 0x04, 0x5F, 0x5E, 0xC2, 0x04, 0x00, 0x90), // default=no
		(0x8B, 0x4F, 0x10, 0x56, 0x51, 0xFF, 0x15, 0xC4, 0xA7, 0x7D, 0x00, 0x8B, 0x06, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x07, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x89, 0x06, 0x8B, 0x46, 0x04, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x08, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x89, 0x46, 0x04, 0x5F, 0x5E, 0xC2, 0x04, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->windowedMode_10b.GetBinSeqDefinition(i),
		ScreenToClient2,
		"Fix ScreenToClient call. Impacts mouse position...",
		0x4A014,
		(0x8B, 0x46, 0x04, 0x8B, 0x08, 0x80, 0xB9, 0x79, 0x04, 0x00, 0x00, 0x01, 0x75, 0x3B, 0x8B, 0x40, 0x04, 0x8D, 0x54, 0x24, 0x10, 0x52, 0x50, 0xFF, 0x15, 0xC4, 0xA7, 0x7D, 0x00, 0x8B, 0x54, 0x24, 0x10, 0x81, 0xFA, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x0A, 0x81, 0xEA, 0x00, 0x00, 0x01, 0x00, 0x89, 0x54, 0x24, 0x10, 0x8B, 0x44, 0x24, 0x14, 0x3D, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x13, 0x2D, 0x00, 0x00, 0x01, 0x00, 0x89, 0x44, 0x24, 0x14, 0xEB, 0x08, 0x8B, 0x44, 0x24, 0x14, 0x8B, 0x54, 0x24, 0x10, 0x89, 0x56), // default=no
		(0x8B, 0x46, 0x04, 0x8B, 0x40, 0x04, 0x8D, 0x54, 0x24, 0x10, 0x52, 0x50, 0xFF, 0x15, 0xC4, 0xA7, 0x7D, 0x00, 0x8B, 0x54, 0x24, 0x10, 0x81, 0xFA, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x0A, 0x81, 0xEA, 0x00, 0x00, 0x01, 0x00, 0x89, 0x54, 0x24, 0x10, 0x8B, 0x44, 0x24, 0x14, 0x3D, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x09, 0x2D, 0x00, 0x00, 0x01, 0x00, 0x89, 0x44, 0x24, 0x14, 0xEB, 0x13, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x89, 0x56),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->windowedMode_10b.GetBinSeqDefinition(i),
		ScreenToClient3,
		"Fix ScreenToClient call. Impacts mouse cursor change according to underlying object (possible action)",
		0x11612F,
		(0x8B, 0x47, 0x20, 0x8B, 0x08, 0x80, 0xB9, 0x79, 0x04, 0x00, 0x00, 0x01, 0x75, 0x2D), // default=no
		(0x8B, 0x47, 0x20, 0xEB, 0x09, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	if (i != COUNT_windowedMode_10b) {
		throw AOE_binDataSetupException("Binary setup error for windowedMode_10b. Bad element count.");
	}
#ifdef _DEBUG
	printf("windowed_10b=%d\n", i);
#endif
}


void AOE_binData::InitWindowedMode_c() {
	int i = 0;

	NEXT_INITSEQ_2_NOVAR(this->windowedMode_10c.GetBinSeqDefinition(i),
		ScreenToClient1,
		"Fix ScreenToClient call.\n Impacts mouse when placing an object...",
		0x019B30,
		(0x47, 0x0C, 0x8B, 0x88, 0x94, 0x08, 0x00, 0x00, 0x85, 0xC9, 0x75, 0x2D, 0x8B, 0x4F, 0x10, 0x56, 0x51, 0xFF, 0x15, 0xB4, 0x22, 0x54, 0x00, 0x8B, 0x06, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x07, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x89, 0x06, 0x8B, 0x46, 0x04, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x08, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x89, 0x46, 0x04, 0x5F, 0x5E, 0xC2, 0x04, 0x00, 0x90, 0x90), // default=no
		(0x4F, 0x10, 0x56, 0x51, 0xFF, 0x15, 0xB4, 0x22, 0x54, 0x00, 0x8B, 0x06, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x07, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x89, 0x06, 0x8B, 0x46, 0x04, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x08, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x89, 0x46, 0x04, 0x5F, 0x5E, 0xC2, 0x04, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->windowedMode_10c.GetBinSeqDefinition(i),
		ScreenToClient2,
		"Fix ScreenToClient call. Impacts mouse position...",
		0x49FC8,
		(0x08, 0x80, 0xB9, 0x79, 0x04, 0x00, 0x00, 0x01, 0x75, 0x3B, 0x8B, 0x40, 0x04, 0x8D, 0x54, 0x24, 0x10, 0x52, 0x50, 0xFF, 0x15, 0xB4, 0x22, 0x54, 0x00, 0x8B, 0x54, 0x24, 0x10, 0x81, 0xFA, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x0A, 0x81, 0xEA, 0x00, 0x00, 0x01, 0x00, 0x89, 0x54, 0x24, 0x10, 0x8B, 0x44, 0x24, 0x14, 0x3D, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x13, 0x2D, 0x00, 0x00, 0x01, 0x00, 0x89, 0x44, 0x24, 0x14, 0xEB, 0x08, 0x8B, 0x44, 0x24, 0x14, 0x8B, 0x54, 0x24, 0x10, 0x89, 0x56, 0x78), // default=no
		(0x40, 0x04, 0x8D, 0x54, 0x24, 0x10, 0x52, 0x50, 0xFF, 0x15, 0xB4, 0x22, 0x54, 0x00, 0x8B, 0x54, 0x24, 0x10, 0x81, 0xFA, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x0A, 0x81, 0xEA, 0x00, 0x00, 0x01, 0x00, 0x89, 0x54, 0x24, 0x10, 0x8B, 0x44, 0x24, 0x14, 0x3D, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x09, 0x2D, 0x00, 0x00, 0x01, 0x00, 0x89, 0x44, 0x24, 0x14, 0xEB, 0x13, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x89, 0x56, 0x78),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->windowedMode_10c.GetBinSeqDefinition(i),
		ScreenToClient3,
		"Fix ScreenToClient call. Impacts mouse cursor change according to underlying object (possible action)",
		0x114510,
		(0x47, 0x20, 0x8B, 0x08, 0x80, 0xB9, 0x79, 0x04, 0x00, 0x00, 0x01, 0x75, 0x2D), // default=no
		(0x47, 0x20, 0xEB, 0x09, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	if (i != COUNT_windowedMode_10c) {
		throw AOE_binDataSetupException("Binary setup error for windowedMode_10c. Bad element count.");
	}
#ifdef _DEBUG
	printf("windowed_10c=%d\n", i);
#endif

	// VEG mode ; do not enable (obsolete)
	i = 0;
	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		Header1,
		"EXE Header",
		512,
		(0x54, 0x48, 0x49, 0x53, 0x5F, 0x43, 0x4F, 0x44), // default=no
		(0x2E, 0x63, 0x6F, 0x64, 0x65, 0x00, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		Header2,
		"EXE Header",
		632,
		(0x54, 0x48, 0x49, 0x53, 0x5F, 0x44, 0x41, 0x54), // default=no
		(0x2E, 0x64, 0x61, 0x74, 0x61, 0x32, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		Header3,
		"EXE Header",
		672,
		(0x49, 0x6E, 0x66, 0x33, 0x32, 0x44, 0x61, 0x74), // default=no
		(0x2E, 0x69, 0x64, 0x61, 0x74, 0x61, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	// Warning: VEG_ScreenToClient1 is NOT obsolete (used in current "official" windowed mode sequences)
	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		VEG_ScreenToClient1,
		"ScreenToClient1. This is NOT obsolete and must be enabled if windowed mode is ON.",
		105264,
		(0x47, 0x0C, 0x8B, 0x88, 0x94, 0x08, 0x00, 0x00, 0x85, 0xC9, 0x75, 0x2D, 0x8B, 0x4F, 0x10, 0x56, 0x51, 0xFF, 0x15, 0xB4, 0x22, 0x54, 0x00, 0x8B, 0x06, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x07, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x89, 0x06, 0x8B, 0x46, 0x04, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x08, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x89, 0x46, 0x04, 0x5F, 0x5E, 0xC2, 0x04, 0x00, 0x90, 0x90), // default=no
		(0x4F, 0x10, 0x56, 0x51, 0xFF, 0x15, 0xB4, 0x22, 0x54, 0x00, 0x8B, 0x06, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x07, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x89, 0x06, 0x8B, 0x46, 0x04, 0x3D, 0x60, 0xEA, 0x00, 0x00, 0x7E, 0x08, 0x05, 0x00, 0x00, 0xFF, 0xFF, 0x89, 0x46, 0x04, 0x5F, 0x5E, 0xC2, 0x04, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		RefTextAge,
		"RefTextAge",
		276220,
		(0x56, 0x57, 0xBF, 0xF8, 0x77, 0x55, 0x00, 0x83, 0xC9, 0xFF, 0x33, 0xC0, 0x8D, 0x54, 0x24, 0x14, 0xF2, 0xAE, 0xF7, 0xD1, 0x2B, 0xF9, 0x8B, 0xC1, 0x8B, 0xF7, 0x8B, 0xFA, 0x8D, 0x54, 0x24, 0x79, 0xC1, 0xE9, 0x02, 0xF3, 0xA5, 0x8B, 0xC8, 0x33, 0xC0, 0x83, 0xE1, 0x03, 0xF3, 0xA4, 0xBF, 0xE8, 0x77, 0x55, 0x00, 0x83, 0xC9, 0xFF, 0xF2, 0xAE, 0xF7, 0xD1, 0x2B, 0xF9, 0x8B, 0xC1, 0x8B, 0xF7, 0x8B, 0xFA, 0x8D, 0x94, 0x24, 0x8E, 0x00, 0x00, 0x00, 0xC1, 0xE9, 0x02, 0xF3, 0xA5, 0x8B, 0xC8, 0x83, 0xE1, 0x03, 0xF3, 0xA4, 0x8D, 0x4C, 0x24), // default=no
		(0x56, 0x57, 0x8D, 0xBC, 0x24, 0x58, 0x14, 0x00, 0x00, 0x57, 0xE8, 0x35, 0x5E, 0xFD, 0xFF, 0x83, 0xC4, 0x04, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xBF, 0xF8, 0x77, 0x55, 0x00, 0x83, 0xC9, 0xFF, 0x33, 0xC0, 0x8D, 0x54, 0x24, 0x14, 0xF2, 0xAE, 0xF7, 0xD1, 0x2B, 0xF9, 0x8B, 0xF7, 0x8B, 0xFA, 0xF3, 0xA4, 0x8D, 0x54, 0x24, 0x79, 0xBF, 0xE8, 0x77, 0x55, 0x00, 0x83, 0xC9, 0xFF, 0xF2, 0xAE, 0xF7, 0xD1, 0x2B, 0xF9, 0x8B, 0xF7, 0x8B, 0xFA, 0xF3, 0xA4, 0x8D, 0x94, 0x24, 0x8E, 0x00, 0x00, 0x00, 0x8D, 0x4C, 0x24),
		FM_OFF,
		FM_ON
		);

	// Warning: VEG_ScreenToClient2 is NOT obsolete (used in current "official" windowed mode sequences)
	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		VEG_ScreenToClient2,
		"ScreenToClient. This is NOT obsolete and must be enabled if windowed mode is ON.",
		303048,
		(0x08, 0x80, 0xB9, 0x79, 0x04, 0x00, 0x00, 0x01, 0x75, 0x3B, 0x8B, 0x40, 0x04, 0x8D, 0x54, 0x24, 0x10, 0x52, 0x50, 0xFF, 0x15, 0xB4, 0x22, 0x54, 0x00, 0x8B, 0x54, 0x24, 0x10, 0x81, 0xFA, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x0A, 0x81, 0xEA, 0x00, 0x00, 0x01, 0x00, 0x89, 0x54, 0x24, 0x10, 0x8B, 0x44, 0x24, 0x14, 0x3D, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x13, 0x2D, 0x00, 0x00, 0x01, 0x00, 0x89, 0x44, 0x24, 0x14, 0xEB, 0x08, 0x8B, 0x44, 0x24, 0x14, 0x8B, 0x54, 0x24, 0x10, 0x89, 0x56, 0x78), // default=no
		(0x40, 0x04, 0x8D, 0x54, 0x24, 0x10, 0x52, 0x50, 0xFF, 0x15, 0xB4, 0x22, 0x54, 0x00, 0x8B, 0x54, 0x24, 0x10, 0x81, 0xFA, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x0A, 0x81, 0xEA, 0x00, 0x00, 0x01, 0x00, 0x89, 0x54, 0x24, 0x10, 0x8B, 0x44, 0x24, 0x14, 0x3D, 0x00, 0x80, 0x00, 0x00, 0x7E, 0x09, 0x2D, 0x00, 0x00, 0x01, 0x00, 0x89, 0x44, 0x24, 0x14, 0xEB, 0x13, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x89, 0x56, 0x78),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		GetWindowRect,
		"GetWindowRect",
		305112,
		(0x30, 0x80, 0xBE, 0x79, 0x04, 0x00, 0x00, 0x01, 0x75, 0x40, 0x8B, 0x56, 0x04, 0x8D, 0x4C, 0x24, 0x04, 0x51, 0x52, 0xFF, 0x15, 0x78, 0x22, 0x54, 0x00, 0x8B, 0x44, 0x24, 0x0C, 0x8B, 0x74, 0x24, 0x04, 0x2B, 0xC6, 0x99, 0x2B, 0xC2, 0x8B, 0xC8, 0x8B, 0x44, 0x24, 0x10, 0xD1, 0xF9, 0x03, 0xCE, 0x8B, 0x74, 0x24, 0x08, 0x2B, 0xC6, 0x99, 0x2B), // default=no
		(0x30, 0x8B, 0x56, 0x04, 0x8D, 0x4C, 0x24, 0x04, 0x51, 0x52, 0xFF, 0x15, 0x78, 0x22, 0x54, 0x00, 0x8B, 0x44, 0x24, 0x0C, 0x8B, 0x74, 0x24, 0x04, 0x2B, 0xC6, 0x99, 0x2B, 0xC2, 0x8B, 0xC8, 0x8B, 0x44, 0x24, 0x10, 0xD1, 0xF9, 0x03, 0xCE, 0x8B, 0x74, 0x24, 0x08, 0x2B, 0xC6, 0x99, 0x2B, 0xC2, 0xD1, 0xF8, 0x03, 0xC6, 0x50, 0x51, 0xFF, 0x15),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		SetCursorPos,
		"SetCursorPos",
		305168,
		(0xC2, 0xD1, 0xF8, 0x03, 0xC6, 0x50, 0x51, 0xFF, 0x15, 0x24, 0x23, 0x54, 0x00, 0x5E, 0x83, 0xC4, 0x10, 0xC3, 0x8B, 0x46, 0x2C, 0x99, 0x2B, 0xC2, 0x8B, 0xC8, 0x8B, 0x46, 0x30, 0x99, 0x2B, 0xC2, 0xD1, 0xF8, 0xD1, 0xF9, 0x50, 0x51, 0xFF, 0x15, 0x24, 0x23, 0x54, 0x00, 0x5E, 0x83, 0xC4, 0x10, 0xC3, 0x90, 0x90, 0x90), // default=no
		(0x24, 0x23, 0x54, 0x00, 0x5E, 0x83, 0xC4, 0x10, 0xC3, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	// Warning: VEG_ScreenToClient3 is NOT obsolete (used in current "official" windowed mode sequences)
	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		VEG_ScreenToClient3,
		"ScreenToClient. This is NOT obsolete and must be enabled if windowed mode is ON.",
		1131792,
		(0x47, 0x20, 0x8B, 0x08, 0x80, 0xB9, 0x79, 0x04, 0x00, 0x00, 0x01, 0x75, 0x2D), // default=no
		(0x47, 0x20, 0xEB, 0x09, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		text,
		"text update",
		1406980,
		(0x65, 0x73, 0x20, 0x45, 0x78, 0x70, 0x61, 0x6E, 0x73, 0x69, 0x6F, 0x6E, 0x00, 0x00, 0x00, 0x00, 0x41, 0x66, 0x74, 0x65, 0x72, 0x20, 0x52, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x20, 0x4D, 0x61, 0x70, 0x20, 0x47, 0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x25, 0x64, 0x00), // default=no
		(0x65, 0x73, 0x3A, 0x20, 0x54, 0x68, 0x65, 0x20, 0x52, 0x69, 0x73, 0x65, 0x20, 0x6F, 0x66, 0x20, 0x52, 0x6F, 0x6D, 0x65, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x4C, 0x6F, 0x61, 0x64, 0x43, 0x6F, 0x6E, 0x66, 0x69, 0x67, 0x00, 0x00, 0x63, 0x6F, 0x6E, 0x66, 0x69, 0x67, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x00, 0x4C, 0x61, 0x73, 0x74, 0x20, 0x52, 0x6E, 0x64, 0x3D, 0x25, 0x64, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		Loadconfig,
		"Loadconfig",
		103728,
		(0x81, 0xEC, 0x0C, 0x02, 0x00, 0x00, 0x53, 0x8B, 0xD9, 0x56, 0x8B, 0x43, 0x0C, 0x8B, 0x88, 0x08, 0x04, 0x00, 0x00, 0x85, 0xC9, 0x75, 0x00, 0x5E, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x5B, 0x81, 0xC4, 0x0C, 0x02, 0x00, 0x00, 0xC2, 0x04, 0x00, 0x8B, 0x84, 0x24, 0x18, 0x02, 0x00, 0x00, 0x85, 0xC0, 0x7E, 0x55, 0x55, 0x33, 0xED, 0x57, 0x33, 0xF6, 0x8B, 0x8B, 0x8C, 0x01, 0x00, 0x00, 0x8D, 0x7E, 0x01, 0x57, 0xE8, 0x99, 0xA7, 0x00, 0x00, 0x83, 0xF8, 0x02, 0x75, 0x0D, 0x56, 0x8B, 0xCB, 0xE8, 0x7C, 0x22, 0x00, 0x00, 0x85, 0xC0, 0x74, 0x01, 0x45, 0x8B, 0xF7, 0x83, 0xFE, 0x09, 0x7C, 0xD8, 0x8B, 0x4B, 0x0C, 0x33, 0xC0, 0x5F, 0x8B, 0x91, 0x0C, 0x04, 0x00, 0x00, 0x8B, 0x8C, 0x24, 0x1C, 0x02, 0x00, 0x00, 0x0F, 0xAF, 0xD5, 0x3B, 0xCA, 0x5D, 0x5E, 0x5B, 0x0F, 0x9E, 0xC0, 0x81, 0xC4, 0x0C, 0x02, 0x00, 0x00, 0xC2, 0x04, 0x00, 0xA1, 0xE4, 0x0D, 0x58, 0x00, 0x85, 0xC0, 0x74, 0x10, 0x5E, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x5B, 0x81, 0xC4, 0x0C, 0x02, 0x00, 0x00, 0xC2, 0x04, 0x00, 0x8B, 0x8B, 0xAC, 0x01, 0x00, 0x00, 0x68, 0xAC, 0x4A, 0x55, 0x00, 0x6A, 0x00, 0xE8, 0xFE, 0x18, 0x05, 0x00, 0x8B, 0xF0, 0x85, 0xF6, 0x75, 0x0B, 0x5E, 0x5B, 0x81, 0xC4, 0x0C, 0x02, 0x00, 0x00, 0xC2, 0x04, 0x00, 0x56, 0xFF, 0x15, 0x30, 0x22, 0x54, 0x00, 0x83, 0xF8, 0x05, 0x74, 0x0D, 0x5E, 0x33, 0xC0, 0x5B, 0x81, 0xC4, 0x0C, 0x02, 0x00, 0x00, 0xC2, 0x04, 0x00, 0x8D, 0x84, 0x24, 0x14, 0x01, 0x00, 0x00, 0x68, 0x00, 0x01, 0x00, 0x00, 0x8D, 0x4C, 0x24, 0x10, 0x50, 0x8D, 0x54, 0x24, 0x18, 0x51, 0x8D, 0x44, 0x24, 0x14, 0x52, 0x50, 0x8D, 0x4C, 0x24, 0x28, 0x68, 0x00, 0x01, 0x00, 0x00, 0x51, 0x56, 0xFF, 0x15, 0x44, 0x21, 0x54, 0x00, 0x85, 0xC0, 0x75, 0x0B, 0x5E, 0x5B, 0x81, 0xC4, 0x0C, 0x02, 0x00, 0x00, 0xC2, 0x04, 0x00, 0x8B, 0x53, 0x0C, 0x8D, 0x44, 0x24, 0x14, 0x81, 0xC2, 0xFD, 0x02, 0x00, 0x00, 0x52, 0x50, 0xE8, 0x64, 0xEE, 0x10, 0x00, 0x83, 0xC4, 0x08, 0xF7, 0xD8, 0x1B, 0xC0, 0x5E, 0x40, 0x5B, 0x81, 0xC4, 0x0C, 0x02, 0x00, 0x00, 0xC2, 0x04, 0x00, 0x90), // default=no
		(0x33, 0xC0, 0x40, 0xC2, 0x04, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x81, 0xEC, 0x08, 0x02, 0x00, 0x00, 0x56, 0x57, 0x53, 0x51, 0x52, 0x8B, 0x35, 0x24, 0x22, 0x54, 0x00, 0x68, 0x2C, 0x78, 0x55, 0x00, 0xFF, 0xD6, 0x8B, 0xD8, 0x85, 0xDB, 0x74, 0x25, 0x68, 0x20, 0x78, 0x55, 0x00, 0x53, 0xFF, 0x15, 0xF8, 0x20, 0x54, 0x00, 0x8B, 0xF8, 0x85, 0xFF, 0x74, 0x0C, 0x8B, 0x84, 0x24, 0x20, 0x02, 0x00, 0x00, 0x50, 0xFF, 0xD7, 0xEB, 0x07, 0x53, 0xFF, 0x15, 0x28, 0x22, 0x54, 0x00, 0x5A, 0x59, 0x5B, 0x5F, 0x5E, 0x81, 0xC4, 0x08, 0x02, 0x00, 0x00, 0xC3, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);
	

	// Not necessary...
	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		GameFileNumber1,
		"GameFileNumber",
		93124,
		(0x22, 0x54, 0x00, 0x8B, 0x8E, 0xAC, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x47, 0x55, 0x00, 0x6A, 0x00), // default=no
		(0x22, 0x54, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		GameFileNumber2,
		"GameFileNumber",
		93140,
		(0x89, 0x46, 0x44, 0xE8, 0x74, 0x43, 0x05, 0x00, 0x85, 0xC0, 0x7C, 0x64, 0x8B, 0x8E, 0xAC, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x47, 0x55, 0x00, 0x6A, 0x00, 0xE8, 0x5E, 0x43, 0x05, 0x00, 0x50), // default=no
		(0x89, 0x46, 0x44, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x6A, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		GameFileNumber3,
		"GameFileNumber",
		94108,
		(0x74, 0x60, 0x8B, 0x8E, 0xAC, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x47, 0x55, 0x00, 0x53, 0xE8, 0xA1, 0x3F, 0x05, 0x00, 0x85, 0xC0, 0x7C, 0x31, 0x8B, 0x8E, 0xAC, 0x01, 0x00, 0x00, 0x68, 0xA0, 0x47, 0x55, 0x00, 0x53, 0xE8, 0x8C, 0x3F, 0x05, 0x00, 0x50, 0x8D, 0x44, 0x24), // default=no
		(0x74, 0x60, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x6A, 0x00, 0x8D, 0x44, 0x24),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		Rnd_remove_percent,
		"Rnd_remove_percent",
		288280,
		(0x14, 0x78, 0x55, 0x00), // default=no
		(0x38, 0x78, 0x55, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		music_wav,
		"music.wav",
		328712,
		(0xC9, 0x74, 0x13, 0x80, 0x39, 0x00, 0x74, 0x0E, 0x51, 0x55, 0x8D, 0x44, 0x24, 0x34, 0x68, 0x4C, 0x48, 0x55, 0x00, 0x50, 0xEB, 0x12, 0x8B, 0x8D, 0x44, 0x02, 0x00, 0x00, 0x8D, 0x54, 0x24, 0x2C, 0x51, 0x55, 0x68, 0x7C, 0x79, 0x55, 0x00, 0x52), // default=no
		(0xC9, 0x74, 0x10, 0x80, 0x39, 0x00, 0x74, 0x0B, 0x51, 0x4D, 0x55, 0x45, 0x68, 0x4C, 0x48, 0x55, 0x00, 0xEB, 0x0F, 0x8B, 0x8D, 0x44, 0x02, 0x00, 0x00, 0x51, 0x4D, 0x55, 0x45, 0x68, 0x7C, 0x79, 0x55, 0x00, 0x8D, 0x44, 0x24, 0x38, 0x50, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		jump,
		"jump",
		329055,
		(0x18, 0x01, 0x00, 0x00, 0x76, 0x1B), // default=no
		(0x18, 0x01, 0x00, 0x00, 0xEB, 0x1B),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		ref_language_dll,
		"ref_language.dll",
		1042240,
		(0x68, 0x9C, 0xCB, 0x55), // default=no
		(0x68, 0x54, 0x47, 0x55),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		game_nfo,
		"game.nfo",
		1394584,
		(0x25, 0x64, 0x2E, 0x6E, 0x66, 0x6F), // default=no
		(0x2E, 0x6E, 0x66, 0x6F, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		default_scx,
		"default.scx text update, remove %d",
		1412896,
		(0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74, 0x25, 0x64, 0x2E, 0x73, 0x63, 0x78, 0x00, 0x00, 0x00), // default=no
		(0x64, 0x65, 0x66, 0x61, 0x75, 0x6C, 0x74, 0x2E, 0x73, 0x63, 0x78, 0x00, 0x00, 0x00, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->VEG_windowedMode_10c.GetBinSeqDefinition(i),
		default_txt,
		"default text update, remove %d",
		1413016,
		(0x75, 0x6C, 0x74, 0x25, 0x64), // default=no
		(0x75, 0x6C, 0x74, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	if (i != COUNT_VEG_windowedMode_10c) {
		throw AOE_binDataSetupException("Binary setup error for VEG_windowedMode_10c. Bad element count.");
	}
#ifdef _DEBUG
	printf("VEG_windowedMode_10c=%d\n", i);
#endif
}


void AOE_binData::InitTechFixes_10b() {
	int i = 0;
	// 1.0b
	/*NEXT_INITSEQ_2_NOVAR(this->techFixes_10b.GetBinSeqDefinition(i),
		CD_CHECK,
		"Standard CD check",
		0x19010,
		(0x88, 0x08, 0x04, 0x00, 0x00, 0x85, 0xc9, 0x75, 0x12, 0xB8, 0x01, 0x00, 0x00, 0x00), // default=yes
		(0x88, 0x08, 0x04, 0x00, 0x00, 0x85, 0xc9, 0x75, 0x00, 0xB8, 0x01, 0x00, 0x00, 0x00),
		FM_ON,
		FM_OFF
		);*/

	NEXT_INITSEQ_3_NOVAR(
		this->techFixes_10b.GetBinSeqDefinition(i),
		CD_CHECK,
		"Standard CD check",
		0x19010,
		(0x88, 0x08, 0x04, 0x00, 0x00, 0x85, 0xc9, 0x75, 0x12), // default=yes
		(0x88, 0x08, 0x04, 0x00, 0x00, 0x85, 0xc9, 0x75, 0x00),
		(0x88, 0x08, 0x04, 0x00, 0x00, 0x85, 0xc9, 0x90, 0x90),
		FM_ON,
		FM_OFF,
		FM_NONE // Vietnamese cracked version: will not be visible in UI, but declaring this sequence will add the ability to set to a "valid" sequence instead.
		);

	// Missing ones there...

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10b.GetBinSeqDefinition(i),
		FixStackOverflow1,
		"Fix scenario screen crash.",
		0x69060,
		(0x81, 0xEC, 0x74, 0x01, 0x00, 0x00), // default=no
		(0x81, 0xEC, 0x74, 0x02, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10b.GetBinSeqDefinition(i),
		FixStackOverflow2,
		"Fix scenario screen crash.",
		0x69069,
		(0x8B, 0xB4, 0x24, 0x84, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0xB4, 0x24, 0x84, 0x02, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10b.GetBinSeqDefinition(i),
		FixStackOverflow3,
		"Fix scenario screen crash.",
		0x694A3,
		(0x81, 0xC4, 0x74, 0x01, 0x00, 0x00), // default=no
		(0x81, 0xC4, 0x74, 0x02, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10b.GetBinSeqDefinition(i),
		FixStackOverflow4,
		"Fix scenario screen crash.",
		0x694C2,
		(0x81, 0xC4, 0x74, 0x01, 0x00, 0x00), // default=no
		(0x81, 0xC4, 0x74, 0x02, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);


	if (i != COUNT_techFixes_10b) {
		throw AOE_binDataSetupException("Binary setup error for techFixes_10c. Bad element count.");
	}
#ifdef _DEBUG
	printf("techFixes_10b=%d\n", i); // debug
#endif
}

void AOE_binData::InitTechFixes_10c() {
	int i = 0;

	// You can now use this option at will, it is compatible with ROR_API.
	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		CD_CHECK,
		"Standard CD check",
		103741,
		(0x8B, 0x88, 0x08, 0x04, 0x00, 0x00, 0x85, 0xc9, 0x75, 0x10), // default=yes
		(0x8B, 0x88, 0x08, 0x04, 0x00, 0x00, 0x85, 0xc9, 0x75, 0x00),
		FM_ON,
		FM_OFF
		);

	// Considered obsolete. Use default
	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		CD_CHECK_COLLECTORS,
		"CD check - collectors edition. For compatibility reasons, do not deactivate this. See standard CD check.",
		103868,
		(0x85, 0xC0, 0x74, 0x10), // default=yes - USE THIS VALUE.
		(0x85, 0xC0, 0x90, 0x90),
		FM_ON,
		FM_OFF
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		MoveMouseToCenter,
		"Move mouse to center at various occasions against your will",
		0x4A7D0,
		(0x8B, 0x41, 0x04, 0x83, 0xEC, 0x10), // default=yes
		(0xC3, 0x90, 0x90, 0x83, 0xEC, 0x10),
		FM_ON,
		FM_OFF
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		CrashToDesktop_Fix,
		"Fix the random crash to desktop involving the computer AI.",
		838805,
		(0x8D, 0x4E, 0x1C, 0x83, 0x39, 0xFF, 0x74, 0x0F, 0x40, 0x83, 0xC1, 0x04, 0x83, 0xF8, 0x28, 0x7C, 0xF2, 0x33, 0xC0, 0x5E, 0xC2, 0x08, 0x00, 0x8B, 0x54, 0x24, 0x08, 0x57, 0x89, 0x54, 0x86, 0x1C, 0xC7, 0x84, 0x86, 0xBC, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF), // default=no
		(0x8B, 0x54, 0xE4, 0x08, 0x83, 0xC1, 0x1C, 0x83, 0xFA, 0xFF, 0x74, 0x0D, 0xB0, 0x28, 0x83, 0x39, 0xFF, 0x74, 0x0B, 0x83, 0xC1, 0x04, 0x48, 0x75, 0xF5, 0x5E, 0xC2, 0x08, 0x00, 0x90, 0x57, 0x89, 0x11, 0xC7, 0x81, 0xA0, 0x00, 0x00, 0x00, 0xFF, 0xFF, 0xFF, 0xFF),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixStackOverflow1,
		"Fix scenario screen crash.",
		428960,
		(0x81, 0xEC, 0x6C, 0x01, 0x00, 0x00), // default=no
		(0x81, 0xEC, 0x6C, 0x02, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixStackOverflow2,
		"Fix scenario screen crash.",
		428969,
		(0x8B, 0xB4, 0x24, 0x7C, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0xB4, 0x24, 0x7C, 0x02, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixStackOverflow3,
		"Fix scenario screen crash.",
		429899,
		(0x81, 0xC4, 0x6C, 0x01, 0x00, 0x00), // default=no
		(0x81, 0xC4, 0x6C, 0x02, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixStackOverflow4,
		"Fix scenario screen crash.",
		429930,
		(0x81, 0xC4, 0x6C, 0x01, 0x00, 0x00), // default=no
		(0x81, 0xC4, 0x6C, 0x02, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		GameSaveBugVersionFix_1,
		"Part 1 of the fixes for the game save bug (projectiles bug). Use the proper version number 7.30, not 7.24.",
		0x11DEF1,
		(0xC7, 0x05, 0x04, 0xF8, 0x55, 0x00, 0x14, 0xAE, 0xE7, 0x40), // default=no
		(0xC7, 0x05, 0x04, 0xF8, 0x55, 0x00, 0x9A, 0x99, 0xE9, 0x40),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		GameSaveBugVersionFix_2,
		"Part 2 of the fixes for the game save bug (projectiles bug). Use the proper version number 7.30, not 7.24.",
		0x11E0CD,
		(0xC7, 0x05, 0x04, 0xF8, 0x55, 0x00, 0x14, 0xAE, 0xE7, 0x40), // default=no
		(0xC7, 0x05, 0x04, 0xF8, 0x55, 0x00, 0x9A, 0x99, 0xE9, 0x40),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		GameSaveBugVersionFix_3,
		"Part 3 of the fixes for the game save bug (projectiles bug). Use the proper version number 7.30, not 7.24.",
		0x15F804,
		(0x14, 0xAE, 0xE7, 0x40), // default=no
		(0x9A, 0x99, 0xE9, 0x40),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixTrainUnitAI_overflow,
		"Fix a minor bug that provokes 0xFFFF useless loops.",
		712756,
		(0x8B, 0x86, 0xC0, 0x01, 0x00, 0x00, 0x6A, 0xFF, 0x66, 0x8B, 0x08), // default=no
		(0x8B, 0x86, 0xC0, 0x01, 0x00, 0x00, 0x6A, 0x01, 0x66, 0x8B, 0x08),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixScenarioAIInitBug1,
		"Fix a bug in scenario AI initialization that can block some researches.",
		0xB8AC0,
		(0x8B, 0xCE, 0xE8, 0x89, 0xB6, 0xF9, 0xFF, 0x8B, 0x4B, 0x08), // default=no
		(0x8B, 0xCE, 0xEB, 0x6D, 0x8B, 0x41, 0x04, 0x8B, 0x4B, 0x08),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixScenarioAIInitBug2,
		"Fix a bug in scenario AI initialization that can block some researches.",
		0xB8B18,
		(0x3D, 0x14, 0x01, 0x00, 0x00, 0x75, 0x10, 0x8B, 0x8F, 0xBC, 0x05, 0x00, 0x00, 0xC7, 0x81, 0xB4, 0x22, 0x01, 0x00, 0x01, 0x00, 0x00, 0x00, 0x5F, 0x5E, 0x5D, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x5B, 0xC2, 0x08, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90), // default=no
		(0x3D, 0x14, 0x01, 0x00, 0x00, 0x75, 0x0D, 0x8B, 0x8F, 0xBC, 0x05, 0x00, 0x00, 0xC6, 0x81, 0xB4, 0x22, 0x01, 0x00, 0x01, 0xE9, 0xFF, 0x00, 0x00, 0x00, 0x8B, 0x46, 0x74, 0x3C, 0x01, 0x74, 0xA5, 0x3C, 0x04, 0x74, 0xA1, 0xEB, 0x86, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixRequiredFirstBuilding,
		"Fix a bug in strategy AI. SNRequiredFirstBuilding is not correctly evaluated. This removes a duplicate unnecessary hardcoded check on granary/storage pit.",
		0xB831B,
		(0x85, 0xC0, 0x74, 0x08, 0x8B, 0x44, 0x24, 0x18, 0x85, 0xC0, 0x75, 0x44, 0x8B, 0x8F, 0xBC, 0x05, 0x00, 0x00), // default=no
		(0x85, 0xC0, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xEB, 0x44, 0x8B, 0x8F, 0xBC, 0x05, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixRevealMapAtStartup,
		"Fix a bug with Reveal map option: it is not applied correctly to all players. The bug can impact games when using gaia1-gaia8 cheat codes.",
		0x1039AD,
		(0x8B, 0x0C, 0xB0, 0xE8, 0x9B, 0x07, 0xF5, 0xFF, 0x85, 0xC0), // default=no
		(0x8B, 0x0C, 0xB0, 0x33, 0xC0, 0x90, 0x90, 0x90, 0x85, 0xC0),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixUsedCivNameIndexBug1,
		"Fix an array index bug in internal variables used to compute different names for all players. Part 1.",
		0x105FE2,
		(0x8D, 0x84, 0x3E, 0x98, 0x11, 0x00, 0x00), // default=no
		(0x8D, 0x84, 0x3E, 0x8E, 0x11, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixUsedCivNameIndexBug2,
		"Fix an array index bug in internal variables used to compute different names for all players. Part 2.",
		0x106002,
		(0x38, 0x9C, 0x39, 0x98, 0x11, 0x00, 0x00), // default=no
		(0x38, 0x9C, 0x39, 0x8E, 0x11, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixUsedCivNameIndexBug3,
		"Fix an array index bug in internal variables used to compute different names for all players. Part 3.",
		0x10600D,
		(0x8D, 0x8C, 0x3E, 0x98, 0x11, 0x00, 0x00), // default=no
		(0x8D, 0x8C, 0x3E, 0x8E, 0x11, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixUsedCivNameIndexBug4,
		"Fix an array index bug in internal variables used to compute different names for all players. Part 4.",
		0x106027,
		(0x88, 0x9C, 0x38, 0x98, 0x11, 0x00, 0x00), // default=no
		(0x88, 0x9C, 0x38, 0x8E, 0x11, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixUsedCivNameInitSize,
		"Fix initialization bug in internal variables used to compute different names for all players.",
		0x106047,
		(0xB9, 0x28, 0x00, 0x00, 0x00), // default=no
		(0xB9, 0x32, 0x00, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixCityPlan_TC_check1,
		"Fix city plan calculation test on placementType / Town center. Part 1.",
		0xC26AE,
		(0x83, 0xF9, 0x6D, 0x75, 0x18), // default=no
		(0x83, 0xF9, 0x09, 0x75, 0x18),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixCityPlan_TC_check2,
		"Fix city plan calculation test on placementType / Town center. Part 2.",
		0xC2740,
		(0x83, 0xF8, 0x6D, 0xD9, 0x41, 0x28), // default=no
		(0x83, 0xF8, 0x09, 0xD9, 0x41, 0x28),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixCityPlan_TC_check3,
		"Fix city plan calculation test on placementType / Town center. Part 3.",
		0xC291C,
		(0x83, 0xF8, 0x6D, 0xD9, 0x41, 0x28), // default=no
		(0x83, 0xF8, 0x09, 0xD9, 0x41, 0x28),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixCityPlan_TC_check4,
		"Fix city plan calculation test on placementType / Town center. Part 4.",
		0xC29BF,
		(0x83, 0xFD, 0x6D, 0x75, 0x06), // default=no
		(0x83, 0xFD, 0x09, 0x75, 0x06),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixCityPlan_gr_check1,
		"Fix city plan calculation test on placementType / Granary. Part 1.",
		0xC292C,
		(0x83, 0xF8, 0x44, 0x74, 0x05), // default=no
		(0x83, 0xF8, 0x02, 0x74, 0x05),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixCityPlan_sp_check1,
		"Fix city plan calculation test on placementType / Storage pit. Part 1.",
		0xC2931,
		(0x83, 0xF8, 0x67, 0x75, 0x08), // default=no
		(0x83, 0xF8, 0x01, 0x75, 0x08),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixDeserializeMapDataFromFileYSize,
		"Fix a bug that leads to game crash when loading non-square maps.",
		0x44D87,
		(0x8B, 0x47, 0x0C, 0x3B, 0xF0), // default=no
		(0x8B, 0x47, 0x08, 0x3B, 0xF0),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixSerializeMapDataToFileYSize,
		"Fix a bug that leads to bad data and game crash when saving non-square maps.",
		0x44C6F,
		(0xE8, 0xCC, 0x6D, 0x02, 0x00, 0x8B, 0x0B, 0x83, 0xC4, 0x24, 0x47, 0x0F, 0xBF, 0xC7, 0x3B, 0xC1), // default=no
		(0xE8, 0xCC, 0x6D, 0x02, 0x00, 0x8B, 0x4B, 0xFC, 0x83, 0xC4, 0x24, 0x47, 0x8B, 0xC7, 0x3B, 0xC1),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixUnitCalcPathMapSize1,
		"Fix stuck units/possible crashes in non-square maps (x <> y). Part 1.",
		0x58956,
		(0x0F, 0x8F, 0xF3, 0x1A, 0x00, 0x00, 0x3B, 0xD0, 0x0F, 0x8F, 0xEB, 0x1A, 0x00, 0x00, 0x8B, 0x55, 0x10), // default=no
		(0x0F, 0x8F, 0xF3, 0x1A, 0x00, 0x00, 0x3B, 0x56, 0x08, 0x7F, 0x15, 0x90, 0x90, 0x90, 0x8B, 0x55, 0x10),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixUnitCalcPathMapSize2,
		"Fix stuck units/possible crashes in non-square maps (x <> y). Part 2.",
		0x58972,
		(0x85, 0xC9, 0x0F, 0x8C, 0xD5, 0x1A, 0x00, 0x00, 0x3B, 0xD0, 0x0F, 0x8F, 0xCD, 0x1A, 0x00, 0x00, 0x3B, 0xC8, 0x0F, 0x8F, 0xC5, 0x1A, 0x00, 0x00), // default=no
		(0x85, 0xC9, 0x7D, 0x05, 0xE9, 0xD4, 0x1A, 0x00, 0x00, 0x3B, 0xD0, 0x7F, 0xF7, 0x3B, 0x4E, 0x08, 0x90, 0x90, 0x0F, 0x8F, 0xC5, 0x1A, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixScEditorGenMapPlayer8Init_1,
		"Fix initialization for player8 in scenario editor when generating maps. Part 1.",
		0x94205,
		(0x83, 0xFF, 0x20, 0x7C, 0xD2), // default=no
		(0x83, 0xFF, 0x20, 0x7E, 0xD2),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixScEditorGenMapPlayer8Init_2,
		"Fix initialization for player8 in scenario editor when generating maps. Part 1.",
		0x94234,
		(0x83, 0xFF, 0x20, 0x7C, 0xD3), // default=no
		(0x83, 0xFF, 0x20, 0x7E, 0xD3),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixAICaptureArtefactDistance_check,
		"Fix distance in movement check for AI to capture artefact.",
		0xD8819,
		(0x6A, 0x00, 0x68, 0x00, 0x00, 0x00, 0x40, 0x51), // default=no
		(0x6A, 0x00, 0x68, 0x00, 0x00, 0x80, 0x3F, 0x51),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixAICaptureArtefactDistance_execution,
		"Fix distance in AI capture artefact activity.",
		0xD88A3,
		(0x6A, 0x64, 0x68, 0x00, 0x00, 0x00, 0x40, 0x8B, 0x11), // default=no
		(0x6A, 0x64, 0x68, 0x00, 0x00, 0x80, 0x3F, 0x8B, 0x11),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->techFixes_10c.GetBinSeqDefinition(i),
		FixReadCampaignIndexInSavedGame,
		"Fix a technical bug in reading savegame files: 'no campaign' index (0) is wrongfully interpreted.",
		0x11CC90,
		(0x85, 0xC0, 0x74, 0x21), // default=no
		(0x85, 0xC0, 0x7C, 0x21),
		FM_OFF,
		FM_ON
		);


	if (i != COUNT_techFixes_10c) {
		throw AOE_binDataSetupException("Binary setup error for techFixes_10c. Bad element count.");
	}
#ifdef _DEBUG
	printf("techFixes_10c=%d\n", i); // debug
#endif
	// + 2 doppleganger fixes (not necessary)
}

void AOE_binData::InitOptions_AOE10b() {
	int i = 0;

	NEXT_INITSEQ_1_VAR(this->options_AOE10b.GetBinSeqDefinition(i),
		SetSinglePlayerMaxPop,
		"Set the maximum population number for ALL players in single player games.",
		0x921A2,
		(0x5E, 0xC3, 0xB0, 0x32, 0x5E, 0xC3),
		SVT_INT_1B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->options_AOE10b.GetBinSeqDefinition(i),
		SetAIHousesMaxPop,
		"Set the maximum population value that will be used to compute AI's auto-build houses functionality. Maximum supported value is 127.",
		0x100AB8,
		(0xE8, 0xA3, 0xD0, 0xF7, 0xFF, 0x83, 0xC0, 0x32, 0x3B, 0xC6),
		SVT_INT_1B,
		7
		);

	if (i != COUNT_options_AOE10b) {
		throw AOE_binDataSetupException("Binary setup error for options_AOE10c. Bad element count.");
	}
#ifdef _DEBUG
	printf("options=%d\n", i);
#endif
}

void AOE_binData::InitOptions_AOE10c() {
	int i = 0;

	NEXT_INITSEQ_1_VAR(this->options_AOE10c.GetBinSeqDefinition(i),
		SetSinglePlayerMaxPop,
		"Set the maximum population number for ALL players in single player games.",
		0xFFF12,
		(0x5E, 0xC3, 0xB0, 0x32, 0x5E, 0xC3),
		SVT_INT_1B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->options_AOE10c.GetBinSeqDefinition(i),
		SetAIHousesMaxPop,
		"Set the maximum population value that will be used to compute AI's auto-build houses functionality. Maximum supported value is 127.",
		0xB5CC4,
		(0xE8, 0xE7, 0xF8, 0x01, 0x00, 0x83, 0xC0, 0x32, 0x3B, 0xD8),
		SVT_INT_1B,
		7
		);

	if (i != COUNT_options_AOE10c) {
		throw AOE_binDataSetupException("Binary setup error for options_AOE10c. Bad element count.");
	}
#ifdef _DEBUG
	printf("options=%d\n", i);
#endif
}

void AOE_binData::InitOptions_10b() {
	int i = 0;

	NEXT_INITSEQ_2_NOVAR(this->options_10b.GetBinSeqDefinition(i),
		InitSN188_SNAttackWinningPlayer,
		"Sets if computer player prefers attacking winning player. If 0, AI players prefer attacking weakest player !",
		0xCA19F,
		(0x89, 0x90, 0xF4, 0x02, 0x00, 0x00), // default=yes
		(0x89, 0x88, 0xF4, 0x02, 0x00, 0x00),
		FM_ON,
		FM_OFF
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10b.GetBinSeqDefinition(i),
		InitSN194_CoopShareInformation,
		"Sets if computer players can chat and share information",
		0xCA1D5,
		(0x89, 0x90, 0x0C, 0x03, 0x00, 0x00), // default=yes
		(0x89, 0x88, 0x0C, 0x03, 0x00, 0x00),
		FM_ON,
		FM_OFF
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10b.GetBinSeqDefinition(i),
		InitSN201_TrackPlayerHistory,
		"[OBSOLETE] Sets if computer player try to learn from human behaviour (not implemented !)",
		0xF519A,
		(0x6A, 0x01, 0x68, 0xC9, 0x00, 0x00, 0x00), // default=yes
		(0x6A, 0x00, 0x68, 0xC9, 0x00, 0x00, 0x00),
		FM_ON,
		FM_OFF
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10b.GetBinSeqDefinition(i),
		InitSN215_AllowDiplomacyChangeOnAllyAttack,
		"215-AllowDiplomacyChangeOnAllyAttack PER number is initialized to Yes for RM/DM.",
		0xCA260,
		(0x89, 0x90, 0x60, 0x03, 0x00, 0x00), // default=yes
		(0x89, 0x88, 0x60, 0x03, 0x00, 0x00),
		FM_ON,
		FM_OFF
		);

	NEXT_INITSEQ_1_VAR(this->options_10b.GetBinSeqDefinition(i),
		InitSN41_AttackGroupGatherSpacing,
		"Controls the relative proximity (to the group gather point) that grouped units must be in before the group is considered gathered. Must be >= 1.\
		Default = 04",
		0xC9D99,
		(0xC7, 0x80, 0xA8, 0, 0, 0, 4, 0, 0, 0),
		SVT_INT_4B,
		6
		);

	NEXT_INITSEQ_1_VAR(this->options_10b.GetBinSeqDefinition(i),
		InitSN29_MinimumPeaceLikeLevel,
		"Sets the level at which computer players must like another player before allying with that player.\
		Must be >= 0 and <= 100.\
		Default = 85.",
		0xC9D46,
		(0xc7, 0x40, 0x78, 0x55, 0x00, 0x00, 0x00),
		SVT_INT_4B,
		3
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10b.GetBinSeqDefinition(i),
		AOEDebugToFile,
		"Enable AOE debugging to c:\\aoeai.txt",
		0xB8A5,
		(0x74, 0x5F, 0x85, 0xC9, 0x75, 0x5B),
		(0x90, 0x90, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_1_VAR(this->options_10b.GetBinSeqDefinition(i),
		LVL5_BONUS_AMOUNT,
		"Change hardest level computer resources bonus.",
		0xf651C,
		(0xb8, 0xd0, 0x07, 00, 00),
		SVT_INT_4B,
		1
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10b.GetBinSeqDefinition(i),
		lvl5DisableGoldBonus,
		"Disable level 5 (hardest) bonus for Gold.",
		0xF6521,
		(0x8B, 0xF0), // default=no
		(0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10b.GetBinSeqDefinition(i),
		lvl5DisableStoneBonus,
		"Disable level 5 (hardest) bonus for Stone.",
		0xF6523,
		(0x8B, 0xF8), // default=no
		(0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10b.GetBinSeqDefinition(i),
		lvl5DisableWoodBonus,
		"Disable level 5 (hardest) bonus for Wood.",
		0xF6525,
		(0x8B, 0xD8), // default=no
		(0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_1_VAR(this->options_10b.GetBinSeqDefinition(i),
		PointsPerTemple,
		"Points per temple built (or per unit if you checked PopulationPoints).",
		0x10D7E4,
		(0x8B, 0x4D, 0x40, 0x6A, 0x03),
		SVT_INT_1B,
		4
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10b.GetBinSeqDefinition(i),
		PopulationPoints,
		"Remove points from temple built and counts current population instead",
		0x10D7EA,
		(0x6A, 0x34, 0x8B, 0x14, 0xB1), // default=no
		(0x6A, 0x0B, 0x8B, 0x14, 0xB1),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_1_VAR(this->options_10b.GetBinSeqDefinition(i),
		SetSinglePlayerMaxPop,
		"Set the maximum population number for ALL players in single player games.",
		0x106F82,
		(0x5E, 0xC3, 0xB0, 0x32, 0x5E, 0xC3),
		SVT_INT_1B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->options_10b.GetBinSeqDefinition(i),
		SetAIHousesMaxPop,
		"Set the maximum population value that will be used to compute AI's auto-build houses functionality. Maximum supported value is 127.",
		0xB8C32,
		(0xE8, 0xD9, 0xFD, 0x01, 0x00, 0x83, 0xC0, 0x32, 0x3B, 0xD8),
		SVT_INT_1B,
		7
		);
	// TO DO: continue with remaining setup

	if (i != COUNT_options_10b) {
		throw AOE_binDataSetupException("Binary setup error for options_10c. Bad element count.");
	}
#ifdef _DEBUG
	printf("options=%d\n", i);
#endif
}

void AOE_binData::InitOptions_10c() {
	int i = 0;

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		AOEDebugToFile,
		"Enable AOE debugging to c:\\aoeai.txt",
		49604,
		(0x74, 0x50, 0x85, 0xC0, 0x75, 0x63),
		(0x90, 0x90, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitSN29_MinimumPeaceLikeLevel,
		"[OBSOLETE] Sets the level at which computer players must like another player before allying with that player.\
Must be >= 0 and <= 100.\
Default = 85.",
		822758,
		(0xc7, 0x40, 0x78, 0x55, 0x00, 0x00, 0x00),
		SVT_INT_4B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitSN41_AttackGroupGatherSpacing,
		"[OBSOLETE] Controls the relative proximity (to the group gather point) that grouped units must be in before the group is considered gathered. Must be >= 1.\
Default = 04",
		822841,
		(0xc7, 0x80, 0xA8, 0, 0, 0, 4, 0, 0, 0),
		SVT_INT_4B,
		6
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitSN161_RequiredFirstBuilding,
		"[OBSOLETE] Set value for 161-SNRequiredFirstBuilding SN Number (init2)",
		1002086,
		(0x6A, 0x04, 0x68, 0xA1, 00, 00, 00),
		SVT_INT_1B,
		1
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_SN181_ForceNOTUpgradeToToolAgeASAP,
		"[OBSOLETE] This option allow you to force PER calculator to set 181-ForceUpgradeToToolAgeASAP to NO (0) when it wants to set it to 1.",
		1003649,
		(0x7D, 0x04, 0x6A, 0x01),
		(0x7D, 0x04, 0x6A, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_SN181_ForceUpgradeToToolAgeASAP,
		"[OBSOLETE] This option allow you to force PER calculator to set 181-ForceUpgradeToToolAgeASAP to YES (1) when it wants to set it to 0.",
		1003653,
		(0xEB, 0x02, 0x6A, 0x00),
		(0xEB, 0x02, 0x6A, 0x01),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_SN182_ForceNOTUpgradeToBronzeAgeASAP,
		"[OBSOLETE] This option allow you to force PER calculator to set 182-ForceUpgradeToBronzeAgeASAP to NO (0) when it wants to set it to 1.",
		1003695,
		(0x7D, 0x04, 0x6A, 0x01),
		(0x7D, 0x04, 0x6A, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_SN182_ForceUpgradeToBronzeAgeASAP,
		"[OBSOLETE] This option allow you to force PER calculator to set 182-ForceUpgradeToBronzeAgeASAP to YES (1) when it wants to set it to 0.",
		1003699,
		(0xEB, 0x02, 0x6A, 0x00),
		(0xEB, 0x02, 0x6A, 0x01),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitSN188_SNAttackWinningPlayer,
		"[OBSOLETE] Sets if computer player prefers attacking winning player.If 0, AI players prefer attacking weakest player !",
		823871,
		(0x89, 0x90, 0xF4, 0x02, 0x00, 0x00), // default=yes
		(0x89, 0x88, 0xF4, 0x02, 0x00, 0x00),
		FM_ON,
		FM_OFF
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitSN194_CoopShareInformation,
		"[OBSOLETE] Sets if computer players can chat and share information",
		823925,
		(0x89, 0x90, 0x0C, 0x03, 0x00, 0x00), // default=yes
		(0x89, 0x88, 0x0C, 0x03, 0x00, 0x00),
		FM_ON,
		FM_OFF
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitSN201_TrackPlayerHistory,
		"[OBSOLETE] Sets if computer player try to learn from human behaviour (not implemented !)",
		997813,
		(0x6A, 0x01, 0x68, 0xC9, 0x00, 0x00, 0x00), // default=yes
		(0x6A, 0x00, 0x68, 0xC9, 0x00, 0x00, 0x00),
		FM_ON,
		FM_OFF
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitSN208_AutoBuildDocks,
		"[OBSOLETE] 208-AutoBuildDocks PER number customization for RM/DM.",
		1002736,
		(0x6A, 0x01, 0x68, 0xD0, 0x00, 0x00, 0x00), // default=yes
		(0x6A, 0x00, 0x68, 0xD0, 0x00, 0x00, 0x00),
		FM_ON,
		FM_OFF
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitSN209_AutoBuildFishingBoats,
		"[OBSOLETE] 209-AutoBuildFishingBoats PER number customization for RM/DM.",
		1002760,
		(0x6A, 0x01, 0x68, 0xD1, 0x00, 0x00, 0x00), // default=yes
		(0x6A, 0x00, 0x68, 0xD1, 0x00, 0x00, 0x00),
		FM_ON,
		FM_OFF
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitSN210_AutoBuildTransports,
		"[OBSOLETE] 210-AutoBuildTransports PER number customization for RM/DM.",
		1002784,
		(0x6A, 0x01, 0x68, 0xD2, 0x00, 0x00, 0x00), // default=yes
		(0x6A, 0x00, 0x68, 0xD2, 0x00, 0x00, 0x00),
		FM_ON,
		FM_OFF
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitSN215_AllowDiplomacyChangeOnAllyAttack,
		"[OBSOLETE] 215-AllowDiplomacyChangeOnAllyAttack PER number is initialized to Yes for RM/DM.",
		824059,
		(0x89, 0x90, 0x60, 0x03, 0x00, 0x00), // default=yes
		(0x89, 0x88, 0x60, 0x03, 0x00, 0x00),
		FM_ON,
		FM_OFF
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitSN223_AutoBuildWarships,
		"[OBSOLETE] 223-AutoBuildWarships PER number customization for RM/DM.",
		1002808,
		(0x6A, 0x01, 0x68, 0xDF, 0x00, 0x00, 0x00), // default=yes
		(0x6A, 0x00, 0x68, 0xDF, 0x00, 0x00, 0x00),
		FM_ON,
		FM_OFF
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_LVL5_BONUS_AMOUNT,
		"[OBSOLETE] Change hardest level computer resources bonus.",
		0xf4edd,
		(0xb8, 0xd0, 0x07, 00, 00),
		SVT_INT_4B,
		1
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_lvl5DisableGoldBonus,
		"[OBSOLETE] Disable level 5 (hardest) bonus for Gold.",
		0xF4EE2,
		(0x8B, 0xF0), // default=no
		(0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_lvl5DisableStoneBonus,
		"[OBSOLETE] Disable level 5 (hardest) bonus for Stone.",
		1003236,
		(0x8B, 0xF8), // default=no
		(0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_lvl5DisableWoodBonus,
		"[OBSOLETE] Disable level 5 (hardest) bonus for Wood.",
		1003238,
		(0x8B, 0xE8), // default=no
		(0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		PopulationPoints,
		"Remove points from temple built and counts current population instead",
		0x10BCD3, //1096915,
		(0x6A, 0x34, 0x8B, 0x0C, 0xB0), // default=no
		(0x6A, 0x0B, 0x8B, 0x0C, 0xB0),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		PointsPerTemple,
		"Points per temple built (or per unit if you checked PopulationPoints).",
		0x10BCCD, //1096909,
		(0x8B, 0x45, 0x40, 0x6A, 0x03),
		SVT_INT_1B,
		4
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		IdleDefenderAutoMove,
		"Use this option to enable idle military units auto-move. Your units will avoid staying close one to another.",
		944061,
		(0x0F, 0x84, 0x2D, 0x01, 0x00, 0x00), // default=no
		(0x90, 0x90, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		PriestAutoConvert,
		"Priests automatically convert enemy units within sight.",
		939570,
		(0x0F, 0x85, 0xA3, 0x00, 0x00, 0x00), // default=no
		(0x75, 0x04, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		disable_dislike_human_player,
		"Fairly manage computer player's like/dislike values computing (do not hate human players).\nAlso, enemy won't change diplomacy when attacked unless you really are enemy.",
		883471,
		(0x8B, 0x01, 0x52, 0x0F, 0x85, 0xCD, 0x00, 0x00, 0x00), // default=no
		(0x8B, 0x01, 0x52, 0xE9, 0xCE, 0x00, 0x00, 0x00, 0x90),
		FM_OFF,
		FM_ON
		);

	//disable_human_tracking_1
	//disable_human_tracking_2
	//disable_human_tracking_3

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_FixAI_initialDiplomacy,
		"[OBSOLETE] If this option is set, default diplomacy is enemy, not neutral. Prevents 'all-computers-allied' games.",
		1168585,
		(0x8B, 0x4E, 0x40, 0x6A, 0x01, 0x50), // default=no
		(0x8B, 0x4E, 0x40, 0x6A, 0x03, 0x50),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		gaiaX_cheat_code1,
		"Changes \"gaia\" cheat code into a set of 9 cheat codes \"gaia0\" to \"gaia8\" to play any of the existing players.",
		1065915,
		(0x8A, 0x10, 0x8A, 0xCA, 0x3A, 0x16, 0x75, 0x1C, 0x84, 0xC9, 0x74, 0x14, 0x8A, 0x50, 0x01, 0x8A, 0xCA, 0x3A, 0x56, 0x01, 0x75, 0x0E, 0x83, 0xC0, 0x02, 0x83, 0xC6, 0x02, 0x84, 0xC9, 0x75, 0xE0, 0x33, 0xC0, 0xEB, 0x05, 0x1B, 0xC0, 0x83, 0xD8, 0xFF, 0x85, 0xC0, 0x75, 0x5B), // default=no
		(0x8A, 0x0E, 0x84, 0xC9, 0x74, 0x16, 0x3A, 0x08, 0x75, 0x17, 0x8A, 0x48, 0x01, 0x3A, 0x4E, 0x01, 0x75, 0x0F, 0x83, 0xC0, 0x02, 0x83, 0xC6, 0x02, 0x84, 0xC9, 0x75, 0xE4, 0xE9, 0xA6, 0xC3, 0x01, 0x00, 0x1B, 0xC0, 0x83, 0xD8, 0xFF, 0x85, 0xC0, 0x75, 0x5E, 0x33, 0xC0, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		gaiaX_cheat_code2,
		"Changes \"gaia\" cheat code into a set of 9 cheat codes \"gaia0\" to \"gaia8\" to play any of the existing players.",
		1066023,
		(0x8B, 0x55, 0x00, 0x6A, 0x00, 0x8B, 0xCD), // default=no
		(0x8B, 0x55, 0x00, 0x56, 0x90, 0x8B, 0xCD),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		gaiaX_cheat_code3,
		"Changes \"gaia\" cheat code into a set of 9 cheat codes \"gaia0\" to \"gaia8\" to play any of the existing players.",
		1181570,
		(0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90), // default=no
		(0x33, 0xC9, 0x8A, 0x08, 0x80, 0xE9, 0x30, 0x8B, 0xF1, 0xE9, 0x55, 0x3C, 0xFE, 0xFF),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		play_cheat_code,
		"Replace \"gaia\" cheat code by \"play\".",
		1429176,
		(0x31, 0x5A, 0x68, 0x78, 0x23, 0x4C, 0x68, 0x78), // default=no
		(0x77, 0x3E, 0x2B, 0x21, 0x68, 0x78, 0x3A, 0x3A),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		GenerateNameForHuman_PrepareNames,
		"Prepare a generated name for human player also at game init. This change has no visible effect by itself, enable GenerateNameForHumanInDM_Or_RM to actually generate a name for human player.",
		0x0010349A,
		(0x83, 0xF8, 0x04, 0x75, 0x19, 0x56, 0x8B, 0xCD), // default=no
		(0x83, 0xF8, 0x04, 0x90, 0x90, 0x56, 0x8B, 0xCD),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		GenerateNameForHumanInDM_Or_RM,
		"In DM or RM only, generate a name for human player according to the selected civilisation, instead of using \"You\" or the equivalent (depends on language.dll). Requires GenerateNameForHuman_PrepareNames to work properly.",
		0x0010379A,
		(0x75, 0x12, 0x8B, 0x55, 0x00, 0x6A, 0x41, 0x53, 0x68, 0x6D, 0x28, 0x00, 0x00, 0x8B, 0xCD), // default=no
		(0x75, 0x12, 0xC6, 0x03, 0x00, 0xC6, 0x01, 0x04, 0xEB, 0x0A, 0x90, 0x90, 0x90, 0x8B, 0xCD),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		SetSinglePlayerMaxPop,
		"Set the maximum population number for ALL players in single player games.",
		0x105502, //1070338,
		(0x5E, 0xC3, 0xB0, 0x32, 0x5E, 0xC3),
		SVT_INT_1B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		SetAIHousesMaxPop,
		"Set the maximum population value that will be used to compute AI's auto-build houses functionality. Maximum supported value is 127. Please use RockNRor mod to allow higher values.",
		753266,
		(0xE8, 0x59, 0xF9, 0x01, 0x00, 0x83, 0xC0, 0x32, 0x3B, 0xD8),
		SVT_INT_1B,
		7
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		PostIronAge_Item,
		"Add the \"Post-Iron Age\" item to the Starting Age drop-down list in Game Settings.",
		640579,
		(0x6A, 0x04, 0x68, 0x6B, 0x10, 0x00, 0x00, 0xE8, 0x81, 0x57, 0xFC, 0xFF, 0x8B, 0x0F, 0x6A, 0x05, 0x68, 0x6C, 0x10, 0x00, 0x00, 0xE8, 0x73, 0x57, 0xFC, 0xFF, 0x8B, 0x0F), // default=no
		(0xBB, 0x04, 0x00, 0x00, 0x00, 0x8D, 0x83, 0x67, 0x10, 0x00, 0x00, 0x53, 0x50, 0xE8, 0x7B, 0x57, 0xFC, 0xFF, 0x43, 0x8B, 0x0F, 0x83, 0xFB, 0x07, 0x7C, 0xEB, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		PostIronAge_Setup,
		"Enables the ability to handle Post-Iron Age when starting a game.",
		1096382,
		(0x74, 0x46, 0x48, 0x74, 0x23, 0x48, 0x75, 0x5E, 0x66, 0x39, 0x5D, 0x3C, 0x8B, 0xF3, 0x7E, 0x56, 0x8B, 0x4D, 0x40, 0x6A, 0x18, 0x8B, 0x0C, 0xB1, 0xE8, 0xC5, 0x5D, 0xFE, 0xFF, 0x0F, 0xBF, 0x55, 0x3C, 0x46, 0x3B, 0xF2, 0x7C, 0xEA, 0xEB, 0x3E, 0x66, 0x39, 0x5D, 0x3C, 0x8B, 0xF3, 0x7E, 0x36, 0x8B, 0x45, 0x40, 0x6A, 0x17, 0x8B, 0x0C, 0xB0, 0xE8, 0xA5, 0x5D, 0xFE, 0xFF, 0x0F, 0xBF, 0x4D, 0x3C, 0x46, 0x3B, 0xF1, 0x7C, 0xEA), // default=no
		(0x74, 0x0F, 0x48, 0x74, 0x12, 0x48, 0x74, 0x15, 0x48, 0x75, 0x5B, 0x66, 0xBF, 0x01, 0x00, 0xEB, 0x10, 0x66, 0xBF, 0x19, 0x00, 0xEB, 0x0A, 0x66, 0xBF, 0x17, 0x00, 0xEB, 0x04, 0x66, 0xBF, 0x18, 0x00, 0x66, 0x39, 0x5D, 0x3C, 0x8B, 0x75, 0x40, 0x7E, 0x42, 0x66, 0x8B, 0x5D, 0x3C, 0x4B, 0x83, 0xC6, 0x04, 0x57, 0x8B, 0x0E, 0xE8, 0xA8, 0x5D, 0xFE, 0xFF, 0x4B, 0x75, 0xF2, 0xB3, 0x01, 0x31, 0xFF, 0x8B, 0xF3, 0xEB, 0x2D, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		AdditionalMapType,
		"Adds the hidden map type in game settings screen.",
		639444,
		(0x8B, 0x0F, 0x6A, 0x06, 0x68, 0x70, 0x29, 0x00, 0x00, 0xE8, 0xEE, 0x5B, 0xFC, 0xFF, 0x8B, 0x0F, 0x6A, 0x07, 0x68, 0x71, 0x29, 0x00, 0x00, 0xE8, 0xE0, 0x5B, 0xFC, 0xFF, 0x8B, 0x0F, 0x6A, 0x08), // default=no
		(0x8B, 0x0F, 0x33, 0xDB, 0xB3, 0x06, 0x8D, 0x83, 0x6A, 0x29, 0x00, 0x00, 0x53, 0x50, 0xE8, 0xE9, 0x5B, 0xFC, 0xFF, 0x43, 0x8B, 0x0F, 0x83, 0xFB, 0x09, 0x7C, 0xEB, 0x90, 0x8B, 0x0F, 0x6A, 0x09),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		AdditionalMapTypeChangeLabel,
		"This allows you to change the hidden map type's label in game settings screen (map type combobox). You can use 9286 for 'test'.",
		639476,
		(0x68, 0x72, 0x29, 0x00, 0x00, 0xE8, 0xD2, 0x5B, 0xFC, 0xFF),
		SVT_INT_4B,
		1
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		AdditionalMapType_FixLabelS,
		"Fix to display the correct text for hidden map type in game settings main screen.",
		575021,
		(0xE8, 0xDE, 0x8C, 0x07, 0x00, 0x83, 0xF8, 0x08, 0x77, 0x6E, 0xFF, 0x24, 0x85, 0xE8, 0xCD, 0x48, 0x00, 0x68, 0x6A, 0x29, 0x00, 0x00, 0xEB, 0x36), // default=no
		(0xE8, 0xDE, 0x8C, 0x07, 0x00, 0x83, 0xF8, 0x09, 0x77, 0x6E, 0x74, 0x3D, 0x05, 0x6A, 0x29, 0x00, 0x00, 0x50, 0x90, 0x90, 0x90, 0x90, 0xEB, 0x36),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		AdditionalMapType_FixLabelS_ChangeLabel,
		"This allows you to change the hidden map type's label in game settings main screen. You can use 9286 for 'test'.",
		575092,
		(0xEB, 0x05, 0x68, 0x72, 0x29, 0x00, 0x00, 0x8B, 0xCD),
		SVT_INT_4B,
		3
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		AdditionalMapType_FixLabelInstr,
		"Fix to display the correct text for hidden map type in scenarion instructions screen.",
		1092851,
		(0x83, 0xF8, 0x08, 0x0F, 0x87, 0xB2, 0x00, 0x00, 0x00, 0xFF, 0x24, 0x85, 0x18, 0xBE, 0x50, 0x00, 0x8B, 0x0D, 0x38, 0x0E, 0x58, 0x00, 0x68, 0x6A, 0x29, 0x00, 0x00, 0x8B, 0x11), // default=no
		(0x83, 0xF8, 0x09, 0x0F, 0x84, 0x85, 0x00, 0x00, 0x00, 0x05, 0x6A, 0x29, 0x00, 0x00, 0x50, 0x90, 0x8B, 0x0D, 0x38, 0x0E, 0x58, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x8B, 0x11),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		AdditionalMapType_FixLabelInstr_ChangeLabel,
		"This allows you to change the hidden map type's label in scenario instructions screen. You can use 9286 for 'test'.",
		1092987,
		(0x8B, 0x0D, 0x38, 0x0E, 0x58, 0x00, 0x68, 0x72, 0x29, 0x00, 0x00, 0x8B, 0x11),
		SVT_INT_4B,
		7
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		SE_AdditionalMapType,
		"Adds the hidden map type in scenario editor screen.",
		591539,
		(0x8B, 0x0F, 0x6A, 0x00, 0x68, 0x70, 0x29, 0x00, 0x00, 0xE8, 0x0F, 0x17, 0xFD, 0xFF, 0x8B, 0x0F, 0x6A, 0x00, 0x68, 0x71, 0x29, 0x00, 0x00, 0xE8, 0x01, 0x17, 0xFD, 0xFF, 0x8B, 0x0F, 0x6A, 0x00), // default=no
		(0x8B, 0x0F, 0x53, 0x33, 0xDB, 0xB3, 0x06, 0x8D, 0x83, 0x6A, 0x29, 0x00, 0x00, 0x6A, 0x00, 0x50, 0xE8, 0x08, 0x17, 0xFD, 0xFF, 0x43, 0x8B, 0x0F, 0x83, 0xFB, 0x09, 0x7C, 0xEA, 0x5B, 0x6A, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		SE_AdditionalMapTypeChangeLabel,
		"This allows you to change the hidden map type's label in scenario editor screen (map type combobox). You can use 9286 for 'test'.",
		591571,
		(0x68, 0x72, 0x29, 0x00, 0x00, 0xE8, 0xF3, 0x16, 0xFD, 0xFF),
		SVT_INT_4B,
		1
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		AdditionalResourcesChoice,
		"Adds the hidden initial resources choice in game settings screen.",
		640742,
		(0x8B, 0x0F, 0x6A, 0x02, 0x68, 0x09, 0x26, 0x00, 0x00, 0xE8, 0xDC, 0x56, 0xFC, 0xFF, 0x8B, 0x0F, 0x6A, 0x03, 0x68, 0x0A, 0x26, 0x00, 0x00, 0xE8, 0xCE, 0x56, 0xFC, 0xFF, 0x8B, 0x0F, 0x6A, 0xFF), // default=no
		(0x8B, 0x0F, 0x33, 0xDB, 0x43, 0x8D, 0x83, 0x07, 0x26, 0x00, 0x00, 0x53, 0x50, 0xE8, 0xD8, 0x56, 0xFC, 0xFF, 0x43, 0x8B, 0x0F, 0x83, 0xFB, 0x04, 0x7C, 0xEB, 0x90, 0x90, 0x90, 0x90, 0x6A, 0xFF),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		PathFindingDefaultValue,
		"Set default value for path finding.",
		0x103A17, //1063447,
		(0xC7, 0x05, 0x38, 0x47, 0x55, 0x00, 0xC4, 0x09, 0x00, 0x00),
		SVT_INT_4B,
		6
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_DeathMatchInitialFoodWood,
		"[OBSOLETE] Set a value (float) for the initial amount of food / wood in deathmatch games.",
		0x10BA60, //1096288,
		(0xBE, 0x00, 0x40, 0x9C, 0x46),
		SVT_FLOAT_4B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_DeathMatchInitialGold,
		"[OBSOLETE] Set a value (float) for the initial amount of gold in deathmatch games.",
		0x10BA65, //1096293,
		(0xBA, 0x00, 0x40, 0x1C, 0x46),
		SVT_FLOAT_4B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_DeathMatchInitialStone,
		"[OBSOLETE] Set a value (float) for the initial amount of stone in deathmatch games.",
		0x10BA6A, //1096298,
		(0xB9, 0x00, 0x40, 0x9C, 0x45),
		SVT_FLOAT_4B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitialResources_High_FoodWood,
		"[OBSOLETE] Set a value (float) for the initial amount of food / wood in random games with HIGH resources.",
		0x10B908, //1095944,
		(0xBA, 0x00, 0x00, 0x7A, 0x44),
		SVT_FLOAT_4B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitialResources_High_Stone,
		"[OBSOLETE] Set a value (float) for the initial amount of stone in random games with HIGH resources.",
		1095949,
		(0xB9, 0x00, 0x80, 0x3B, 0x44),
		SVT_FLOAT_4B,
		1
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitialResources_High_Gold_as_Stone,
		"[OBSOLETE] If you enable this option, all players will start games with the same initial gold amount as initial stone amount instead of 0 gold (for HIGH initial resources).",
		1095992,
		(0x89, 0x7E, 0x0C, 0x8B, 0x75, 0x40), // default=no
		(0x89, 0x4E, 0x0C, 0x8B, 0x75, 0x40),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitialResources_Medium_FoodWood,
		"[OBSOLETE] Set a value (float) for the initial amount of food / wood in random games with MEDIUM resources.",
		1096040,
		(0xBA, 0x00, 0x00, 0xFA, 0x43),
		SVT_FLOAT_4B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitialResources_Medium_Stone,
		"[OBSOLETE] Set a value (float) for the initial amount of stone in random games with MEDIUM resources.",
		1096033,
		(0xB9, 0x00, 0x00, 0x7A, 0x43),
		SVT_FLOAT_4B,
		1
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitialResources_Medium_Gold_as_Stone,
		"[OBSOLETE] If you enable this option, all players will start games with the same initial gold amount as initial stone amount instead of 0 gold (for MEDIUM initial resources).",
		1096081,
		(0x89, 0x7E, 0x0C, 0x8B, 0x75, 0x40), // default=no
		(0x89, 0x4E, 0x0C, 0x8B, 0x75, 0x40),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitialResources_Low_FoodWood,
		"[OBSOLETE] Set a value (float) for the initial amount of food / wood in random games with LOW resources.",
		1096115,
		(0xBA, 0x00, 0x00, 0x48, 0x43),
		SVT_FLOAT_4B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitialResources_Low_Stone,
		"[OBSOLETE] Set a value (float) for the initial amount of stone in random games with LOW resources.",
		1096120,
		(0xB9, 0x00, 0x00, 0xC8, 0x42),
		SVT_FLOAT_4B,
		1
		);

	NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
		OBSOLETE_InitialResources_Low_Gold_as_Stone,
		"[OBSOLETE] If you enable this option, all players will start games with the same initial gold amount as initial stone amount instead of 0 gold.",
		1096163,
		(0x89, 0x7E, 0x0C, 0x8B, 0x75, 0x40), // default=no
		(0x89, 0x4E, 0x0C, 0x8B, 0x75, 0x40),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		ShangInitialFoodDecrease,
		"Set the amount of food that is deduced from initial food for Shang civilization. Unsure about potential other impacts.",
		1353224,
		(0x00, 0x00, 0x20, 0x42),
		SVT_FLOAT_4B,
		0
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		PercentChancesToHaveRelics,
		"Sets the % chances to have relics in random games (including DM). Default is 50.",
		0x10B6A4,
		(0x83, 0xFA, 0x32, 0x7D, 0x2F),
		SVT_INT_1B,
		2
		);

	NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
		PercentChancesToHaveRuins,
		"Sets the % chances to have ruins in random games (including DM). Default is 50.",
		0x10B6E5,
		(0x83, 0xFA, 0x32, 0x0F, 0x8D, 0xBE, 0x00, 0x00, 0x00),
		SVT_INT_1B,
		2
		);

	if (i != COUNT_options_10c) {
		throw AOE_binDataSetupException("Binary setup error for options_10c. Bad element count.");
	}
#ifdef _DEBUG
	printf("options=%d\n", i);
#endif
}


void AOE_binData::InitSelectedUnits() {
	int i = 0;

	// All allocs: value should be 4*number + 2140.
	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		Alloc1,
		"Specific memory allocation.",
		1090516, // 0x10A3D4
		(0x68, 0x5C, 0x08, 0x00, 0x00),
		SVT_INT_4B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		Alloc2,
		"Specific memory allocation.",
		1090565,
		(0x68, 0x4C, 0x08, 0x00, 0x00),
		SVT_INT_4B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		Alloc3,
		"Specific memory allocation. GAIA player struct.",
		1090697,
		(0x68, 0x5C, 0x08, 0x00, 0x00),
		SVT_INT_4B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		Alloc4,
		"Specific memory allocation.",
		1090967,
		(0x68, 0x4C, 0x08, 0x00, 0x00),
		SVT_INT_4B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		Alloc5,
		"Specific memory allocation.",
		1090872,
		(0x68, 0x4C, 0x08, 0x00, 0x00),
		SVT_INT_4B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		Alloc6,
		"Specific memory allocation.",
		1091665,
		(0x68, 0x4C, 0x08, 0x00, 0x00),
		SVT_INT_4B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		Alloc7,
		"Specific memory allocation.",
		1091751,
		(0x68, 0x4C, 0x08, 0x00, 0x00),
		SVT_INT_4B,
		1
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		InitBuffer1,
		"Buffer initialization",
		383891,
		(0x8D, 0xBA, 0xA2, 0x01, 0x00, 0x00), // default=no
		(0x8D, 0xBA, 0x34, 0x01, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		InitBuffer2,
		"Buffer initialization",
		383897,
		(0xB9, 0x1F, 0x00, 0x00, 0x00), // default=no
		(0xB9, 0x3A, 0x00, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);


	// All MaxNumber elements: Should be the maximum number...
	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber1,
		"Maximum number of selected units",
		384027,
		(0x66, 0x83, 0xFA, 0x19),
		SVT_INT_1B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber2,
		"Maximum number of selected units",
		384237,
		(0x66, 0x83, 0xFE, 0x19),
		SVT_INT_1B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber3,
		"Maximum number of selected units",
		384466,
		(0x66, 0x3D, 0x19, 0x00),
		SVT_INT_1B,
		2
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber4,
		"Maximum number of selected units",
		384800,
		(0x66, 0x83, 0xFE, 0x19),
		SVT_INT_1B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber5,
		"Maximum number of selected units",
		384993,
		(0x66, 0x83, 0xFA, 0x19),
		SVT_INT_1B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber6,
		"Maximum number of selected units",
		385087,
		(0x66, 0x83, 0xFE, 0x19),
		SVT_INT_1B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber7,
		"Maximum number of selected units",
		385180,
		(0x66, 0x83, 0xFA, 0x19),
		SVT_INT_1B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber8,
		"Maximum number of selected units",
		385460,
		(0x83, 0xFD, 0x19),
		SVT_INT_1B,
		2
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber9,
		"Maximum number of selected units",
		385593,
		(0x66, 0x83, 0xFE, 0x19),
		SVT_INT_1B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber10,
		"Maximum number of selected units",
		385686,
		(0x83, 0xFE, 0x19),
		SVT_INT_1B,
		2
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber11,
		"Maximum number of selected units",
		383814, //0x5DB46
		(0xB9, 0x19, 0x00, 0x00, 0x00),
		SVT_INT_1B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber12,
		"Maximum number of selected units",
		186508,
		(0x66, 0x83, 0xFF, 0x19),
		SVT_INT_1B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber13,
		"Maximum number of selected units",
		537155,
		(0x66, 0x83, 0xFD, 0x19),
		SVT_INT_1B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber14,
		"Maximum number of selected units",
		384304,
		(0x66, 0x83, 0xFA, 0x19),
		SVT_INT_1B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber15,
		"Maximum number of selected units (find if a selected unit has projectile+blast)",
		0x82788,
		(0x66, 0x83, 0xF9, 0x19),
		SVT_INT_1B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber16,
		"Maximum number of selected units (related to display of buttons bar)",
		0x8298A,
		(0x66, 0x83, 0xF9, 0x19),
		SVT_INT_1B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber17,
		"Maximum number of selected units (press on tab)",
		0x85953,
		(0x66, 0x83, 0xF9, 0x19),
		SVT_INT_1B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber18,
		"Maximum number of selected units (press on tab)",
		0x85990,
		(0x66, 0x83, 0xF9, 0x19),
		SVT_INT_1B,
		3
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber19,
		"Maximum number of selected units",
		0x859F5,
		(0x83, 0xC6, 0x04, 0x83, 0xFF, 0x19, 0x7C, 0xCE),
		SVT_INT_1B,
		5
		);

	NEXT_INITSEQ_1_VAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		MaxNumber20,
		"Maximum number of selected units (right-click specific interactions evaluation)",
		0xF6DC7,
		(0x83, 0xFE, 0x19),
		SVT_INT_1B,
		2
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset1,
		"Update buffer offest (technical)",
		186474, //0x2D86A
		(0x8B, 0x84, 0x88, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x84, 0x88, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset2,
		"Update buffer offest (technical)",
		383870,
		(0x8D, 0xBA, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8D, 0xBA, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset3,
		"Update buffer offest (technical)",
		383883,
		(0x89, 0x82, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x89, 0x82, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset4,
		"Update buffer offest (technical)",
		384040,
		(0x8B, 0xB4, 0x88, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0xB4, 0x88, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset5,
		"Update buffer offest (technical)",
		384066,
		(0x89, 0x94, 0x88, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x89, 0x94, 0x88, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset6,
		"Update buffer offest (technical)",
		384084,
		(0x89, 0x90, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x89, 0x90, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset7,
		"Update buffer offest (technical)",
		384149,
		(0x8B, 0xBC, 0xB0, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0xBC, 0xB0, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset8,
		"Update buffer offest (technical)",
		384192,
		(0x89, 0x99, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x89, 0x99, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset9,
		"Update buffer offest (technical)",
		384212,
		(0x8B, 0x94, 0x81, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x94, 0x81, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset10,
		"Update buffer offest (technical)",
		384219,
		(0x8D, 0x84, 0x81, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8D, 0x84, 0x81, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset11,
		"Update buffer offest (technical)",
		383998,
		(0x89, 0xAF, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x89, 0xAF, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset12,
		"Update buffer offest (technical)",
		384971,
		(0x8B, 0x84, 0x81, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x84, 0x81, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset13,
		"Update buffer offest (technical)",
		385049,
		(0x8B, 0x94, 0x91, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x94, 0x91, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset14,
		"Update buffer offest (technical)",
		384287,
		(0x8B, 0x84, 0x81, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x84, 0x81, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset15,
		"Update buffer offest (technical)",
		384343,
		(0x8B, 0xB4, 0x81, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0xB4, 0x81, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset16,
		"Update buffer offest (technical)",
		384379,
		(0x89, 0x9C, 0x81, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x89, 0x9C, 0x81, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset17,
		"Update buffer offest (technical)",
		384388,
		(0x8B, 0x94, 0x91, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x94, 0x91, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset18,
		"Update buffer offest (technical)",
		384395,
		(0x89, 0x94, 0x81, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x89, 0x94, 0x81, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset19,
		"Update buffer offest (technical)",
		384409,
		(0x89, 0x9C, 0x81, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x89, 0x9C, 0x81, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset20,
		"Update buffer offest (technical)",
		384416,
		(0x8B, 0x91, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x91, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset21,
		"Update buffer offest (technical)",
		384443,
		(0x89, 0x99, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x89, 0x99, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset22,
		"Update buffer offest (technical)",
		384456,
		(0x39, 0x9C, 0x91, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x39, 0x9C, 0x91, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset23,
		"Update buffer offest (technical)",
		384480,
		(0x8B, 0x94, 0x81, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x94, 0x81, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset24,
		"Update buffer offest (technical)",
		384487,
		(0x89, 0x91, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x89, 0x91, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset25,
		"Update buffer offest (technical)",
		384779,
		(0x8B, 0x84, 0x8A, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x84, 0x8A, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset26,
		"Update buffer offest (technical)",
		385152,
		(0x8B, 0x84, 0x86, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x84, 0x86, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset27,
		"Update buffer offest (technical)",
		385303,
		(0x8D, 0xBE, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8D, 0xBE, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset28,
		"Update buffer offest (technical)",
		385557,
		(0x8B, 0x84, 0x87, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x84, 0x87, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset29,
		"Update buffer offest (technical)",
		385654,
		(0x8D, 0x91, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8D, 0x91, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset30,
		"Update buffer offest (technical)",
		524020,
		(0x8B, 0x88, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x88, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset31,
		"Update buffer offest (technical)",
		524068,
		(0x8B, 0x90, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x90, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset32,
		"Update buffer offest (technical)",
		537084,
		(0x8B, 0x8C, 0x8F, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x8C, 0x8F, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset33,
		"Update buffer offest (technical)",
		532357,
		(0x8B, 0xB8, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0xB8, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset34,
		"Update buffer offest (technical)",
		532383, // 0x81F9F
		(0x8B, 0x80, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x80, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset35,
		"Update buffer offest (technical)",
		546587,
		(0x8B, 0xB0, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0xB0, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset36,
		"Update buffer offest (technical)",
		545785,
		(0x8B, 0x88, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x88, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset37,
		"Update buffer offest (technical)",
		545806,
		(0x8B, 0x80, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x80, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset38,
		"Update buffer offest (technical)",
		545834,
		(0x8B, 0x80, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x80, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset39,
		"Update buffer offest (technical)",
		547269,
		(0x8D, 0xB3, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8D, 0xB3, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	// When pressing period key (select next idle villager)
	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset40,
		"Update buffer offest (technical) - next idle villager",
		0x85AAF,
		(0x8B, 0x80, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x80, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	// For the action: research a technology
	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset41,
		"Update buffer offest (technical) - research a technology",
		0xF1200, //987648,
		(0x8B, 0x81, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x81, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset42,
		"Update buffer offest (technical)",
		987712,
		(0x8B, 0x81, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x81, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset43,
		"Update buffer offest (technical)",
		1010928,
		(0x8D, 0x91, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8D, 0x91, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset44,
		"Update buffer offest (technical)",
		1017598,
		(0x8B, 0x80, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x80, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset45,
		"Update buffer offest (technical)",
		1022530,
		(0x8B, 0x88, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x88, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset46,
		"Update buffer offest (technical)",
		1022550,
		(0x8B, 0x90, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x90, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset47,
		"Update buffer offest (find if a selected unit has projectile+blast)",
		0x8275B,
		(0x8B, 0x84, 0x87, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x84, 0x87, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset48,
		"Update buffer offest (press on TAB)",
		0x8592D,
		(0x8B, 0x84, 0x86, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x84, 0x86, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset49,
		"Update buffer offest (press on TAB)",
		0x85938,
		(0x3B, 0x86, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x3B, 0x86, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset50,
		"Update buffer offest (press on TAB)",
		0x8595E,
		(0x8B, 0xBC, 0x8E, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0xBC, 0x8E, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset51,
		"Update buffer offest (press on TAB)",
		0x85973,
		(0x8B, 0x84, 0x86, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x84, 0x86, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset52,
		"Update buffer offest (press on TAB)",
		0x8597E,
		(0x3B, 0x86, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x3B, 0x86, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset53,
		"Update buffer offest (press on TAB)",
		0x8599A,
		(0x89, 0xBE, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x89, 0xBE, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset54,
		"Update buffer offest (technical). Display icon for transport.",
		0x82973,
		(0x8B, 0x84, 0x87, 0x38, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x84, 0x87, 0x60, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset55,
		"Update buffer offest (technical). Onclick mouseAction 12.",
		0x118F0C,
		(0x8B, 0x88, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x88, 0x5C, 0x01, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset56,
		"Update buffer offest (technical). Onclick to set cliffs/terrain/altitude.",
		0x119103,
		(0x8B, 0x90, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x90, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset57,
		"Update buffer offest (technical). Onclick mouseAction 2,3,11.",
		0x119164,
		(0x8B, 0x81, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x81, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->selectedUnits_10c.GetBinSeqDefinition(i),
		BufferOffset58,
		"Update buffer offest (technical). Onclick mouseAction F.",
		0x1191B9,
		(0x8B, 0x82, 0x34, 0x01, 0x00, 0x00), // default=no
		(0x8B, 0x82, 0x5C, 0x08, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	// ***** Dont forget to update EmpiresX_API::SetMaxSelectedUnits if you add new setup here. *****
	if (i != COUNT_selectedUnits_10c) {
		throw AOE_binDataSetupException("Binary setup error for selectedUnits_10c. Bad element count.");
	}
#ifdef _DEBUG
	printf("selectedUnits_10c=%d\n", i);
#endif
}



void AOE_binData::InitROR_API_AOE10b() {
	int i = 0;

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_AOE10b.GetBinSeqDefinition(i),
		ROR_API_VarDataUpdate,
		"ROR_API basic requirement. Update in variables section.",
		0x15FDF0,
		(0x00, 0x00, 0x00, 0x00, 0x41, 0x66, 0x74, 0x65, 0x72, 0x20, 0x52, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x20, 0x4D, 0x61, 0x70, 0x20, 0x47, 0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x25, 0x64, 0x00, 0x52, 0x61, 0x6E, 0x64), // default=no
		(0x00, 0x00, 0x00, 0x00, 0x4C, 0x61, 0x73, 0x74, 0x20, 0x52, 0x6E, 0x64, 0x3D, 0x25, 0x64, 0x00, 0x52, 0x4F, 0x52, 0x5F, 0x41, 0x50, 0x49, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x47, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x43, 0x61, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x61, 0x6E, 0x64),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_AOE10b.GetBinSeqDefinition(i),
		ROR_API_DLL_initialization,
		"ROR_API basic requirement. Make DLL initialization + init call.",
		0xF57EB,
		(0x57, 0xBF, 0x00, 0x92, 0x56, 0x00, 0xF2, 0xAE), // default=no
		(0x57, 0xE8, 0x20, 0x2C, 0xFF, 0xFF, 0xF2, 0xAE),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_AOE10b.GetBinSeqDefinition(i),
		ROR_API_CDCheck_stub,
		"Stub to make sure cd check is successful",
		0xE83BF,
		(0xCC, 0x81, 0xEC, 0x0C, 0x02, 0x00, 0x00, 0x53), // default=no
		(0xCC, 0x33, 0xC0, 0x40, 0xC2, 0x04, 0x00, 0x53),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_AOE10b.GetBinSeqDefinition(i),
		ROR_API_DLL_API_methods,
		"ROR_API basic requirement. Add API methods",
		0xE83D9,
		(0xB8, 0x01, 0x00, 0x00, 0x00, 0xE9, 0xE5, 0x00, 0x00, 0x00, 0x33, 0xFF, 0x8B, 0x84, 0x24, 0x20, 0x02, 0x00, 0x00, 0x3B, 0xC7, 0x7E, 0x49, 0x33, 0xDB, 0x8D, 0x6B, 0x01, 0x8B, 0x8E, 0x8C, 0x01, 0x00, 0x00, 0x55, 0xE8, 0xEF, 0x8E, 0x03, 0x00, 0x83, 0xF8, 0x02, 0x75, 0x0D, 0x53, 0x8B, 0xCE, 0xE8, 0xB2, 0x22, 0x00, 0x00, 0x85, 0xC0, 0x74, 0x01, 0x47, 0x8B, 0xDD, 0x83, 0xFD, 0x09, 0x7C, 0xD8, 0x8B, 0x46, 0x0C, 0x8B, 0x94, 0x24, 0x20), // default=no
		(0x60, 0x8B, 0x35, 0x5C, 0x16, 0x7E, 0x00, 0x68, 0x00, 0x1C, 0x56, 0x00, 0xFF, 0xD6, 0xA3, 0x18, 0x1C, 0x56, 0x00, 0x85, 0xC0, 0x74, 0x11, 0x68, 0x0C, 0x1C, 0x56, 0x00, 0x50, 0xFF, 0x15, 0x10, 0x17, 0x7E, 0x00, 0xA3, 0x1C, 0x1C, 0x56, 0x00, 0x61, 0xC3, 0x50, 0xA1, 0x1C, 0x1C, 0x56, 0x00, 0x85, 0xC0, 0x74, 0x02, 0xFF, 0xD0, 0x58, 0xC3, 0xE8, 0xC3, 0xFF, 0xFF, 0xFF, 0xE8, 0xE8, 0xFF, 0xFF, 0xFF, 0xBF, 0x00, 0x92, 0x56, 0x00, 0xC3),
		FM_OFF,
		FM_ON
		);

	// Non-critical changes :

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_AOE10b.GetBinSeqDefinition(i),
		OverloadGetLocalizedText,
		"Adds support for custom text localization.",
		0xE6156,
		(0x57, 0x8B, 0x7C, 0x24, 0x18, 0x8B, 0x44, 0x24, 0x10, 0x57), // default=no
		(0x57, 0xE8, 0xA7, 0x22, 0x00, 0x00, 0x90, 0x90, 0x90, 0x57),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_AOE10b.GetBinSeqDefinition(i),
		SetEmpiresDatFileName,
		"Ability to use custom empires.dat path/filename.",
		0x8DFFE,
		(0x8B, 0x46, 0x0C, 0x05, 0xF8, 0x01, 0x00, 0x00, 0x50), // default=no
		(0x8B, 0x46, 0x0C, 0xE8, 0xFD, 0xA3, 0x05, 0x00, 0x50),
		FM_OFF,
		FM_ON
		);


	if (i != COUNT_ROR_API_AOE10b) {
		throw AOE_binDataSetupException("Binary setup error for ROR_API_AOE10b. Bad element count.");
	}
#ifdef _DEBUG
	printf("ROR_API AOE1.0b=%d\n", i); // DEBUG
#endif
}



void AOE_binData::InitROR_API_AOE10c() {
	int i = 0;

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_AOE10c.GetBinSeqDefinition(i),
		ROR_API_VarDataUpdate,
		"ROR_API basic requirement. Update in variables section.",
		0x151058,
		(0x65, 0x73, 0x00, 0x00, 0x41, 0x66, 0x74, 0x65, 0x72, 0x20, 0x52, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x20, 0x4D, 0x61, 0x70, 0x20, 0x47, 0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x25, 0x64, 0x00, 0x52, 0x61, 0x6E, 0x64), // default=no
		(0x65, 0x73, 0x00, 0x00, 0x4C, 0x61, 0x73, 0x74, 0x20, 0x52, 0x6E, 0x64, 0x3D, 0x25, 0x64, 0x00, 0x52, 0x4F, 0x52, 0x5F, 0x41, 0x50, 0x49, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x47, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x43, 0x61, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x61, 0x6E, 0x64),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_AOE10c.GetBinSeqDefinition(i),
		ROR_API_DLL_initialization,
		"ROR_API basic requirement. Make DLL initialization + init call.",
		0x452FD,
		(0x57, 0xBF, 0x4C, 0x10, 0x55, 0x00, 0x83, 0xC9, 0xFF), // default=no
		(0x57, 0xE8, 0x4C, 0x3F, 0xFD, 0xFF, 0x83, 0xC9, 0xFF),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_AOE10c.GetBinSeqDefinition(i),
		ROR_API_CDCheck_stub,
		"Stub to make sure cd check is successful",
		0x191FF,
		(0x90, 0x81, 0xEC, 0x0C, 0x02, 0x00, 0x00, 0x53), // default=no
		(0x90, 0x33, 0xC0, 0x40, 0xC2, 0x04, 0x00, 0x53),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_AOE10c.GetBinSeqDefinition(i),
		ROR_API_DLL_API_methods,
		"ROR_API basic requirement. Add API methods",
		0x19217,
		(0x5E, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x5B, 0x81, 0xC4, 0x0C, 0x02, 0x00, 0x00, 0xC2, 0x04, 0x00, 0x8B, 0x84, 0x24, 0x18, 0x02, 0x00, 0x00, 0x85, 0xC0, 0x7E, 0x55, 0x55, 0x33, 0xED, 0x57, 0x33, 0xF6, 0x8B, 0x8B, 0x8C, 0x01, 0x00, 0x00, 0x8D, 0x7E, 0x01, 0x57, 0xE8, 0x79, 0xA5, 0x00, 0x00, 0x83, 0xF8, 0x02, 0x75, 0x0D, 0x56, 0x8B, 0xCB, 0xE8, 0x3C, 0x22, 0x00, 0x00, 0x85, 0xC0, 0x74, 0x01, 0x45, 0x8B, 0xF7, 0x83, 0xFE, 0x09, 0x7C), // default=no
		(0x60, 0x8B, 0x35, 0x10, 0xB2, 0x53, 0x00, 0x68, 0x68, 0x10, 0x55, 0x00, 0xFF, 0xD6, 0xA3, 0x80, 0x10, 0x55, 0x00, 0x85, 0xC0, 0x74, 0x11, 0x68, 0x74, 0x10, 0x55, 0x00, 0x50, 0xFF, 0x15, 0x0C, 0xB1, 0x53, 0x00, 0xA3, 0x84, 0x10, 0x55, 0x00, 0x61, 0xC3, 0x50, 0xA1, 0x84, 0x10, 0x55, 0x00, 0x85, 0xC0, 0x74, 0x02, 0xFF, 0xD0, 0x58, 0xC3, 0xE8, 0xC3, 0xFF, 0xFF, 0xFF, 0xE8, 0xE8, 0xFF, 0xFF, 0xFF, 0xBF, 0x4C, 0x10, 0x55, 0x00, 0xC3),
		FM_OFF,
		FM_ON
		);

	// Non-critical changes :
	NEXT_INITSEQ_2_NOVAR(this->ROR_API_AOE10c.GetBinSeqDefinition(i),
		OverloadGetLocalizedText,
		"Adds support for custom text localization.",
		0x17200,
		(0x8B, 0x44, 0x24, 0x04, 0x8B, 0x0D, 0x14, 0x97, 0x57, 0x00, 0x56), // default=no
		(0x8B, 0x44, 0x24, 0x04, 0xE8, 0x38, 0x20, 0x00, 0x00, 0x90, 0x56),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_AOE10c.GetBinSeqDefinition(i),
		SetEmpiresDatFileName,
		"Ability to use custom empires.dat path/filename.",
		0xFC06E,
		(0x8B, 0x4E, 0x0C, 0x81, 0xC1, 0xF8, 0x01, 0x00, 0x00, 0x51), // default=no
		(0x8B, 0x4E, 0x0C, 0xE8, 0xCB, 0xD1, 0xF1, 0xFF, 0x90, 0x51),
		FM_OFF,
		FM_ON
		);


	if (i != COUNT_ROR_API_AOE10c) {
		throw AOE_binDataSetupException("Binary setup error for ROR_API_AOE10c. Bad element count.");
	}
#ifdef _DEBUG
	printf("ROR_API AOE1.0c=%d\n", i); // DEBUG
#endif
}


void AOE_binData::InitROR_API_10b() {
	int i = 0;

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10b.GetBinSeqDefinition(i),
		ROR_API_VarDataUpdate,
		"ROR_API basic requirement. Update in variables section.",
		0x158200,
		(0x00, 0x00, 0x00, 0x00, 0x41, 0x66, 0x74, 0x65, 0x72, 0x20, 0x52, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x20, 0x4D, 0x61, 0x70, 0x20, 0x47, 0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x25, 0x64, 0x00, 0x52, 0x61, 0x6E, 0x64), // default=no
		(0x00, 0x00, 0x00, 0x00, 0x4C, 0x61, 0x73, 0x74, 0x20, 0x52, 0x6E, 0x64, 0x3D, 0x25, 0x64, 0x00, 0x52, 0x4F, 0x52, 0x5F, 0x41, 0x50, 0x49, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x47, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x43, 0x61, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x61, 0x6E, 0x64),
		FM_OFF,
		FM_ON
		);


	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10b.GetBinSeqDefinition(i),
		ROR_API_DLL_initialization,
		"ROR_API basic requirement. Make DLL initialization + init call.",
		0x438B2,
		(0x57, 0xBF, 0xE8, 0xA7, 0x55, 0x00, 0x83, 0xC9, 0xFF), // default=no
		(0x57, 0xE8, 0x99, 0x57, 0xFD, 0xFF, 0x83, 0xC9, 0xFF),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10b.GetBinSeqDefinition(i),
		ROR_API_CDCheck_stub,
		"Stub to make sure cd check is successful",
		0x18FFF,
		(0x90, 0x81, 0xEC, 0x0C, 0x02, 0x00, 0x00, 0x53), // default=no
		(0x90, 0x33, 0xC0, 0x40, 0xC2, 0x04, 0x00, 0x53),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10b.GetBinSeqDefinition(i),
		ROR_API_DLL_API_methods,
		"ROR_API basic requirement. Add API methods",
		0x19019,
		(0xB8, 0x01, 0x00, 0x00, 0x00, 0x5F, 0x5E, 0x5D, 0x5B, 0x81, 0xC4, 0x0C, 0x02, 0x00, 0x00, 0xC2, 0x04, 0x00, 0x8B, 0x84, 0x24, 0x20, 0x02, 0x00, 0x00, 0x85, 0xC0, 0x7E, 0x53, 0x33, 0xED, 0x33, 0xF6, 0x8B, 0x8B, 0x8C, 0x01, 0x00, 0x00, 0x8D, 0x7E, 0x01, 0x57, 0xE8, 0x27, 0xA7, 0x00, 0x00, 0x83, 0xF8, 0x02, 0x75, 0x0D, 0x56, 0x8B, 0xCB, 0xE8, 0x5A, 0x21, 0x00, 0x00, 0x85, 0xC0, 0x74, 0x01, 0x45, 0x8B, 0xF7, 0x83, 0xFE, 0x09, 0x7C), // default=no
		(0x60, 0x8B, 0x35, 0x34, 0xA7, 0x7D, 0x00, 0x68, 0x10, 0xA8, 0x55, 0x00, 0xFF, 0xD6, 0xA3, 0x28, 0xA8, 0x55, 0x00, 0x85, 0xC0, 0x74, 0x00, 0x68, 0x1C, 0xA8, 0x55, 0x00, 0x50, 0xFF, 0x15, 0x08, 0xA6, 0x7D, 0x00, 0xA3, 0x2C, 0xA8, 0x55, 0x00, 0x61, 0xC3, 0x50, 0xA1, 0x2C, 0xA8, 0x55, 0x00, 0x85, 0xC0, 0x74, 0x02, 0xFF, 0xD0, 0x58, 0xC3, 0xE8, 0xC3, 0xFF, 0xFF, 0xFF, 0xE8, 0xE8, 0xFF, 0xFF, 0xFF, 0xBF, 0xE8, 0xA7, 0x55, 0x00, 0xC3),
		FM_OFF,
		FM_ON
		);

	// Non-critical changes :
	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10b.GetBinSeqDefinition(i),
		OverloadGetLocalizedText,
		"Adds support for custom text localization.",
		0x100EAF,
		(0x90, 0xA1, 0xA0, 0x56, 0x7C, 0x00, 0x53), // default=no
		(0x90, 0xE8, 0x8E, 0x81, 0xF1, 0xFF, 0x53),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10b.GetBinSeqDefinition(i),
		SetEmpiresDatFileName,
		"Ability to use custom empires.dat path/filename.",
		0x102B3E,
		(0x8B, 0x4E, 0x0C, 0x81, 0xC1, 0xF8, 0x01, 0x00, 0x00, 0x51), // default=no
		(0x8B, 0x4E, 0x0C, 0xE8, 0xFD, 0x64, 0xF1, 0xFF, 0x90, 0x51),
		FM_OFF,
		FM_ON
		);


	if (i != COUNT_ROR_API_10b) {
		throw AOE_binDataSetupException("Binary setup error for ROR_API_10b. Bad element count.");
	}
#ifdef _DEBUG
	printf("ROR_API 1.0b=%d\n", i); // DEBUG
#endif
}

void AOE_binData::InitROR_API_10c() {
	int i = 0;

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ROR_API_VarDataUpdate,
		"ROR_API basic requirement. Update in variables section.",
		0x157810,
		(0x00, 0x00, 0x00, 0x00, 0x41, 0x66, 0x74, 0x65, 0x72, 0x20, 0x52, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x20, 0x4D, 0x61, 0x70, 0x20, 0x47, 0x65, 0x6E, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x72, 0x61, 0x6E, 0x64, 0x6F, 0x6D, 0x20, 0x6E, 0x75, 0x6D, 0x62, 0x65, 0x72, 0x20, 0x69, 0x73, 0x20, 0x25, 0x64, 0x00, 0x52, 0x61, 0x6E, 0x64), // default=no
		(0x00, 0x00, 0x00, 0x00, 0x4C, 0x61, 0x73, 0x74, 0x20, 0x52, 0x6E, 0x64, 0x3D, 0x25, 0x64, 0x00, 0x52, 0x4F, 0x52, 0x5F, 0x41, 0x50, 0x49, 0x2E, 0x64, 0x6C, 0x6C, 0x00, 0x47, 0x65, 0x6E, 0x65, 0x72, 0x69, 0x63, 0x43, 0x61, 0x6C, 0x6C, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x52, 0x61, 0x6E, 0x64),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ROR_API_DLL_initialization,
		"ROR_API basic requirement. Make DLL initialization + init call.",
		0x436FC,
		(0x56, 0x57, 0xBF, 0xF8, 0x77, 0x55, 0x00, 0x83, 0xC9, 0xFF, 0x33, 0xC0, 0x8D, 0x54, 0x24, 0x14, 0xF2, 0xAE, 0xF7, 0xD1, 0x2B, 0xF9, 0x8B, 0xC1, 0x8B, 0xF7, 0x8B, 0xFA, 0x8D, 0x54, 0x24, 0x79, 0xC1, 0xE9, 0x02, 0xF3, 0xA5, 0x8B, 0xC8, 0x33, 0xC0, 0x83, 0xE1, 0x03, 0xF3, 0xA4, 0xBF, 0xE8, 0x77, 0x55, 0x00, 0x83, 0xC9, 0xFF, 0xF2, 0xAE, 0xF7, 0xD1, 0x2B, 0xF9, 0x8B, 0xC1, 0x8B, 0xF7, 0x8B, 0xFA, 0x8D, 0x94, 0x24, 0x8E, 0x00, 0x00, 0x00, 0xC1, 0xE9, 0x02, 0xF3, 0xA5, 0x8B, 0xC8, 0x83, 0xE1, 0x03, 0xF3, 0xA4, 0x8D, 0x4C, 0x24, 0x14), // default=no
		(0x56, 0x57, 0x8D, 0xBC, 0x24, 0x58, 0x14, 0x00, 0x00, 0x57, 0xE8, 0x3C, 0x5E, 0xFD, 0xFF, 0x83, 0xC4, 0x04, 0xE8, 0x61, 0x5E, 0xFD, 0xFF, 0x90, 0x90, 0x90, 0x90, 0x90, 0xBF, 0xF8, 0x77, 0x55, 0x00, 0x83, 0xC9, 0xFF, 0x33, 0xC0, 0x8D, 0x54, 0x24, 0x14, 0xF2, 0xAE, 0xF7, 0xD1, 0x2B, 0xF9, 0x8B, 0xF7, 0x8B, 0xFA, 0xF3, 0xA4, 0x8D, 0x54, 0x24, 0x79, 0xBF, 0xE8, 0x77, 0x55, 0x00, 0x83, 0xC9, 0xFF, 0xF2, 0xAE, 0xF7, 0xD1, 0x2B, 0xF9, 0x8B, 0xF7, 0x8B, 0xFA, 0xF3, 0xA4, 0x8D, 0x94, 0x24, 0x8E, 0x00, 0x00, 0x00, 0x8D, 0x4C, 0x24, 0x14),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ROR_API_CDCheck_stub,
		"Stub to make sure cd check is successful",
		0x1952F,
		(0x90, 0x81, 0xEC, 0x0C, 0x02, 0x00, 0x00, 0x53), // default=no
		(0x90, 0x33, 0xC0, 0x40, 0xC2, 0x04, 0x00, 0x53),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ROR_API_DLL_API_methods,
		"ROR_API basic requirement. Add API methods",
		0x19547,
		(0x5E, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x5B, 0x81, 0xC4, 0x0C, 0x02, 0x00, 0x00, 0xC2, 0x04, 0x00, 0x8B, 0x84, 0x24, 0x18, 0x02, 0x00, 0x00, 0x85, 0xC0, 0x7E, 0x55, 0x55, 0x33, 0xED, 0x57, 0x33, 0xF6, 0x8B, 0x8B, 0x8C, 0x01, 0x00, 0x00, 0x8D, 0x7E, 0x01, 0x57, 0xE8, 0x99, 0xA7, 0x00, 0x00, 0x83, 0xF8, 0x02, 0x75, 0x0D, 0x56, 0x8B, 0xCB, 0xE8, 0x7C, 0x22, 0x00, 0x00, 0x85, 0xC0), // default=no
		(0x60, 0x8B, 0x35, 0x24, 0x22, 0x54, 0x00, 0x68, 0x20, 0x78, 0x55, 0x00, 0xFF, 0xD6, 0xA3, 0x38, 0x78, 0x55, 0x00, 0x85, 0xC0, 0x74, 0x11, 0x68, 0x2C, 0x78, 0x55, 0x00, 0x50, 0xFF, 0x15, 0xF8, 0x20, 0x54, 0x00, 0xA3, 0x3C, 0x78, 0x55, 0x00, 0x61, 0xC3, 0x90, 0x90, 0x90, 0x50, 0xA1, 0x3C, 0x78, 0x55, 0x00, 0x85, 0xC0, 0x74, 0x02, 0xFF, 0xD0, 0x58, 0xC3, 0x90, 0x90, 0x85, 0xC0),
		FM_OFF,
		FM_ON
		);

	// Non-critical changes :
	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		API_ReadTextFromChat,
		"Call to ROR_API",
		0x35F6C,
		(0x8B, 0xCB, 0x50, 0xE8, 0xEC, 0xA7, 0x04, 0x00, 0x5F, 0x5B), // default=no
		(0x8B, 0xCB, 0x90, 0xE8, 0x00, 0x36, 0xFE, 0xFF, 0x5F, 0x5B),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ComputeConversionResistance,
		"Call to ROR_API to compute conversion resistance. Do not enable this if you don't have ROR_API.dll.",
		0xB24E1,
		(0xFF, 0x90, 0x94, 0x00, 0x00, 0x00, 0xE8, 0x71, 0x3B, 0x07, 0x00, 0x8B, 0x7E, 0x10, 0x89, 0x44, 0x24, 0x10, 0xDB, 0x44, 0x24, 0x10, 0x8B, 0x47, 0x0C, 0x89, 0x44, 0x24, 0x10, 0x8A, 0x88, 0x09, 0x01, 0x00, 0x00, 0xD8, 0x0D, 0x6C, 0x30, 0x54, 0x00, 0x80, 0xF9, 0x10, 0x75, 0x08, 0xD8, 0x0D, 0x08, 0x2E, 0x54, 0x00, 0xEB, 0x3B), // default=no
		(0xFF, 0x90, 0x94, 0x00, 0x00, 0x00, 0x68, 0x00, 0x00, 0x80, 0x3F, 0x8B, 0x7E, 0x10, 0xE8, 0x80, 0x70, 0xF6, 0xFF, 0xE8, 0x64, 0x3B, 0x07, 0x00, 0x89, 0x44, 0x24, 0x14, 0xDB, 0x44, 0x24, 0x14, 0x8B, 0x47, 0x0C, 0x89, 0x44, 0x24, 0x14, 0xD8, 0x0D, 0x6C, 0x30, 0x54, 0x00, 0x3E, 0xD8, 0x0C, 0x24, 0x58, 0xEB, 0x3D, 0xEB, 0x3B),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixUnitIdForInProgressBuilding,
		"Fix unit id value for in-progress building strategy elements. Do not enable this if you don't have ROR_API.dll.",
		0x0AC929,
		(0x52, 0x66, 0x8B, 0x51, 0x4A, 0x8B, 0x49, 0x3C, 0x50, 0x52), // default=no
		(0x52, 0xE8, 0x45, 0xCC, 0xF6, 0xFF, 0x90, 0x90, 0x50, 0x52),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixResetStratElemForUnitId,
		"Fix the reset strategy element for in-progress buildings that are destroyed. Do not enable this if you don't have ROR_API.dll.",
		0x0B8C6D,
		(0x8B, 0xCE, 0xE8, 0x0C, 0xEE, 0xF4, 0xFF, 0x83, 0xF8, 0x01), // default=no
		(0x8B, 0xCE, 0xE8, 0x00, 0x09, 0xF6, 0xFF, 0x83, 0xF8, 0x01),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		API_onGameRestart,
		"Call API at game restart. Do not enable this if you don't have ROR_API.dll.",
		0x102A08,
		(0x81, 0xC4, 0x00, 0x01, 0x00, 0x00, 0xC2, 0x04, 0x00, 0x8B, 0x83, 0xF4, 0x03, 0x00, 0x00), // default=no
		(0x81, 0xC4, 0x00, 0x01, 0x00, 0x00, 0xEB, 0x28, 0x90, 0x8B, 0x83, 0xF4, 0x03, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		API_onGameStart,
		"Call API at game start. Do not enable this if you don't have ROR_API.dll.",
		0x102A32,
		(0x81, 0xC4, 0x00, 0x01, 0x00, 0x00, 0xC2, 0x04, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x53, 0x55), // default=no
		(0x81, 0xC4, 0x00, 0x01, 0x00, 0x00, 0xE8, 0x37, 0x6B, 0xF1, 0xFF, 0xC2, 0x04, 0x00, 0x53, 0x55),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		API_onGameStart_Load,
		"Call API at game start (load game). Do not enable this if you don't have ROR_API.dll.",
		0x103049,
		(0x81, 0xC4, 0x04, 0x01, 0x00, 0x00, 0xC2, 0x04, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90), // default=no
		(0x81, 0xC4, 0x04, 0x01, 0x00, 0x00, 0xE8, 0x20, 0x65, 0xF1, 0xFF, 0xC2, 0x04, 0x00, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		BeforeCreateGame_savedGame,
		"Initializations before a new game is started. Only for saved games. For both RM, DM, scenario, campaign, even MP...",
		0x102E21,
		(0xC6, 0x40, 0x01, 0x01, 0x8B, 0x8D, 0xF4, 0x03, 0x00, 0x00, 0x8B, 0x84, 0x24, 0x14, 0x01, 0x00, 0x00), // default=no
		(0xC6, 0x40, 0x01, 0x01, 0xE8, 0x4A, 0x67, 0xF1, 0xFF, 0x90, 0x8B, 0x84, 0x24, 0x14, 0x01, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		BeforeCreateGame_notSavedGame,
		"Initializations before a new game is started. Only for other games than saved games.",
		0x11D506,
		(0x89, 0x6E, 0x14, 0x8B, 0x0D, 0x38, 0x0E, 0x58, 0x00, 0xE8, 0x3C, 0xE2, 0xEF, 0xFF), // default=no
		(0x89, 0x6E, 0x14, 0xE8, 0x66, 0xC0, 0xEF, 0xFF, 0x90, 0xE8, 0x3C, 0xE2, 0xEF, 0xFF),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		OnLoadScenarioInfoTexts,
		"Initialize triggers when loading a scenario.",
		0x106933,
		(0x89, 0x5C, 0x24, 0x1C, 0xC7, 0x06, 0xC8, 0xA3, 0x54, 0x00, 0x89, 0x5C, 0x24, 0x28), // default=no
		(0x89, 0x5C, 0x24, 0x1C, 0xE8, 0x38, 0x2C, 0xF1, 0xFF, 0x90, 0x89, 0x5C, 0x24, 0x28),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ManagePanicMode,
		"Please do not enable this if TacAIOnUnitAttackedEvent is not. Do not enable this if you don't have ROR_API.dll.",
		0x0E22FB,
		(0x81, 0xFA, 0xB4, 0x00, 0x00, 0x00, 0x0F, 0x8C, 0x48, 0x02, 0x00, 0x00), // default=no
		(0xE8, 0x74, 0x72, 0xF3, 0xFF, 0x90, 0xE9, 0x49, 0x02, 0x00, 0x00, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		TacAIOnUnitAttackedEvent,
		"Entry point to handle reaction to aggressions in tactical AI. Do not enable this if ManagePanicMode is not.",
		0xD7ADD,
		(0x0F, 0xBF, 0x48, 0x4A, 0x8B, 0x94, 0x8E, 0xD8, 0x0F, 0x00, 0x00, 0x8D, 0x84, 0x8E, 0xD8, 0x0F, 0x00, 0x00), // default=no
		(0x0F, 0xBF, 0x48, 0x4A, 0xE8, 0x8E, 0x1A, 0xF4, 0xFF, 0x90, 0x90, 0x8D, 0x84, 0x8E, 0xD8, 0x0F, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixAI_AfterWonder,
		"Fix an AI wonder flag when it has been fully built.",
		0xB8BDA,
		(0x8B, 0x8F, 0xBC, 0x05, 0x00, 0x00, 0x89, 0x99, 0xB4, 0x22, 0x01, 0x00, 0x6A, 0x3F), // default=no
		(0x8B, 0x8F, 0xBC, 0x05, 0x00, 0x00, 0xE8, 0x8F, 0x09, 0xF6, 0xFF, 0x90, 0x6A, 0x3F),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		AuditDoStrategyElementBuilding,
		"Run custom checks when AI decided to trigger a construction from strategy.",
		0xD2216,
		(0x3B, 0xC3, 0x0F, 0x84, 0x4E, 0x01, 0x00, 0x00, 0x55), // default=no
		(0x3B, 0xC3, 0xE8, 0x57, 0x73, 0xF4, 0xFF, 0x90, 0x55),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		OverloadStrategySetInProgress,
		"Overloads the strategy element update when setting an unit as in progress. This also updates unitId to be able to retrieve the involved building.",
		0x00DC083,
		(0x6A, 0x01, 0x8B, 0xCB, 0xE8, 0x64, 0xBA, 0xF2, 0xFF), // default=no
		(0xE8, 0xEC, 0xD4, 0xF3, 0xFF, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		OverloadStrategyResetInProgress,
		"Overloads the strategy element update when resetting in progress value (cancel train unit by computer). Does not causes issues but it is cleaner to remove irrelevant unit id.",
		0x00B8FBC,
		(0x74, 0x09, 0x6A, 0x00, 0x8B, 0xC8, 0xE8, 0x29, 0xEB, 0xF4, 0xFF, 0xB8, 0x01, 0x00, 0x00, 0x00), // default=no
		(0x74, 0x09, 0x90, 0x90, 0x8B, 0xC8, 0xE8, 0xAD, 0x05, 0xF6, 0xFF, 0xB8, 0x01, 0x00, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		OverloadUnitDestructorStrategyAndInfAI,
		"Overloads the unit destructor section that manages strategy and infAI references to the unit. Allows to fix 'in progress' flag in strategy if a building is currently training a unit.\nRequires OverloadStrategySetInProgress.",
		0x00F2B48,
		(0x7C, 0x06, 0x8B, 0x11, 0x50, 0xFF, 0x52, 0x44, 0x5F, 0x5E), // default=no
		(0x7C, 0x06, 0xE8, 0x25, 0x6A, 0xF2, 0xFF, 0x90, 0x5F, 0x5E),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		GameScreenAndScenarioEditorKeyPress,
		"Additional features for keyPress in scenario editor and game screen.",
		0x001A6C0,
		(0x56, 0x57, 0x8B, 0xF9, 0x8B, 0x47, 0x14, 0x85, 0xC0), // default=no
		(0x56, 0x57, 0xE8, 0xAD, 0xEE, 0xFF, 0xFF, 0x85, 0xC0),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ManageTacAIUpdate,
		"Call RockNRor features for tactical AI updates. SNScalingFrequency unit is seconds instead of minutes if you enable this option.",
		0x0D0988,
		(0x57, 0x8B, 0x96, 0xF0, 0x00, 0x00, 0x00, 0x8B, 0xAE, 0x1C, 0x0D, 0x00, 0x00), // default=no
		(0x57, 0xE8, 0xE6, 0x8B, 0xF4, 0xFF, 0x90, 0x8B, 0xAE, 0x1C, 0x0D, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ManageDefeatedAIPlayerTacAIUpdate,
		"Fixes tactical AI updates for defeated players (game optimization + fix).",
		0x0D1B7B,
		(0x57, 0x8B, 0x86, 0xF0, 0x00, 0x00, 0x00, 0x8B, 0x88, 0xF0, 0x00, 0x00, 0x00), // default=no
		(0x57, 0xE8, 0xF3, 0x79, 0xF4, 0xFF, 0x90, 0x8B, 0x88, 0xF0, 0x00, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ManageUnitTargetChange_military,
		"Call RockNRor to manage an attacked unit target change (military, villagers). This avoid stuck units (eg. against 2 priests).",
		0x011D56,
		(0x56, 0x85, 0xED, 0x57, 0x8B, 0xF1, 0x75, 0x06, 0x83, 0x7E, 0x30, 0xFF), // default=no
		(0x56, 0x57, 0xE8, 0x17, 0x78, 0x00, 0x00, 0x90, 0x83, 0x7E, 0x30, 0xFF),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ManageUnitTargetChange_convert,
		"Call RockNRor to manage an attacked unit target change (converting priest). This avoid stuck units (eg. against 2 priests).",
		0x011F25,
		(0x56, 0x8B, 0xF1, 0x85, 0xC0, 0x75, 0x09, 0x81, 0x7E, 0x30, 0x5C, 0x02, 0x00, 0x00), // default=no
		(0x56, 0xE8, 0x49, 0x76, 0x00, 0x00, 0x90, 0x81, 0x7E, 0x30, 0x5C, 0x02, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		EnemyTowerInTown_militaryUnits,
		"Call RockNRor to manage AI military units reaction when an enemy tower is in his town.",
		0x0E37A7,
		(0x0F, 0x84, 0x13, 0x02, 0x00, 0x00, 0x8B, 0xCB, 0xE8, 0xAC, 0x42, 0xF2, 0xFF, 0x8B, 0xC8, 0xE8, 0x45, 0x4C, 0xF7, 0xFF, 0x3D, 0x58, 0x02, 0x00, 0x00, 0x0F, 0x85, 0xD4, 0x00, 0x00, 0x00, 0x8B, 0xCB, 0xE8, 0x93, 0x42, 0xF2, 0xFF, 0x8B, 0xC8, 0xE8, 0x0C, 0xBF, 0xF2, 0xFF), // default=no
		(0x0F, 0x84, 0x13, 0x02, 0x00, 0x00, 0x8B, 0xC8, 0xE8, 0xC0, 0x5D, 0xF3, 0xFF, 0x85, 0xC0, 0x0F, 0x84, 0x04, 0x02, 0x00, 0x00, 0x3C, 0x01, 0x0F, 0x84, 0xD6, 0x00, 0x00, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xE8, 0x0C, 0xBF, 0xF2, 0xFF),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		EnemyTowerInTown_villager,
		"Call RockNRor to manage reaction to being attacked, considering current action, for villagers.",
		0xE39D1,
		(0x0F, 0x8C, 0x0C, 0xFD, 0xFF, 0xFF, 0x6A, 0x01, 0x68, 0x18, 0xFC, 0xFF, 0xFF, 0x68, 0x18, 0xFC, 0xFF, 0xFF, 0x68, 0xBC, 0x02, 0x00, 0x00), // default=no
		(0x0F, 0x8C, 0x0C, 0xFD, 0xFF, 0xFF, 0xE8, 0x98, 0x5B, 0xF3, 0xFF, 0xE9, 0x05, 0x01, 0x00, 0x00, 0x90, 0x90, 0x68, 0xBC, 0x02, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ReactionWhenAttacked_currentActionCheck,
		"Call RockNRor to manage reaction to being attacked, considering current action. Especially to remove priests hesitation.",
		0xD8291,
		(0x0F, 0x84, 0x3D, 0x04, 0x00, 0x00, 0x8B, 0xCB, 0xE8, 0xC2, 0xF7, 0xF2, 0xFF, 0x8B, 0xC8, 0xE8, 0x5B, 0x01, 0xF8, 0xFF, 0x3D, 0x58, 0x02, 0x00, 0x00, 0x0F, 0x85, 0xD8, 0x00, 0x00, 0x00, 0x8B, 0xCB, 0xE8, 0xA9, 0xF7, 0xF2, 0xFF, 0x8B, 0xC8, 0xE8, 0x22, 0x74, 0xF3, 0xFF), // default=no
		(0x0F, 0x84, 0x3D, 0x04, 0x00, 0x00, 0x8B, 0xC8, 0xE8, 0xD6, 0x12, 0xF4, 0xFF, 0x85, 0xC0, 0x0F, 0x84, 0x2E, 0x04, 0x00, 0x00, 0x3C, 0x01, 0x0F, 0x84, 0xDA, 0x00, 0x00, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0xE8, 0x22, 0x74, 0xF3, 0xFF),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixStuckPriestWithUnfinishedBuildings,
		"Call RockNRor to properly handle canConvertUnit function and fix stuck priests bug (with unfinished buildings).",
		0x0E4FFD,
		(0x50, 0x8B, 0x49, 0x3C, 0xE8, 0xCA, 0xB6, 0x03, 0x00, 0x85, 0xC0), // default=no
		(0x50, 0x58, 0x90, 0x90, 0xE8, 0x6E, 0x45, 0xF3, 0xFF, 0x85, 0xC0),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		AddRockNRorInGameMenu,
		"Adds RockNRor in-game menu.",
		0x033E74,
		(0x83, 0xC5, 0x23, 0x6A, 0x05, 0x53, 0x53, 0x6A, 0x1E, 0x68, 0x68, 0x01, 0x00, 0x00, 0x55, 0x6A, 0x14), // default=no
		(0x83, 0xC5, 0x23, 0xE8, 0xF8, 0x56, 0xFE, 0xFF, 0xEB, 0x1E, 0x90, 0x90, 0x90, 0x90, 0x55, 0x6A, 0x14),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ManageRockNRorInGameMenu,
		"Manage RockNRor button click in in-game menu.",
		0x034245,
		(0xC2, 0x10, 0x00, 0x83, 0xF8, 0x05, 0x75, 0x62, 0x8B, 0x76, 0x40), // default=no
		(0xC2, 0x10, 0x00, 0xE8, 0x27, 0x53, 0xFE, 0xFF, 0x8B, 0x76, 0x40),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ManageCustomOptionsOKOnClick,
		"Code to manage RockNRor menu button click.",
		0x0031365,
		(0xC2, 0x10, 0x00, 0x3B, 0x86, 0x48, 0x05, 0x00, 0x00, 0x75, 0xDA, 0x83, 0xFF, 0x01), // default=no
		(0xC2, 0x10, 0x00, 0xE8, 0x07, 0x82, 0xFE, 0xFF, 0x90, 0x90, 0x90, 0x83, 0xFF, 0x01),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ManageOnDialogUserEvent,
		"Code to manage keyboard/mouse events in dialog messages.",
		0x00348D8,
		(0x56, 0x8B, 0xF1, 0x8B, 0x4E, 0x40, 0x85, 0xC9), // default=no
		(0x56, 0xE8, 0x96, 0x4C, 0xFE, 0xFF, 0x85, 0xC9),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ManageAllOnButtonClickEvents,
		"Entry point to manage OnClick events in entire game for (bit)buttons, checkboxes, DropDown.Open.",
		0x00604C3,
		(0x57, 0x8B, 0x86, 0x3C, 0x01, 0x00, 0x00, 0x83, 0xF8, 0x03), // default=no
		(0x57, 0xE8, 0xAB, 0x90, 0xFB, 0xFF, 0x90, 0x83, 0xF8, 0x03),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ManageGameSpeedChange,
		"Manage the number of ruins that are created in random games (RM/DM).",
		0x0084CB6,
		(0x89, 0x44, 0x24, 0x08, 0x8B, 0x84, 0x24, 0x10, 0x01, 0x00, 0x00, 0xD9, 0x44, 0x24, 0x08, 0x85, 0xC0), // default=no
		(0x89, 0x44, 0x24, 0x08, 0xE8, 0xB5, 0x48, 0xF9, 0xFF, 0xE9, 0x40, 0x01, 0x00, 0x00, 0x90, 0x85, 0xC0),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ManageNumberOfRelics,
		"Manage the number of relics that are created in random games (RM/DM).",
		0x0010B6C1,
		(0x52, 0x6A, 0x05, 0x68, 0x9F, 0x00, 0x00, 0x00, 0xE8, 0x62, 0x4E, 0xF6, 0xFF, 0xC7, 0x85, 0x0C, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xE8, 0x80, 0xA9, 0x01, 0x00), // default=no
		(0x52, 0xE8, 0xAD, 0xDE, 0xF0, 0xFF, 0x50, 0x68, 0x9F, 0x00, 0x00, 0x00, 0x89, 0x85, 0x0C, 0x01, 0x00, 0x00, 0xE8, 0x58, 0x4E, 0xF6, 0xFF, 0xE8, 0x80, 0xA9, 0x01, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ManageNumberOfRuins,
		"Manage the number of ruins that are created in random games (RM/DM).",
		0x0010B706,
		(0x52, 0x6A, 0x05, 0x68, 0x9E, 0x00, 0x00, 0x00, 0xE8, 0x1D, 0x4E, 0xF6, 0xFF, 0xC7, 0x85, 0x10, 0x01, 0x00, 0x00, 0x05, 0x00, 0x00, 0x00, 0xE9, 0x8A, 0x00, 0x00, 0x00), // default=no
		(0x52, 0xE8, 0x68, 0xDE, 0xF0, 0xFF, 0x50, 0x68, 0x9E, 0x00, 0x00, 0x00, 0x89, 0x85, 0x10, 0x01, 0x00, 0x00, 0xE8, 0x13, 0x4E, 0xF6, 0xFF, 0xE9, 0x8A, 0x00, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	// Civs
	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		civNumberInGameSelection,
		"Calls ROR_API to manage the maximum civId and call random civ selection if needed.",
		0x010340D,
		(0xE8, 0x9E, 0x1F, 0x00, 0x00, 0x83, 0xF8, 0x10, 0x7F, 0x0C, 0x56, 0x8B, 0xCD), // default=no
		(0xE8, 0x9E, 0x1F, 0x00, 0x00, 0xE8, 0x5D, 0x61, 0xF1, 0xFF, 0x56, 0x8B, 0xCD),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		GetCivNameDLLStringIdOffset,
		"Calls ROR_API to get player name and avoid crash when using custom civilizations. Part 1.",
		0x01034A8,
		(0x8B, 0xCD, 0xE8, 0xE1, 0x2A, 0x00, 0x00, 0x50, 0x56), // default=no
		(0x8B, 0xCD, 0xE8, 0xC5, 0x60, 0xF1, 0xFF, 0x90, 0x56),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		GetCivNameDLLStringIdOffset2,
		"Calls ROR_API to get player name and avoid crash when using custom civilizations. Part 2.",
		0x0103865,
		(0xE8, 0x26, 0x27, 0x00, 0x00, 0x8B, 0x54, 0x24, 0x24, 0x05, 0x30, 0x11, 0x00, 0x00, 0x50, 0x8B, 0xCD), // default=no
		(0xE8, 0x0A, 0x5D, 0xF1, 0xFF, 0x83, 0xC4, 0x0C, 0xEB, 0x0A, 0x90, 0x90, 0x90, 0x90, 0x50, 0x8B, 0xCD),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ChooseAIFileForCiv,
		"Calls ROR_API to choose AI filename for a player. Enables support of custom civilizations, custom AI files, fixes crashes.",
		0x00F36EA,
		(0x33, 0xED, 0x39, 0xAB, 0x3C, 0x02, 0x00, 0x00, 0x0F, 0x84, 0xD5, 0x19, 0x00, 0x00, 0x8B, 0x0D, 0x38, 0x0E, 0x58, 0x00), // default=no
		(0x33, 0xED, 0xE8, 0x83, 0x5E, 0xF2, 0xFF, 0x90, 0xE9, 0xD6, 0x19, 0x00, 0x00, 0x90, 0x8B, 0x0D, 0x38, 0x0E, 0x58, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ManageCivComboInGameSettings,
		"Calls ROR_API to handle all civilizations, including custom ones, in game settings screen.",
		0x0088298,
		(0x8B, 0x0E, 0x6A, 0x01, 0x68, 0xF7, 0x27, 0x00, 0x00, 0xE8, 0x2A, 0x9B, 0xFD, 0xFF, 0x8B, 0x0E), // default=no
		(0x8B, 0x0E, 0xE8, 0xD5, 0x12, 0xF9, 0xFF, 0xE9, 0xE2, 0x00, 0x00, 0x00, 0x90, 0x90, 0x8B, 0x0E),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ManageCivComboInEditor,
		"Calls ROR_API to handle all civilizations, including custom ones, in scenario editor screen.",
		0x009095A,
		(0x8B, 0x0F, 0x6A, 0x00, 0x68, 0xF7, 0x27, 0x00, 0x00, 0xE8, 0x68, 0x14, 0xFD, 0xFF, 0x8B, 0x0F), // default=no
		(0x8B, 0x0F, 0xE8, 0x13, 0x8C, 0xF8, 0xFF, 0xE9, 0xD4, 0x00, 0x00, 0x00, 0x90, 0x90, 0x8B, 0x0F),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		InGameGetCustomCivName,
		"Calls ROR_API when searching for civilization name during game (eg. to display in unit selection zone).",
		0x00FF84B,
		(0x8B, 0x01, 0x57, 0x56, 0x68, 0x04, 0x28, 0x00, 0x00, 0xFF, 0x50, 0x20, 0xC6, 0x44, 0x3E, 0xFF, 0x00), // default=no
		(0x8B, 0x01, 0xE8, 0x22, 0x9D, 0xF1, 0xFF, 0x90, 0x90, 0x90, 0x90, 0x90, 0xC6, 0x44, 0x3E, 0xFF, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ManageCityMapLikeCalculation1,
		"City plan: additional calculation to improve building locations calculation.",
		0x00BE8D7,
		(0x51, 0x8B, 0x4C, 0x24, 0x1C, 0x52, 0x53, 0xE8, 0x0D, 0x36, 0x00, 0x00, 0xEB, 0x04), // default=no
		(0x51, 0xE8, 0x97, 0xAC, 0xF5, 0xFF, 0x83, 0xC4, 0x0C, 0x90, 0x90, 0x90, 0xEB, 0x04),
		FM_OFF,
		FM_ON
		);
	
	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ManageCityMapLikeCalculation2,
		"City plan: additional calculation to improve building locations calculation.",
		0xC1CAD,
		(0x6A, 0xFF, 0x6A, 0x00, 0x8B, 0xCD, 0xE8, 0x38, 0x02, 0x00, 0x00, 0x8B, 0x54, 0x24, 0x6C), // default=no
		(0x6A, 0xFF, 0xE8, 0xC0, 0x78, 0xF5, 0xFF, 0x83, 0xC4, 0x10, 0x90, 0x8B, 0x54, 0x24, 0x6C),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ManageCityPlanBushLikeValue,
		"City plan: manage like value to add for neighbour tiles around each berry bush (to set granary location).",
		0xC237B,
		(0x8B, 0x54, 0x24, 0x28, 0x8B, 0x44, 0x24, 0x34, 0x68, 0x80, 0x00, 0x00, 0x00, 0x51), // default=no
		(0x8B, 0x54, 0x24, 0x28, 0x6A, 0x0A, 0xE8, 0xEE, 0x71, 0xF5, 0xFF, 0x90, 0x90, 0x51),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ManageCityPlanFarmPlacement,
		"ManageCityPlanFarmPlacement",
		0x00C27CC,
		(0xE8, 0x5B, 0x38, 0x06, 0x00, 0x8B, 0x54, 0x24, 0x28, 0x8B, 0xF8, 0x8B, 0x44, 0x24, 0x2C), // default=no
		(0xE8, 0x5B, 0x38, 0x06, 0x00, 0xE8, 0x9E, 0x6D, 0xF5, 0xFF, 0x90, 0x8B, 0x44, 0x24, 0x2C),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		OnLivingUnitCreationEntryPoint,
		"Provides an entry point for custom treatments after a living unit is created.",
		0xED17F,
		(0xE8, 0x4C, 0x11, 0xFC, 0xFF, 0x5E, 0x8B, 0x4C, 0x24, 0x04, 0x64, 0x89, 0x0D, 0x00, 0x00, 0x00, 0x00, 0x83, 0xC4, 0x10, 0xC2, 0x10, 0x00, 0x8B, 0x4C, 0x24, 0x08, 0x33, 0xC0, 0x5E, 0x64, 0x89, 0x0D, 0x00, 0x00, 0x00, 0x00),
		(0xE8, 0x4C, 0x11, 0xFC, 0xFF, 0xE8, 0xEB, 0xC3, 0xF2, 0xFF, 0xEB, 0x0D, 0x90, 0x90, 0x90, 0x90, 0x90, 0x83, 0xC4, 0x10, 0xC2, 0x10, 0x00, 0x33, 0xC0, 0x5E, 0x8B, 0x4C, 0x24, 0x04, 0x64, 0x89, 0x0D, 0x00, 0x00, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		OnGameRightClickUpEntryPoint,
		"Provides an entry point for custom treatments when right click release event is processed in game.",
		0x11A4FE,
		(0xE8, 0xBD, 0x3B, 0xF4, 0xFF, 0x84, 0xC0, 0x0F, 0x84, 0x32, 0x01, 0x00, 0x00, 0x8B, 0x54, 0x24, 0x14),
		(0xE8, 0xBD, 0x3B, 0xF4, 0xFF, 0xE8, 0x6C, 0xF0, 0xEF, 0xFF, 0xFF, 0xE0, 0x90, 0x8B, 0x54, 0x24, 0x14),
		FM_OFF,
		FM_ON
		);

	// OBSOLETE: red cross is now displayed directly in RockNRor code, which is better
	/*NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		OnGameRightClickUpCustomRedCrossDisplay,
		"Provides an entry point for displaying right-click red cross sign for custom actions.",
		0x11A5CF,
		(0xFF, 0x92, 0xA0, 0x00, 0x00, 0x00, 0x25, 0xFF, 0x00, 0x00, 0x00, 0x8B, 0xF8, 0x74, 0x43),
		(0xFF, 0x92, 0xA0, 0x00, 0x00, 0x00, 0xE8, 0x9A, 0xEF, 0xEF, 0xFF, 0x85, 0xC0, 0x74, 0x43),
		FM_OFF,
		FM_ON
		);*/

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		PlayerCreationChecks_comp,
		"Check that chosen civilization id is valid at game start, force to 1 if not to avoid game crash (computer players).",
		0x10A56D,
		(0x74, 0x58, 0x8A, 0x94, 0x1E, 0x51, 0x02, 0x00, 0x00, 0x6A, 0x00),
		(0x74, 0x58, 0xE8, 0x00, 0xF0, 0xF0, 0xFF, 0x90, 0x90, 0x6A, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		PlayerCreationChecks_human,
		"Check that chosen civilization id is valid at game start, force to 1 if not to avoid game crash (human players).",
		0x10A5B2,
		(0x74, 0x13, 0x8A, 0x94, 0x1E, 0x51, 0x02, 0x00, 0x00, 0x6A, 0x00),
		(0x74, 0x13, 0xE8, 0xBB, 0xEF, 0xF0, 0xFF, 0x90, 0x90, 0x6A, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		RandomCivPickingInSettings,
		"Overload the random civilization picking in game settings screen.",
		0x8D13C,
		(0x33, 0xF6, 0xE8, 0x1A, 0x8F, 0x09, 0x00, 0x25, 0x0F, 0x00, 0x00, 0x80),
		(0x33, 0xF6, 0xE8, 0x31, 0xC4, 0xF8, 0xFF, 0x25, 0x0F, 0x00, 0x00, 0x80),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixAutoBuildWarShips,
		"Fix warships when adding dynamic strategy elements.",
		0xB7D7D,
		(0x8B, 0xE9, 0x57, 0x6A, 0x13, 0x8B, 0xCE, 0xE8, 0x77, 0x15, 0x00, 0x00, 0x03, 0xFB),
		(0x8B, 0xE9, 0x90, 0x90, 0x90, 0x8B, 0xCE, 0xE8, 0xEB, 0x17, 0xF6, 0xFF, 0x03, 0xFB),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixAutoBuildHouses,
		"Fix house accounting when adding dynamic strategy elements. Existing houses were not taken into account when autoBuildHouse loop was run.",
		0xB7E1C,
		(0x8B, 0xCF, 0xE8, 0x2D, 0xC3, 0xF9, 0xFF, 0x83, 0xF8, 0x6D),
		(0x8B, 0xCF, 0xE8, 0x51, 0x17, 0xF6, 0xFF, 0x83, 0xF8, 0x6D),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixAutoBuildHousesMaxPop127Limitation,
		"Fix house accounting when adding dynamic strategy elements. This allows using maximum population values higher than 127.",
		0xB7E5E,
		(0x83, 0xC3, 0x04, 0x8B, 0x8E, 0xBC, 0x05, 0x00, 0x00, 0x68, 0x98, 0x00, 0x00, 0x00),
		(0x83, 0xC3, 0x04, 0xE8, 0x0E, 0x17, 0xF6, 0xFF, 0x90, 0x68, 0x98, 0x00, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		AfterAddElementToStrategyEntryPoint,
		"Entry point after adding strategy elements (of any type).",
		0x08F87,
		(0x0F, 0x8C, 0xE8, 0xFE, 0xFF, 0xFF, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x8B, 0x4C, 0x24, 0x58),
		(0x0F, 0x8C, 0xE8, 0xFE, 0xFF, 0xFF, 0xE8, 0xE2, 0x05, 0x01, 0x00, 0x8B, 0x4C, 0x24, 0x58),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		AfterAddDynamicStratElemsEntryPoint,
		"Entry point after adding dynamic strategy elements at game start (houses, docks, boats+techs, setgatherPercentage).",
		0xB8012,
		(0xE8, 0xD9, 0x6B, 0xF5, 0xFF, 0x8B, 0x8C, 0x24, 0xAC, 0x00, 0x00, 0x00, 0x5F),
		(0xE8, 0xD9, 0x6B, 0xF5, 0xFF, 0xE8, 0x58, 0x15, 0xF6, 0xFF, 0x90, 0x90, 0x5F),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixPlayerBuildingsArray_remove,
		"Entry point in player remove unit method to fix building conversion bug.",
		0x5E8CF,
		(0x90, 0x8B, 0x44, 0x24, 0x08, 0x56, 0x85, 0xC0, 0x57, 0x8B, 0xF1, 0x74, 0x0F),
		(0x90, 0x56, 0x57, 0xE8, 0x9D, 0xAC, 0xFB, 0xFF, 0x85, 0xC0, 0x90, 0x74, 0x0F),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixPlayerBuildingsArray_add,
		"Entry point in player add unit method to fix building conversion bug.",
		0xF2AA5,
		(0x56, 0x8B, 0xF1, 0x8B, 0x4C, 0x24, 0x10, 0x57),
		(0x56, 0xE8, 0xC9, 0x6A, 0xF2, 0xFF, 0x90, 0x57),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		PlayerCreateUnitEntryPoint,
		"Overload player's unit creation method to preserve unit status in scenario editor (when loading from scenario file).",
		0xEFF0D,
		(0x8B, 0xC7, 0x5F, 0x5E, 0x5D, 0x5B, 0xC2, 0x18, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90),
		(0x8B, 0xC7, 0xE8, 0x60, 0x96, 0xF2, 0xFF, 0x5F, 0x5E, 0x5D, 0x5B, 0xC2, 0x18, 0x00, 0x90),
		FM_OFF,
		FM_ON
		);

	// Triggers - entry points
	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		GameSettingsNotifyEventEntryPoint,
		"Entry point for GameSettings.NotifyEvent.",
		0x10197F,
		(0x90, 0x8B, 0x44, 0x24, 0x04, 0x81, 0xEC, 0x00, 0x02, 0x00, 0x00, 0x48, 0x53),
		(0x90, 0xE8, 0xEF, 0x7B, 0xF1, 0xFF, 0x81, 0xEC, 0x00, 0x02, 0x00, 0x00, 0x53),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		GameInitResearchesEntryPoint,
		"Entry point for scenarioInfo.applyDisabledResearches.",
		0x107F6F,
		(0x8B, 0x8E, 0x24, 0x02, 0x00, 0x00, 0xE8, 0x13, 0x34, 0xFE, 0xFF, 0x8B, 0x85, 0xF4, 0x50, 0x00, 0x00),
		(0x8B, 0x8E, 0x24, 0x02, 0x00, 0x00, 0xE8, 0xFA, 0x15, 0xF1, 0xFF, 0x8B, 0x85, 0xF4, 0x50, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		conversionSuccessEntryPoint1,
		"Entry point on conversion success to fix villager count + other stuff.",
		0x0B2571,
		(0x74, 0x71, 0x8B, 0x1D, 0x38, 0x0E, 0x58, 0x00, 0xD9, 0x47, 0x3C), // default=no
		(0x74, 0x71, 0xE8, 0xFC, 0x6F, 0xF6, 0xFF, 0x90, 0xD9, 0x47, 0x3C),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixUnitSelectionShortcutSign,
		"Fix signed comparison for shortcut value in unit selection method. Just a simple fix that does not call ROR_API.",
		0x5DBCD,
		(0x80, 0xFB, 0x0A, 0x76, 0x2C, 0x8B, 0x47, 0x28), // default=no
		(0x80, 0xFB, 0x0A, 0x7E, 0x2C, 0x8B, 0x47, 0x28),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		WMCloseMessageEntryPoint,
		"Entry point when a WM_CLOSE message is received. Can be used if we need to clean stuff before ROR starts its own free/exit operations.",
		0x1AEF3,
		(0x8B, 0x06, 0xFF, 0x90, 0x2C, 0x01, 0x00, 0x00, 0x85, 0xC0), // default=no
		(0x8B, 0x06, 0xE8, 0x7A, 0xE6, 0xFF, 0xFF, 0x90, 0x85, 0xC0),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		TextBoxesOnKeyPressEntryPoint,
		"Entry point to manage custom textbox events.",
		0x62E5F,
		(0x90, 0xA1, 0xB8, 0xFA, 0x7B, 0x00, 0x56), // default=no
		(0x90, 0xE8, 0x0F, 0x67, 0xFB, 0xFF, 0x56),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		OnBeforeSaveGameEntryPoint,
		"Entry point before save game.",
		0x11E0DB,
		(0x50, 0x8B, 0x0D, 0x38, 0x0E, 0x58, 0x00, 0x8D, 0x44, 0x24, 0x0C), // default=no
		(0x50, 0xE8, 0x93, 0xB4, 0xEF, 0xFF, 0x90, 0x8D, 0x44, 0x24, 0x0C),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		MapGenerationElevationAmountCalculation,
		"Allows customization of elevated terrain proportion in map generation.",
		0x72C25,
		(0xE8, 0xB6, 0xC1, 0xFF, 0xFF, 0xE8, 0x2E, 0x34, 0x0B, 0x00, 0x89, 0x44, 0x24, 0x08), // default=no
		(0xE8, 0xB6, 0xC1, 0xFF, 0xFF, 0xE8, 0x45, 0x69, 0xFA, 0xFF, 0x89, 0x44, 0x24, 0x08),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixMapGenerationElevationComputationMethod,
		"Fix crashes due to bugs in terrain elevation generation in random map generation.",
		0x6F5A4,
		(0x8B, 0x44, 0x24, 0x08, 0x53, 0x55, 0x8B, 0xE9, 0x8B, 0xDA, 0x8B, 0x4C, 0x24, 0x14, 0x57), // default=no
		(0x8B, 0x44, 0x24, 0x08, 0xE8, 0xC7, 0x9F, 0xFA, 0xFF, 0xC2, 0x0C, 0x00, 0x90, 0x90, 0x57),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ScEditorUIAfterCreate,
		"Entry point after scenario editor UI creation.",
		0x99134,
		(0xC7, 0x86, 0xD8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x8B, 0x8C, 0x24, 0xCC, 0x01, 0x00, 0x00, 0x5F), // default=no
		(0xC7, 0x86, 0xD8, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0xE8, 0x31, 0x04, 0xF8, 0xFF, 0x90, 0x90, 0x5F),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ScEditorUIChangeTerrain,
		"Manage terrain selection in scenario editor.",
		0x926AF,
		(0x90, 0x8B, 0x54, 0x24, 0x04, 0x0F, 0xBF, 0xC2, 0x83, 0xF8, 0x08), // default=no
		(0x90, 0xE8, 0xBF, 0x6E, 0xF8, 0xFF, 0x90, 0x90, 0x83, 0xF8, 0x08),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		CheckPopCostWithLogistics,
		"Fix logistics bug in check cost method.",
		0xF16B4,
		(0xDF, 0xE0, 0xF6, 0xC4, 0x01, 0x74, 0x29, 0x83, 0xF9, 0x04), // default=no
		(0xDF, 0xE0, 0xE8, 0xB9, 0x7E, 0xF2, 0xFF, 0x83, 0xF9, 0x04),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		LoadEmpiresDAT_entryPoint,
		"Entry point after empires.dat is loaded.",
		0x11C8FB,
		(0x83, 0xC4, 0x08, 0xC2, 0x0C, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90), // default=no
		(0x83, 0xC4, 0x08, 0xE8, 0x71, 0xCC, 0xEF, 0xFF, 0xC2, 0x0C, 0x00, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		EditorUnitPlacementChecks,
		"Allows customizing unit placement in scenario editor.",
		0x11A3B3,
		(0x50, 0xE8, 0xB7, 0xF7, 0xEF, 0xFF, 0x50, 0x8B, 0xCE, 0xFF, 0x55, 0x20, 0x84, 0xC0), // default=no
		(0x50, 0xE8, 0xBB, 0xF1, 0xEF, 0xFF, 0x83, 0xC4, 0x24, 0x90, 0x90, 0x90, 0x84, 0xC0),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		HumanSpecific_onUnitSeen,
		"Entry point to fix issues with onUnitSeen event for human player, especially for artefacts. Fixes discovery resource count bug.",
		0x26D08,
		(0x8B, 0x16, 0x8B, 0x48, 0x3C, 0x8B, 0x41, 0x40, 0x8B, 0x0C, 0xB8, 0x51), // default=no
		(0x8B, 0x16, 0xE8, 0x65, 0x28, 0xFF, 0xFF, 0x90, 0x90, 0x90, 0x90, 0x51),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		CustomUnitSelection1,
		"A required fix for CustomUnitSelection2.",
		0x11A66D,
		(0x33, 0xDB, 0x6A, 0x01, 0x84, 0xC0), // default=no
		(0x33, 0xDB, 0x6A, 0x00, 0x84, 0xC0),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		CustomUnitSelection2,
		"Allows RockNRor to customize and improve unit selection/edition in game or editor.",
		0x11A6E7,
		(0x8B, 0x45, 0x00, 0x85, 0xC0, 0x0F, 0x8C, 0xBB, 0x00, 0x00, 0x00, 0x8B, 0x8E, 0xFC, 0x00, 0x00, 0x00, 0x8B, 0x91, 0x88, 0x00, 0x00, 0x00, 0x8B, 0x3C, 0x82, 0x85, 0xFF), // default=no
		(0x8B, 0x45, 0x00, 0x8B, 0x8E, 0xFC, 0x00, 0x00, 0x00, 0x50, 0xE8, 0xDA, 0x5F, 0x00, 0x00, 0x8B, 0xF8, 0x8B, 0x45, 0x00, 0xE8, 0x74, 0xEE, 0xEF, 0xFF, 0x90, 0x85, 0xFF),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ROR_writeDebugLog,
		"Entry point on ROR's (disabled) debug log method.",
		0x2C32F,
		(0x90, 0xC3, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90), // default=no
		(0x90, 0xE8, 0x3F, 0xD2, 0xFE, 0xFF, 0xC3, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		GetAOEDebugLogs,
		"Entry point on ROR's (disabled) debug log method.",
		0xC23F,
		(0x90, 0xA1, 0x40, 0x47, 0x55, 0x00, 0x81, 0xEC, 0x00, 0x04, 0x00, 0x00), // default=no
		(0x90, 0xE8, 0x2F, 0xD3, 0x00, 0x00, 0x81, 0xEC, 0x00, 0x04, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	/*
	// Uncomment if we need some day to customize this (call to path finding for way from villager position to resource)
	// Does not seem to need fixes - no need to call ROR_API here.
	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
	Unused_AffectGathererCheckPathFindingWayToResource,
	"[Unused at this point] Customize the call to path finding to evaluate if a villager can go to resource site from its current position.",
	0x004DFBB,
	(0xE8, 0x6C, 0x80, 0x0D, 0x00, 0x50, 0xB9, 0xC8, 0x3B, 0x58, 0x00, 0xE8, 0x65, 0xA9, 0x00, 0x00, 0x85, 0xC0), // default=no
	(0xE8, 0x6C, 0x80, 0x0D, 0x00, 0x50, 0xE8, 0xAE, 0xB5, 0xFC, 0xFF, 0x83, 0xC4, 0x3C, 0x90, 0x90, 0x85, 0xC0),
	FM_OFF,
	FM_ON
	);
	*/

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		AffectGathererCheckPathFindingReturn,
		"Customize/fix the call to path finding to evaluate if a villager can go from resource site to storage site.",
		0x004E029,
		(0x50, 0xB9, 0xC8, 0x3B, 0x58, 0x00, 0xE8, 0xFC, 0xA8, 0x00, 0x00, 0xC6, 0x86, 0x54, 0x01, 0x00, 0x00, 0x00), // default=no
		(0x50, 0xE8, 0x45, 0xB5, 0xFC, 0xFF, 0x83, 0xC4, 0x3C, 0x90, 0x90, 0xC6, 0x86, 0x54, 0x01, 0x00, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ImprovedUnitShortcuts,
		"Allows overriding display of shortcut number for units, and always show them in editor (for custom purposes).",
		0xA78C0,
		(0x8A, 0x45, 0x37, 0x84, 0xC0, 0x76, 0x65, 0x3C, 0x0A, 0x73, 0x61, 0x8B, 0x45, 0x0C), // default=no
		(0x8A, 0x45, 0x37, 0xE8, 0xAC, 0x1C, 0xF7, 0xFF, 0xEB, 0x62, 0x90, 0x8B, 0x45, 0x0C),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		InitPlayersCivInEditor,
		"Initialize player civilizations according to loaded scenario in scenario editor.",
		0x94C76,
		(0x8D, 0x7C, 0x24, 0x1C, 0x89, 0x44, 0x24, 0x18, 0xEB, 0x08, 0x8B, 0x4C, 0x24, 0x14), // default=no
		(0x8D, 0x7C, 0x24, 0x1C, 0xE8, 0xF5, 0x48, 0xF8, 0xFF, 0x90, 0x8B, 0x4C, 0x24, 0x14),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixRomanTileSetInEditorIcons,
		"Fix unsupported roman tileset in scenario editor.",
		0x978AF,
		(0x75, 0x05, 0xBF, 0x01, 0x00, 0x00, 0x00, 0x57), // default=no
		(0x75, 0x05, 0xE8, 0xBE, 0x1C, 0xF8, 0xFF, 0x57),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		CustomF11PopInfo,
		"Allows customizing F11 population info.",
		0xFAA30,
		(0x51, 0xE8, 0xCE, 0xB9, 0x02, 0x00, 0x8B, 0x86, 0x24, 0x01, 0x00, 0x00), // default=no
		(0x51, 0xE8, 0x3E, 0xEB, 0xF1, 0xFF, 0x8B, 0x86, 0x24, 0x01, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixSelectTargetFromAIList,
		"A fix to avoid selecting an invalid target while looping in AI unit list.",
		0xC41B3,
		(0x8B, 0x0C, 0x07, 0x51, 0x8B, 0x8E, 0x00, 0x01, 0x00, 0x00, 0xE8, 0xEE, 0x78, 0xF4, 0xFF), // default=no
		(0x8B, 0x0C, 0x07, 0xE8, 0xB9, 0x53, 0xF5, 0xFF, 0x50, 0x90, 0xE8, 0xEE, 0x78, 0xF4, 0xFF),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixUnitIdBugStuckAttackNoTarget,
		"A fix to avoid selecting an invalid target. This fixes units (often archers, catapults) that are stuck shooting some non-existing unit",
		0x14980,
		(0x0F, 0x84, 0xBA, 0x00, 0x00, 0x00, 0x8B, 0x46, 0x34, 0x8B, 0xCE, 0x50), // default=no
		(0x0F, 0x84, 0xBA, 0x00, 0x00, 0x00, 0xE8, 0xE9, 0x4B, 0x00, 0x00, 0x50),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		setActivityTargetUnitIdBug,
		"Fix a bug with unitId=-1 when setting activity target.",
		0x12F2C,
		(0x89, 0x56, 0x44, 0x8B, 0x48, 0x0C, 0x8B, 0x49, 0x3C, 0xE8, 0x96, 0xD7, 0x10, 0x00, 0x85, 0xC0), // default=no
		(0x89, 0x56, 0x44, 0xE8, 0x40, 0x66, 0x00, 0x00, 0x83, 0xC4, 0x04, 0x90, 0x90, 0x90, 0x85, 0xC0),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		readActivityTargetUnitIdBug_200,
		"Fix a bug with unitId=-1 when reading activity target (case 200).",
		0x00E64B2,
		(0x0F, 0x85, 0x0F, 0x02, 0x00, 0x00, 0x8B, 0x40, 0x0C, 0x8B, 0x56, 0x34, 0x52), // default=no
		(0x0F, 0x85, 0x0F, 0x02, 0x00, 0x00, 0xE8, 0xB7, 0x30, 0xF3, 0xFF, 0x90, 0x52),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		readActivityTargetUnitIdBug_1F4,
		"Fix 2 bugs with unitId=-1 related to activity treatments (case 1F4).",
		0x00E4794,
		(0x8B, 0xCE, 0xE8, 0xA5, 0x07, 0xF3, 0xFF, 0x8B, 0x56, 0x34, 0x8B, 0xF8, 0x52), // default=no
		(0x8B, 0xCE, 0xE8, 0xD9, 0x4D, 0xF3, 0xFF, 0x83, 0xC4, 0x04, 0xEB, 0x0C, 0x52),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixKillXUnknownPlayerCrash,
		"Fix kill* cheat code crash when player does not exist.",
		0x0010CB64,
		(0x0F, 0x85, 0x05, 0x01, 0x00, 0x00, 0x8B, 0x46, 0x40, 0x8B, 0x0C, 0xB8, 0x8B, 0x51, 0x28), // default=no
		(0x0F, 0x85, 0x05, 0x01, 0x00, 0x00, 0xE8, 0x05, 0xCA, 0xF0, 0xFF, 0x90, 0x8B, 0x51, 0x28),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ShowUnitCommandButtonsEnd,
		"Entry point after OnShowUnitCommandButtons.",
		0x0083489,
		(0x8B, 0xCE, 0xE8, 0x10, 0x00, 0x00, 0x00, 0x5F), // default=no
		(0x8B, 0xCE, 0xE8, 0xE4, 0x60, 0xF9, 0xFF, 0x5F),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		HandleGameCommandButtonsClick,
		"Entry point on gameCommandButtonsClick events.",
		0x08140D,
		(0xC2, 0x10, 0x00, 0xA1, 0x3C, 0x87, 0x55, 0x00, 0x53), // default=no
		(0xC2, 0x10, 0x00, 0xE8, 0x5F, 0x81, 0xF9, 0xFF, 0x53),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		GetButtonInternalIndexFromDatBtnId,
		"Overload GetButtonInternalIndexFromDatBtnId method to handle more than 2 pages.",
		0x08370F,
		(0x90, 0x8B, 0x44, 0x24, 0x04, 0x3C, 0x01, 0x72, 0x0D, 0x3C, 0x05), // default=no
		(0x90, 0xE8, 0x5F, 0x5E, 0xF9, 0xFF, 0xC2, 0x04, 0x00, 0x3C, 0x05),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixPlayerNoTechTree_applyTech,
		"Fix method that applies technology for players with no tech tree (all techs).",
		0x0EBB10,
		(0x51, 0x0F, 0xBF, 0x44, 0x24, 0x08, 0x8B, 0x51, 0x08, 0x56), // default=no
		(0x51, 0xE8, 0x5E, 0xDA, 0xF2, 0xFF, 0x8B, 0x51, 0x08, 0x56),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		EntryPoint_autoSearchTargetUnit1,
		"Entry point to improve auto-selection of target unit (loop1)",
		0x10E31,
		(0x0F, 0x85, 0x47, 0x01, 0x00, 0x00, 0x8B, 0x44, 0x24, 0x48, 0x85, 0xC0, 0x74, 0x08, 0x8B, 0x44, 0x24, 0x34), // default=no
		(0x0F, 0x85, 0x47, 0x01, 0x00, 0x00, 0xE8, 0x38, 0x87, 0x00, 0x00, 0x90, 0x90, 0x90, 0x8B, 0x44, 0x24, 0x34),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		EntryPoint_autoSearchTargetUnit2,
		"Entry point to improve auto-selection of target unit (loop2)",
		0x1124C,
		(0x0F, 0x85, 0x2A, 0x02, 0x00, 0x00, 0x8B, 0x44, 0x24, 0x48, 0x85, 0xC0, 0x74, 0x08, 0x8B, 0x44, 0x24, 0x34), // default=no
		(0x0F, 0x85, 0x2A, 0x02, 0x00, 0x00, 0xE8, 0x1D, 0x83, 0x00, 0x00, 0x90, 0x90, 0x90, 0x8B, 0x44, 0x24, 0x34),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixScenarioBadInitialAgeApplication_removeBad,
		"Disable invalid initial age application on players for scenarios. This must not be done before applying tech trees.",
		0x107FC5,
		(0x8B, 0xCE, 0xE8, 0xD4, 0x98, 0xFE, 0xFF, 0xDB, 0x87, 0x2C, 0x4C, 0x00, 0x00), // default=no
		(0x8B, 0xCE, 0x83, 0xC4, 0x04, 0x90, 0x90, 0xDB, 0x87, 0x2C, 0x4C, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixScenarioBadInitialAgeApplication_addFix,
		"Add (valid) player-specific initial age application after tech trees are applied. Used for scenario games.",
		0x10BB2A,
		(0x0F, 0x8E, 0x86, 0x02, 0x00, 0x00, 0x8B, 0x0D, 0x38, 0x0E, 0x58, 0x00, 0xE8, 0xB5, 0x99, 0xFF, 0xFF), // default=no
		(0x0F, 0x8E, 0x86, 0x02, 0x00, 0x00, 0xE8, 0x3F, 0xDA, 0xF0, 0xFF, 0x90, 0xE8, 0xB5, 0x99, 0xFF, 0xFF),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		CustomBuildingInfoDisplay,
		"Allows customizing buildings info display.",
		0xF8D87,
		(0xFF, 0x92, 0xE4, 0x00, 0x00, 0x00, 0xBE, 0x01, 0x00, 0x00, 0x00, 0x8B, 0x17), // default=no
		(0xFF, 0x92, 0xE4, 0x00, 0x00, 0x00, 0xE8, 0xE2, 0x07, 0xF2, 0xFF, 0x8B, 0x17),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		OverloadGetLocalizedText,
		"Adds support for custom text localization.",
		0xFF52F,
		(0x90, 0xA1, 0x34, 0x06, 0x7C, 0x00, 0x53), // default=no
		(0x90, 0xE8, 0x3F, 0xA0, 0xF1, 0xFF, 0x53),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		SetEmpiresDatFileName,
		"Ability to use custom empires.dat path/filename.",
		0x10120E,
		(0x8B, 0x4E, 0x0C, 0x81, 0xC1, 0xF8, 0x01, 0x00, 0x00, 0x51), // default=no
		(0x8B, 0x4E, 0x0C, 0xE8, 0x5E, 0x83, 0xF1, 0xFF, 0x90, 0x51),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		AllowMultiQueueing,
		"Adds support for custom text localization.",
		0xADB91,
		(0xC2, 0x08, 0x00, 0x66, 0x85, 0xC0, 0x7E, 0x1D, 0x8B, 0x86, 0xC0, 0x01, 0x00, 0x00), // default=no
		(0xC2, 0x08, 0x00, 0xE8, 0xDB, 0xB9, 0xF6, 0xFF, 0x8B, 0x86, 0xC0, 0x01, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		FixComboboxFocusBug,
		"Fixes an event capture bug with comboboxes that may freeze other UI objects, when combobox loses focus (when closing list).",
		0x51DCA,
		(0x56, 0x8B, 0xCF, 0xE8, 0xEE, 0xFE, 0xFF, 0xFF, 0x56), // default=no
		(0x56, 0xE8, 0xA4, 0x77, 0xFC, 0xFF, 0x58, 0x90, 0x56),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		OnAttackableUnitKilled,
		"Entry point when a unit (types 50-80) is killed by another one.",
		0x268F8,
		(0x74, 0x07, 0xC7, 0x46, 0x30, 0x00, 0x00, 0x00, 0x00, 0x5F), // default=no
		(0x74, 0x07, 0xE8, 0x75, 0x2C, 0xFF, 0xFF, 0x90, 0x90, 0x5F),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		OnHoverOnUnit,
		"Entry point when player hovers mouse on a unit.",
		0xF6F96,
		(0x83, 0xF8, 0xFF, 0x0F, 0x84, 0xD8, 0x01, 0x00, 0x00, 0x83, 0xF8, 0x09), // default=no
		(0x83, 0xF8, 0xFF, 0xE8, 0xD6, 0x25, 0xF2, 0xFF, 0x90, 0x83, 0xF8, 0x09),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		OnDisplayInGameDefaultCursorNoUnitUnderMouse,
		"Entry point when displaying default cursor in game, when no unit is under mouse.",
		0x11339B,
		(0x8B, 0x0D, 0xDC, 0x2E, 0x58, 0x00, 0x6A, 0x00, 0xE8, 0x18, 0x73, 0xF3, 0xFF, 0x8B, 0x8D, 0x4C, 0x03, 0x00, 0x00), // default=no
		(0x8B, 0x0D, 0xDC, 0x2E, 0x58, 0x00, 0x90, 0x90, 0xE8, 0xCC, 0x61, 0xF0, 0xFF, 0x8B, 0x8D, 0x4C, 0x03, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		AllowInGameCustomMouseActionTypesRightClick,
		"Entry point to allow handling of custom mouse action types in game (right click).",
		0x119FDC,
		(0x85, 0xC0, 0x0F, 0x85, 0x10, 0x01, 0x00, 0x00, 0x8B, 0x44, 0x24, 0x34), // default=no
		(0x85, 0xC0, 0xE8, 0x91, 0xF5, 0xEF, 0xFF, 0x90, 0x8B, 0x44, 0x24, 0x34),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		AfterActivityStop,
		"Entry point when a unit activity stops.",
		0x11D3A,
		(0xC7, 0x46, 0x30, 0xFF, 0xFF, 0xFF, 0xFF, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x5E), // default=no
		(0xC7, 0x46, 0x30, 0xFF, 0xFF, 0xFF, 0xFF, 0xE8, 0x2E, 0x78, 0x00, 0x00, 0x5E),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		GetMostDislikedPlayerId,
		"Entry point in GetMostDislikedPlayerId for fixes and customization.",
		0xACD6,
		(0x66, 0x39, 0x71, 0x3C, 0x0F, 0x8E, 0xAE, 0x00, 0x00, 0x00, 0x53), // default=no
		(0x66, 0x39, 0x71, 0x3C, 0xE8, 0x95, 0xE8, 0x00, 0x00, 0x90, 0x53),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		InfAIGroupFindMainTarget,
		"Overload AI main target selection method",
		0xBFFC5,
		(0x8B, 0xCD, 0xE8, 0x04, 0xD0, 0x00, 0x00, 0x8B, 0x8E, 0x00, 0x01, 0x00, 0x00),
		(0x8B, 0xCD, 0xE8, 0xA8, 0x95, 0xF5, 0xFF, 0x8B, 0x8E, 0x00, 0x01, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		OverloadTaskAIActiveSoldiersBeforeLoop,
		"Overload AI active groups handling: before loop on unit groups",
		0xD3ABA,
		(0x8B, 0xF9, 0x8B, 0x87, 0x84, 0x0F, 0x00, 0x00, 0x8B, 0xB7, 0xD8, 0x09, 0x00, 0x00),
		(0x8B, 0xF9, 0xE8, 0xB3, 0x5A, 0xF4, 0xFF, 0x90, 0x8B, 0xB7, 0xD8, 0x09, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		OverloadTaskAIActiveSoldiersForEachGroup,
		"Overload AI active groups handling: for each group",
		0xD3B16,
		(0x3B, 0xF5, 0x0F, 0x84, 0x11, 0x25, 0x00, 0x00, 0x8B, 0xCE),
		(0x3B, 0xF5, 0xE8, 0x57, 0x5A, 0xF4, 0xFF, 0x90, 0x8B, 0xCE),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		gameMainUITilesetGraphicsInit,
		"Overload game main UI initialization of tileset-related graphics",
		0x8177A,
		(0x8B, 0x56, 0x14, 0x8B, 0xD8, 0x83, 0xFB, 0x05, 0x89, 0x86, 0x14, 0x07, 0x00, 0x00),
		(0x8B, 0x56, 0x14, 0xE8, 0xF2, 0x7D, 0xF9, 0xFF, 0x89, 0x86, 0x14, 0x07, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		updateUnitInfoIconForBuilding,
		"Overload display of building icon in unit info zone to support custom tilesets",
		0xF87F6,
		(0x03, 0xF0, 0x8A, 0x91, 0xDC, 0x01, 0x00, 0x00, 0x8B, 0x3C, 0x97),
		(0x03, 0xF0, 0xE8, 0x77, 0x0D, 0xF2, 0xFF, 0x90, 0x8B, 0x3C, 0x97),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		editorSetUnitBuildingIcon,
		"Overload display of building icon in editor unit info zone to support custom tilesets",
		0xA4402,
		(0x8B, 0x3C, 0x91, 0x66, 0x8B, 0x90, 0x6E, 0x01, 0x00, 0x00, 0x03, 0xF2),
		(0x8B, 0x3C, 0x91, 0xE8, 0x6A, 0x51, 0xF7, 0xFF, 0x90, 0x90, 0x03, 0xF2),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		commandBarBldIconsForCustomTileset,
		"Overload display of building icon in command bar (build menu) to fix custom tilesets",
		0x824A9,
		(0x50, 0x8B, 0x84, 0x96, 0x98, 0x04, 0x00, 0x00, 0x8B, 0xCE),
		(0x50, 0xE8, 0xC5, 0x70, 0xF9, 0xFF, 0x90, 0x90, 0x8B, 0xCE),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		beforeUnitCreateActivity,
		"Overload method unit.createActivity to add more checks and custom code",
		0xAFBDF,
		(0x90, 0x6A, 0xFF, 0x68, 0x4A, 0x47, 0x53, 0x00, 0x64, 0xA1, 0x00, 0x00, 0x00, 0x00),
		(0x90, 0xE8, 0x8F, 0x99, 0xF6, 0xFF, 0x50, 0x52, 0x64, 0xA1, 0x00, 0x00, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		OverrideGameDebugString,
		"Allow displaying custom debug information in game screen",
		0x101640,
		(0x8B, 0xC1, 0x8B, 0x88, 0x24, 0x0C, 0x00, 0x00, 0x85, 0xC9),
		(0x8B, 0xC1, 0xE8, 0x2D, 0x7F, 0xF1, 0xFF, 0x90, 0x85, 0xC9),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		EntryPointUnitCanTradeWith,
		"Entry point on unit.canTradeWith function",
		0xAFB70,
		(0x8B, 0x44, 0x24, 0x04, 0x83, 0xF8, 0x32, 0x74, 0x0A, 0x83, 0xF8, 0x2D),
		(0x8B, 0x44, 0x24, 0x04, 0xE8, 0xFB, 0x99, 0xF6, 0xFF, 0x83, 0xF8, 0x2D),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		EntryPointDisplayBuildingInfoResource,
		"Entry point to display the resource value for a building in unit info zone",
		0xF8F04,
		(0x8B, 0x47, 0x0C, 0x8B, 0x8D, 0x10, 0x01, 0x00, 0x00, 0x3B, 0xC1),
		(0x8B, 0x47, 0x0C, 0xE8, 0x68, 0x06, 0xF2, 0xFF, 0x90, 0x3B, 0xC1),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		UnitInfoRefreshForTradeGoods,
		"Entry point to refresh the trade goods value in unit info zone",
		0xF9B7B,
		(0x66, 0x83, 0x7B, 0x10, 0x2D, 0x0F, 0x84, 0xF5, 0x00, 0x00, 0x00, 0x8A, 0x43, 0x04),
		(0x66, 0x83, 0x7B, 0x10, 0x2D, 0xE8, 0xEF, 0xF9, 0xF1, 0xFF, 0x90, 0x8A, 0x43, 0x04),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		infAISearchTradeTargetElem,
		"Fix hardcoded part in method that allows AI players to find a trade partner (target)",
		0xC1ABF,
		(0x90, 0x83, 0xEC, 0x10, 0x8B, 0x44, 0x24, 0x14, 0x55, 0x8B, 0xE9),
		(0x90, 0xE8, 0xAF, 0x7A, 0xF5, 0xFF, 0xC2, 0x04, 0x00, 0x8B, 0xE9),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		TradeWithCustomOutResource,
		"Fix hardcoded resource out in trading, when unit deposits traded goods.",
		0xB6FA8,
		(0x8B, 0x01, 0x6A, 0x01, 0x52, 0x6A, 0x03, 0xFF, 0x50, 0x78, 0x8B, 0x4E, 0x08),
		(0x8B, 0x01, 0xE8, 0xC5, 0x25, 0xF6, 0xFF, 0x90, 0x90, 0x90, 0x8B, 0x4E, 0x08),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		ShouldPreserveUnitResourceWhenKilledByClass,
		"Fix erroneous method unit.PreserveOwnedResourceWhenKilledBy(unitClass)",
		0xAFB8F,
		(0x90, 0x8B, 0x41, 0x08, 0x0F, 0xBF, 0x40, 0x14, 0x83, 0xF8, 0x09, 0x74, 0x05),
		(0x90, 0xE8, 0xDF, 0x99, 0xF6, 0xFF, 0xC2, 0x04, 0x00, 0x90, 0x90, 0x74, 0x05),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		VillagerActivityProcessNotify,
		"Process notify in civilian unit activity",
		0xE471B,
		(0x57, 0x05, 0x0C, 0xFE, 0xFF, 0xFF, 0x8B, 0xF1),
		(0x57, 0xE8, 0x53, 0x4E, 0xF3, 0xFF, 0x8B, 0xF1),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		IsTargetableResourceCallForInfAI,
		"Overloads call to isTargetableResource for filling potential AI targets in infAI",
		0xBDFB6,
		(0xE9, 0xDC, 0x00, 0x00, 0x00, 0x53, 0x8B, 0xCE, 0xE8, 0xFD, 0x01, 0x00, 0x00, 0x83, 0xF8, 0x01),
		(0xE9, 0xDC, 0x00, 0x00, 0x00, 0xE8, 0xB4, 0xB5, 0xF5, 0xFF, 0x90, 0x90, 0x90, 0x83, 0xF8, 0x01),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		CallIsArtefactOrTargetableResourceOrCreatable1,
		"CallIsArtefactOrTargetableResourceOrCreatable in manage infAI / see unit",
		0xBBA0C,
		(0x0F, 0xBF, 0x58, 0x14, 0x53, 0xE8, 0xEA, 0x26, 0x00, 0x00, 0x83, 0xF8, 0x01),
		(0x0F, 0xBF, 0x58, 0x14, 0xE8, 0x5F, 0xDB, 0xF5, 0xFF, 0x90, 0x83, 0xF8, 0x01),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		CallIsArtefactOrTargetableResourceOrCreatable2,
		"CallIsArtefactOrTargetableResourceOrCreatable in infAI.addUnitInLists(unitStruct, flagNotInElemUnitList?)",
		0xBDD2F,
		(0x0F, 0xBF, 0x40, 0x14, 0x50, 0x89, 0x44, 0x24, 0x0C, 0xE8, 0xC3, 0x03, 0x00, 0x00, 0x85, 0xC0),
		(0x0F, 0xBF, 0x40, 0x14, 0x89, 0x44, 0x24, 0x08, 0xE8, 0x38, 0xB8, 0xF5, 0xFF, 0x90, 0x85, 0xC0),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		CallIsArtefactOrTargetableResourceOrCreatable3,
		"CallIsArtefactOrTargetableResourceOrCreatable in (?)",
		0xC6243,
		(0x0F, 0xBF, 0x6A, 0x14, 0x55, 0xE8, 0xB3, 0x7E, 0xFF, 0xFF, 0x83, 0xF8, 0x01),
		(0x0F, 0xBF, 0x6A, 0x14, 0xE8, 0x28, 0x33, 0xF5, 0xFF, 0x90, 0x83, 0xF8, 0x01),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		activityNotifyEvent,
		"Entry point in activityNotifyEvent",
		0x1389B,
		(0x8B, 0x47, 0x08, 0x05, 0x0C, 0xFE, 0xFF, 0xFF, 0x3D, 0xC7, 0x00, 0x00, 0x00),
		(0x8B, 0x47, 0x08, 0xE8, 0xD1, 0x5C, 0x00, 0x00, 0x3D, 0xC7, 0x00, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);


	//optional
	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		Optional_ManageGameTimerSkip,
		"[Optional] Call RockNRor to fix timer bug on fast computers.",
		0x011D913,
		(0xFF, 0xD7, 0x8B, 0x4E, 0x04, 0x8B, 0x56, 0x58, 0x51), // default=no
		(0xFF, 0xD7, 0xE8, 0x5A, 0xBC, 0xEF, 0xFF, 0x90, 0x51),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->ROR_API_10c.GetBinSeqDefinition(i),
		Optional_GameTimerSkipStats,
		"[Optional] Call RockNRor to manage autofix for ManageGameTimerSkip and provide statistics.",
		0x011D9E2,
		(0xE8, 0x45, 0x86, 0x00, 0x00, 0x03, 0xC7, 0x89, 0x46, 0x04, 0x8B, 0x46, 0x04), // default=no
		(0xE8, 0x45, 0x86, 0x00, 0x00, 0xE8, 0x88, 0xBB, 0xEF, 0xFF, 0x8B, 0x46, 0x04),
		FM_OFF,
		FM_ON
		);


	if (i != COUNT_ROR_API_10c) {
		throw AOE_binDataSetupException("Binary setup error for ROR_API_10c. Bad element count.");
	}
#ifdef _DEBUG
	printf("ROR_API 1.0c=%d\n", i); // DEBUG
#endif
}


void AOE_binData::InitManageAI() {
	int i = 0;

	NEXT_INITSEQ_2_NOVAR(this->manageAI_10c.GetBinSeqDefinition(i),
		FULL_Computer_player_1,
		"If you check this, player1 will be computer-controlled (like other players).",
		1091003,
		(0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x01, 0x6A, 0x00, 0xEB, 0xB9), // default=no
		(0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x01, 0x6A, 0x01, 0xEB, 0xB9),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->manageAI_10c.GetBinSeqDefinition(i),
		Init_is_computer_for_AI_1,
		"Allows the game to initialize properly the custom flag \"is_computer_for_AI\" (for a new game), which defines if a player's AI will be managed by the computer.",
		982003,
		(0x8A, 0x44, 0x24, 0x38, 0x57), // default=no
		(0xE9, 0x9D, 0x6B, 0x04, 0x00),
		FM_OFF,
		FM_ON
		);

	// TO DO: move into custom_ROR DLL
	NEXT_INITSEQ_2_NOVAR(this->manageAI_10c.GetBinSeqDefinition(i),
		Init_is_computer_for_AI_2,
		"Allows the game to initialize properly the custom flag \"is_computer_for_AI\" (for a new game), which defines if a player's AI will be managed by the computer.",
		1271701, // 0x536795
		(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), // default=no
		(0x8A, 0x44, 0x24, 0x38, 0x57, 0x50, 0x8B, 0x46, 0x04, 0x88, 0x46, 0x4E, 0x58, 0xE9, 0x51, 0x94, 0xFB, 0xFF),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->manageAI_10c.GetBinSeqDefinition(i),
		load_is_computer_for_AI_1,
		"Allows the game to initialize properly the custom flag \"is_computer_for_AI\" (after loading a saved game), which defines if a player's AI will be managed by the computer.",
		981698, // 0x4EFAC2
		(0x8B, 0x4C, 0x24, 0x14, 0x8B, 0xC6), // default=no
		(0xE9, 0xE0, 0x6C, 0x04, 0x00, 0x90),
		FM_OFF,
		FM_ON
		);

	// TO DO: move into custom_ROR DLL
	NEXT_INITSEQ_2_NOVAR(this->manageAI_10c.GetBinSeqDefinition(i),
		load_is_computer_for_AI_2,
		"Allows the game to initialize properly the custom flag \"is_computer_for_AI\" (after loading a saved game), which defines if a player's AI will be managed by the computer.",
		1271719,
		(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), // default=no
		(0x8B, 0x4C, 0x24, 0x14, 0x8B, 0xC6, 0x50, 0x8B, 0x46, 0x04, 0x88, 0x46, 0x4E, 0x58, 0xE9, 0x0D, 0x93, 0xFB, 0xFF),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->manageAI_10c.GetBinSeqDefinition(i),
		UseAIControlModeFlagForAI1,
		"Tests the flag is_computer_for_AI before running a set of AI actions.",
		983572,
		(0xE8, 0x44, 0x5E, 0x03, 0x00, 0x8B, 0xF8), // default=no
		(0xE8, 0x44, 0x5E, 0x03, 0x00, 0xEB, 0x5A),
		FM_OFF,
		FM_ON
		);

	// TO DO: move into custom_ROR DLL
	NEXT_INITSEQ_2_NOVAR(this->manageAI_10c.GetBinSeqDefinition(i),
		UseAIControlModeFlagForAI2,
		"Tests the flag is_computer_for_AI before running a set of AI actions.",
		983669,
		(0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90), // default=no
		(0x8B, 0xF8, 0x8A, 0x46, 0x4E, 0x3C, 0x00, 0x75, 0x9D, 0xEB, 0xD4),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->manageAI_10c.GetBinSeqDefinition(i),
		Fix_AI_nextPlayerManagement,
		"This fixes a function that selects the next player to be managed by AI.",
		1180977,
		(0x8A, 0x58, 0x48, 0x8B, 0x44, 0x24, 0x14, 0x3B, 0xD8, 0x75, 0x04), // default=no
		(0x8A, 0x58, 0x4E, 0x33, 0xC0, 0x40, 0x90, 0x3B, 0xD8, 0x75, 0x04),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->manageAI_10c.GetBinSeqDefinition(i),
		FixSaveGameForAIManagement,
		"This fix prevents saved game from crashing at load time, if \"is computer controlled\" flag was customized during the game.",
		982977,
		(0x8B, 0x46, 0x04, 0x83, 0xC4, 0x18, 0x83, 0xF8, 0x01, 0x75, 0x57), // default=no
		(0x8B, 0x46, 0x48, 0x83, 0xC4, 0x18, 0x3C, 0x03, 0x90, 0x75, 0x57),
		FM_OFF,
		FM_ON
		);

	// TO DO: move into custom_ROR DLL
	NEXT_INITSEQ_2_NOVAR(this->manageAI_10c.GetBinSeqDefinition(i),
		DefGetAIptr_EAX,
		"Tech function to test is_computer_for_AI before getting the AI object. This allows the game to prevent from running AI behaviours when is_computer_for_AI=0",
		1271738,
		(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), // default=no
		(0x56, 0x3E, 0x8B, 0x74, 0x24, 0x08, 0x33, 0xC0, 0x8A, 0x46, 0x4E, 0x85, 0xC0, 0x74, 0x06, 0x8B, 0x86, 0x3C, 0x02, 0x00, 0x00, 0x5E, 0xC2, 0x04, 0x00),
		FM_OFF,
		FM_ON
		);

	// TO DO: move into custom_ROR DLL
	NEXT_INITSEQ_2_NOVAR(this->manageAI_10c.GetBinSeqDefinition(i),
		DefGetAIptr_ECX,
		"Tech function to test is_computer_for_AI before getting the AI object. This allows the game to prevent from running AI behaviours when is_computer_for_AI=0",
		1271763, //1367D3
		(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), // default=no
		(0x56, 0x3E, 0x8B, 0x74, 0x24, 0x08, 0x33, 0xC9, 0x8A, 0x4E, 0x4E, 0x85, 0xC9, 0x74, 0x06, 0x8B, 0x8E, 0x3C, 0x02, 0x00, 0x00, 0x5E, 0xC2, 0x04, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->manageAI_10c.GetBinSeqDefinition(i),
		GetAI01,
		"Tests the flag is_computer_for_AI before running a set of AI actions. (004F3459)",
		996441,
		(0x8B, 0x86, 0x3C, 0x02, 0x00, 0x00, 0x85, 0xC0), // default=no
		(0x56, 0xE8, 0x5B, 0x33, 0x04, 0x00, 0x85, 0xC0),
		FM_OFF,
		FM_ON
		);

	// AI02 has been removed (obsolete) : it must be preserved, not really an AI behaviour, just update info in AI structures
	// AI03 has been removed (obsolete) : it must be preserved, not really an AI behaviour, just update info in AI structures
	// AI05 has been removed (obsolete) : it must be preserved, not really an AI behaviour, just update info in AI structures
	// AI06 has been removed (obsolete) : it must be preserved, not really an AI behaviour, just update info in AI structures
	// AI07 has been removed (obsolete) : it must be preserved, not really an AI behaviour, just update info in AI structures
	// AI08 has been removed (obsolete) : it must be preserved, not really an AI behaviour, just update info in AI structures

	NEXT_INITSEQ_2_NOVAR(this->manageAI_10c.GetBinSeqDefinition(i),
		GetAI04,
		"Tests the flag is_computer_for_AI before running a set of AI actions.",
		1010512,
		(0x8B, 0x81, 0x3C, 0x02, 0x00, 0x00), // default=no
		(0x51, 0xE8, 0x64, 0xFC, 0x03, 0x00),
		FM_OFF,
		FM_ON
		);

	// FixAIUnitList1 and FixAIUnitList2 : Move to obsolete. Was a bad workaround and buggy (bad list behaviour, missing units). Solution was to disable getAI3 and 6.

	if (i != COUNT_manageAI_10c) {
		throw AOE_binDataSetupException("Binary setup error for manageAI_10c. Bad element count.");
	}
#ifdef _DEBUG
	printf("manageAI_10c=%d\n", i); // DEBUG
#endif
}


void AOE_binData::InitAudioVideo_10c() {
	int i = 0;

	NEXT_INITSEQ_2_NOVAR(this->audioVideo_10c.GetBinSeqDefinition(i),
		AudioMoreFileTypes,
		"Supports additional file types other than MIDI. Place your mp3 files in the sound folder and name them exactly like the x-files minus the extension.",
		0x5050A,
		(0x68, 0x00, 0x32, 0x00, 0x00, 0x68, 0x03, 0x08, 0x00, 0x00, 0x6A, 0x00, 0xC7, 0x44, 0x24, 0x30, 0x0B, 0x02, 0x00, 0x00), // default=no
		(0x68, 0x00, 0x02, 0x00, 0x00, 0x68, 0x03, 0x08, 0x00, 0x00, 0x6A, 0x00, 0xC7, 0x44, 0x24, 0x30, 0x00, 0x00, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->audioVideo_10c.GetBinSeqDefinition(i),
		MP3_xmusic,
		"Playback xmusic#.mp3 instead of xmusic#.mid.",
		0x15796C,
		(0x25, 0x73, 0x78, 0x6D, 0x75, 0x73, 0x69, 0x63, 0x25, 0x64, 0x2E, 0x6D, 0x69, 0x64, 0x00, 0x00), // default=no
		(0x25, 0x73, 0x78, 0x6D, 0x75, 0x73, 0x69, 0x63, 0x25, 0x64, 0x2E, 0x6D, 0x70, 0x33, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->audioVideo_10c.GetBinSeqDefinition(i),
		MP3_extension,
		"Change .mid to .mp3 extension.",
		0x15798C,
		(0x2E, 0x6D, 0x69, 0x64, 0x00, 0x00, 0x00, 0x00), // default=no
		(0x2E, 0x6D, 0x70, 0x33, 0x00, 0x00, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->audioVideo_10c.GetBinSeqDefinition(i),
		MP3_xlost,
		"Playback xlost.mp3 instead of xlost.mid.",
		0x15CCB4,
		(0x78, 0x6C, 0x6F, 0x73, 0x74, 0x2E, 0x6D, 0x69, 0x64, 0x00, 0x00, 0x00), // default=no
		(0x78, 0x6C, 0x6F, 0x73, 0x74, 0x2E, 0x6D, 0x70, 0x33, 0x00, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->audioVideo_10c.GetBinSeqDefinition(i),
		MP3_xwon,
		"Playback xwon.mp3 instead of xwon.mid.",
		0x15CCC0,
		(0x78, 0x77, 0x6F, 0x6E, 0x2E, 0x6D, 0x69, 0x64, 0x00, 0x00, 0x00, 0x00), // default=no
		(0x78, 0x77, 0x6F, 0x6E, 0x2E, 0x6D, 0x70, 0x33, 0x00, 0x00, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->audioVideo_10c.GetBinSeqDefinition(i),
		MP3_xopen,
		"Playback xopen.mp3 instead of xopen.mid.",
		0x15CCE8,
		(0x78, 0x6F, 0x70, 0x65, 0x6E, 0x2E, 0x6D, 0x69, 0x64, 0x00, 0x00, 0x00), // default=no
		(0x78, 0x6F, 0x70, 0x65, 0x6E, 0x2E, 0x6D, 0x70, 0x33, 0x00, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);

	// Video
	NEXT_INITSEQ_2_NOVAR(this->audioVideo_10c.GetBinSeqDefinition(i),
		Video_DisableSizeDoubling,
		"Disable doubling of video size.\nShould be enabled if the doubling of video size is larger than the set display mode.",
		0x100609,
		(0x8B, 0x54, 0x24, 0x1C, 0x8D, 0x2C, 0x09, 0x8D, 0x3C, 0x12), // default=no
		(0x8B, 0x54, 0x24, 0x1C, 0x8D, 0x29, 0x8D, 0x3A, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_1_VAR(this->audioVideo_10c.GetBinSeqDefinition(i),
		Video_displayModeWidth,
		"Width of the display mode.\nShould be set to a value that your system supports.",
		0x106216,
		(0x68, 0x80, 0x02, 0x00, 0x00), // default=no
		SVT_INT_4B,
		1
		);

	NEXT_INITSEQ_1_VAR(this->audioVideo_10c.GetBinSeqDefinition(i),
		Video_displayModeHeight,
		"Height of the display mode.\nShould be set to a value that your system supports.",
		0x106211,
		(0x68, 0xE0, 0x01, 0x00, 0x00), // default=no
		SVT_INT_4B,
		1
		);

	if (i != COUNT_audio_video_10c) {
		throw AOE_binDataSetupException("Binary setup error for audioVideo_10c. Bad element count.");
	}
#ifdef _DEBUG
	printf("AudioVideo 1.0c=%d\n", i); // DEBUG
#endif
}

void AOE_binData::InitObsoletes() {
	int i = 0;

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_MoveMouseToCenter,
		"[OBSOLETE] Move mouse to center at various occasions against your will (to be applied on VEG's mod). Old and non-compatible fix, please use new one.",
		305162, // 4A80A
		(0x03, 0xC6, 0x50, 0x51, 0xFF, 0x15, 0x24, 0x23, 0x54, 0x00, 0x5E), // default=yes
		(0x03, 0xC6, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x90, 0x5E),
		FM_ON,
		FM_OFF
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_GenerateNameForHuman,
		"[OBSOLETE] Generate a name for human player. Does not work well.",
		1062905,
		(0x80, 0x3B, 0x00, 0x75, 0x7B), // default=no
		(0x90, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_GenerateNameForHuman2,
		"[OBSOLETE] Generate a name for human player. This has issues and impacts scenario/campagins.",
		1062905,
		(0x80, 0x3B, 0x00, 0x75, 0x7B), // default=no
		(0xEB, 0x1B, 0x90, 0x75, 0x7B),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_GetAI02,
		"[OBSOLETE] (ManageAI) Tests the flag is_computer_for_AI before running a set of AI actions - update unit info. DO NOT ENABLE as it is necessary to always run the treatments.",
		994095, //0xF2B2F
		(0x8B, 0x8E, 0x3C, 0x02, 0x00, 0x00), // default=no
		(0x56, 0xE8, 0x9E, 0x3C, 0x04, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_GetAI03,
		"[OBSOLETE] (ManageAI) Tests the flag is_computer_for_AI before running a set of AI actions (player.addUnit). DO NOT ENABLE as it is necessary to always run the treatments.",
		993991, // F2AC7
		(0x8B, 0x8E, 0x3C, 0x02, 0x00, 0x00), // default=no
		(0x56, 0xE8, 0x06, 0x3D, 0x04, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_GetAI05,
		"[OBSOLETE] (ManageAI) Tests the flag is_computer_for_AI before running a set of AI actions - on building completed (for strategy)",
		0xF2BF0,
		(0x8B, 0x81, 0x3C, 0x02, 0x00, 0x00), // default=no
		(0x51, 0xE8, 0xC4, 0x3B, 0x04, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_GetAI06,
		"[OBSOLETE] (ManageAI) Tests the flag is_computer_for_AI before running a set of AI actions. DO NOT ENABLE as it is necessary to always run the treatments.",
		0xF2AF4,
		(0x8B, 0x8E, 0x3C, 0x02, 0x00, 0x00), // default=no
		(0x56, 0xE8, 0xD9, 0x3C, 0x04, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_GetAI07,
		"[OBSOLETE] (ManageAI) Tests the flag is_computer_for_AI before running a set of AI actions - onUnitSpawn (for strategy).",
		0xF2C50,
		(0x8B, 0x81, 0x3C, 0x02, 0x00, 0x00), // default=no
		(0x51, 0xE8, 0x64, 0x3B, 0x04, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_GetAI08,
		"Tests the flag is_computer_for_AI before running a set of AI actions - on research completed (for strategy).",
		0xF2CE0,
		(0x8B, 0x81, 0x3C, 0x02, 0x00, 0x00), // default=no
		(0x51, 0xE8, 0xD4, 0x3A, 0x04, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		FixAIUnitList1,
		"[OBSOLETE] (ManageAI) Add human-created units to AI lists so that it can be detected by AI if necessary. This was a bad workaround, do not use.",
		682815,
		(0x8B, 0x4C, 0x24, 0x1C, 0x89, 0x46, 0x38, 0x8B, 0x06), // default=no
		(0x8B, 0x4C, 0x24, 0x1C, 0xE9, 0xA4, 0xFC, 0x08, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		FixAIUnitList2,
		"[OBSOLETE] (ManageAI) Add human-created units to AI lists so that it can be detected by AI if necessary. This was a bad workaround, do not use.",
		1271788,
		(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), // default=no
		(0x89, 0x46, 0x38, 0x8B, 0x06, 0x50, 0x51, 0x52, 0x8B, 0x4E, 0x0C, 0x8B, 0x89, 0x3C, 0x02, 0x00, 0x00, 0x85, 0xC9, 0x74, 0x06, 0x56, 0xE8, 0x79, 0x50, 0xED, 0xFF, 0x5A, 0x59, 0x58, 0xE9, 0x39, 0x03, 0xF7, 0xFF),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_OLD_GameSaveBug_FixA_compatibility,
		"[OBSOLETE] OLD fix, do not install it. Fixes the game save bug (projectiles bug): compatibility with 1.0b saved game files.",
		299024,
		(0x53, 0x56, 0x57, 0x8B, 0x7C, 0x24, 0x10, 0x8B, 0xF1, 0x57, 0xE8, 0xF1, 0xD1, 0xFD, 0xFF, 0x8D, 0x86, 0xBC, 0x01, 0x00, 0x00, 0x6A, 0x04, 0x50, 0x57, 0xE8, 0x12, 0x2A, 0x02, 0x00, 0x8D, 0x9E, 0xC0, 0x01, 0x00, 0x00), // default=no
		(0x8D, 0x81, 0xBC, 0x01, 0x00, 0x00, 0x8B, 0x54, 0xE4, 0x04, 0x6A, 0x04, 0x50, 0x52, 0x52, 0xE8, 0xEC, 0xD1, 0xFD, 0xFF, 0xE8, 0x17, 0x2A, 0x02, 0x00, 0x83, 0xC4, 0x0C, 0xC2, 0x04, 0x00, 0x90, 0x90, 0x90, 0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_OLD_GameSaveBug_FixB_10c_only,
		"[OBSOLETE] OLD fix, do not install it. Fixes the game save bug (projectiles bug), without compatibility with 1.0b saved game files.",
		298874,
		(0x75, 0x0E), // default=no
		(0x90, 0x90),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_OLD_MoreGameSpeeds1,
		"[OBSOLETE] Use MoreGameSpeeds option to allow changing speed by using multiplications by 1.25 each time",
		543949,
		(0xD8, 0x1D, 0x34, 0x25, 0x54, 0x00, 0xDF, 0xE0, 0xF6, 0xC4, 0x40, 0x74, 0x0D, 0xC7, 0x44, 0x24, 0x08, 0x00, 0x00, 0xC0, 0x3F, 0xE9, 0x1D, 0x01, 0x00, 0x00, 0xD9, 0x44, 0x24, 0x08, 0xD8, 0x1D, 0xB0, 0x34, 0x54, 0x00, 0xDF, 0xE0), // default=no
		(0xD9, 0x05, 0xE8, 0x4C, 0x54, 0x00, 0xDB, 0xF1, 0x0F, 0x82, 0x29, 0x01, 0x00, 0x00, 0x3E, 0xD9, 0x44, 0x24, 0x08, 0xD8, 0x35, 0xF8, 0x5C, 0x54, 0x00, 0x3E, 0xD9, 0x54, 0x24, 0x08, 0xE9, 0x14, 0x01, 0x00, 0x00, 0x90, 0xDF, 0xE0),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_OLD_MoreGameSpeeds2,
		"[OBSOLETE] Use MoreGameSpeeds option to allow changing speed by using multiplications by 1.25 each time",
		544131,
		(0xD8, 0x1D, 0xE8, 0x4C, 0x54, 0x00, 0xDF, 0xE0, 0xF6, 0xC4, 0x40, 0x74, 0x0A, 0xC7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x41, 0xEB, 0x6A, 0xD9, 0x44, 0x24, 0x08, 0xD8, 0x1D, 0xC8, 0x68, 0x54, 0x00, 0xDF, 0xE0, 0xF6, 0xC4, 0x40, 0x74, 0x0A, 0xC7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x80, 0x40, 0xEB, 0x4F, 0xD9, 0x44, 0x24, 0x08, 0xD8, 0x1D, 0x08, 0x2E, 0x54, 0x00, 0xDF, 0xE0, 0xF6, 0xC4, 0x40, 0x74, 0x0A, 0xC7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x00, 0x40, 0xEB, 0x34, 0xD9, 0x44, 0x24, 0x08, 0xD8, 0x1D, 0xD4, 0x29, 0x54, 0x00, 0xDF, 0xE0), // default=no
		(0x51, 0x6A, 0x36, 0xFF, 0x15, 0x88, 0x22, 0x54, 0x00, 0x66, 0x25, 0xF0, 0xFF, 0x66, 0x85, 0xC0, 0x59, 0x75, 0x6E, 0xD9, 0x05, 0x34, 0x25, 0x54, 0x00, 0xD8, 0x35, 0xE8, 0x4C, 0x54, 0x00, 0xDB, 0xF1, 0x73, 0x5E, 0x3E, 0xD9, 0x44, 0x24, 0x08, 0xD8, 0x0D, 0xF8, 0x5C, 0x54, 0x00, 0x3E, 0xD9, 0x54, 0x24, 0x08, 0x3E, 0xD9, 0x44, 0x24, 0x08, 0xD8, 0x25, 0x34, 0x25, 0x54, 0x00, 0xD9, 0xE1, 0xD9, 0x05, 0x00, 0x32, 0x54, 0x00, 0xDB, 0xF1, 0x72, 0x37, 0xC7, 0x44, 0x24, 0x08, 0x00, 0x00, 0x80, 0x3F, 0xEB, 0x2D, 0x90, 0x90, 0x90, 0xDF, 0xE0),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_OLD_ManageUnitTargetChange,
		"[OBSOLETE] Entry point on action.attackTargetChange.",
		0x026ED6,
		(0x8B, 0x8E, 0x84, 0x01, 0x00, 0x00, 0xE8, 0xCF, 0xD6, 0xFD, 0xFF, 0x8B, 0x10, 0x8B, 0xC8, 0xFF, 0x52, 0x4C, 0x3B, 0xC7, 0x75, 0x3C, 0x8B, 0x8E, 0x84, 0x01, 0x00, 0x00, 0xE8, 0xB9, 0xD6, 0xFD, 0xFF), // default=no
		(0x8B, 0x8E, 0x84, 0x01, 0x00, 0x00, 0xE8, 0x93, 0x26, 0xFF, 0xFF, 0x83, 0xF8, 0x02, 0x74, 0x42, 0x83, 0xF8, 0x03, 0x0F, 0x84, 0xE2, 0x00, 0x00, 0x00, 0x90, 0x90, 0x90, 0xE8, 0xB9, 0xD6, 0xFD, 0xFF),
		FM_OFF,
		FM_ON
		);

	// 2 old ROR_API sequences: were causing compatibility issues with cdcheck changes
	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_OLD_ROR_API_DLL_initialization,
		"[OBSOLETE] Old ROR_API Make DLL initialization + init call.",
		0x436FC,
		(0x56, 0x57, 0xBF, 0xF8, 0x77, 0x55, 0x00, 0x83, 0xC9, 0xFF, 0x33, 0xC0, 0x8D, 0x54, 0x24, 0x14, 0xF2, 0xAE, 0xF7, 0xD1, 0x2B, 0xF9, 0x8B, 0xC1, 0x8B, 0xF7, 0x8B, 0xFA, 0x8D, 0x54, 0x24, 0x79, 0xC1, 0xE9, 0x02, 0xF3, 0xA5, 0x8B, 0xC8, 0x33, 0xC0, 0x83, 0xE1, 0x03, 0xF3, 0xA4, 0xBF, 0xE8, 0x77, 0x55, 0x00, 0x83, 0xC9, 0xFF, 0xF2, 0xAE, 0xF7, 0xD1, 0x2B, 0xF9, 0x8B, 0xC1, 0x8B, 0xF7, 0x8B, 0xFA, 0x8D, 0x94, 0x24, 0x8E, 0x00, 0x00, 0x00, 0xC1, 0xE9, 0x02, 0xF3, 0xA5, 0x8B, 0xC8, 0x83, 0xE1, 0x03, 0xF3, 0xA4, 0x8D, 0x4C, 0x24), // default=no
		(0x56, 0x57, 0x8D, 0xBC, 0x24, 0x58, 0x14, 0x00, 0x00, 0x57, 0xE8, 0x2B, 0x5E, 0xFD, 0xFF, 0x83, 0xC4, 0x04, 0xE8, 0x61, 0x5E, 0xFD, 0xFF, 0x90, 0x90, 0x90, 0x90, 0x90, 0xBF, 0xF8, 0x77, 0x55, 0x00, 0x83, 0xC9, 0xFF, 0x33, 0xC0, 0x8D, 0x54, 0x24, 0x14, 0xF2, 0xAE, 0xF7, 0xD1, 0x2B, 0xF9, 0x8B, 0xF7, 0x8B, 0xFA, 0xF3, 0xA4, 0x8D, 0x54, 0x24, 0x79, 0xBF, 0xE8, 0x77, 0x55, 0x00, 0x83, 0xC9, 0xFF, 0xF2, 0xAE, 0xF7, 0xD1, 0x2B, 0xF9, 0x8B, 0xF7, 0x8B, 0xFA, 0xF3, 0xA4, 0x8D, 0x94, 0x24, 0x8E, 0x00, 0x00, 0x00, 0x8D, 0x4C, 0x24),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_OLD_ROR_API_DLL_API_methods,
		"[OBSOLETE] Old ROR_API Add API methods",
		0x19530,
		(0x81, 0xEC, 0x0C, 0x02, 0x00, 0x00, 0x53, 0x8B, 0xD9, 0x56, 0x8B, 0x43, 0x0C, 0x8B, 0x88, 0x08, 0x04, 0x00, 0x00, 0x85, 0xC9, 0x75, 0x10, 0x5E, 0xB8, 0x01, 0x00, 0x00, 0x00, 0x5B, 0x81, 0xC4, 0x0C, 0x02, 0x00, 0x00, 0xC2, 0x04, 0x00, 0x8B, 0x84, 0x24, 0x18, 0x02, 0x00, 0x00, 0x85, 0xC0, 0x7E, 0x55, 0x55, 0x33, 0xED, 0x57, 0x33, 0xF6, 0x8B, 0x8B, 0x8C, 0x01, 0x00, 0x00, 0x8D, 0x7E, 0x01, 0x57, 0xE8, 0x99, 0xA7, 0x00, 0x00, 0x83, 0xF8, 0x02, 0x75, 0x0D, 0x56, 0x8B, 0xCB, 0xE8, 0x7C, 0x22, 0x00, 0x00, 0x85, 0xC0), // default=no
		(0x33, 0xC0, 0x40, 0xC2, 0x04, 0x00, 0x81, 0xEC, 0x08, 0x02, 0x00, 0x00, 0x56, 0x57, 0x53, 0x51, 0x52, 0x8B, 0x35, 0x24, 0x22, 0x54, 0x00, 0x68, 0x20, 0x78, 0x55, 0x00, 0xFF, 0xD6, 0xA3, 0x38, 0x78, 0x55, 0x00, 0x85, 0xC0, 0x74, 0x11, 0x68, 0x2C, 0x78, 0x55, 0x00, 0x50, 0xFF, 0x15, 0xF8, 0x20, 0x54, 0x00, 0xA3, 0x3C, 0x78, 0x55, 0x00, 0x5A, 0x59, 0x5B, 0x5F, 0x5E, 0x81, 0xC4, 0x08, 0x02, 0x00, 0x00, 0xC3, 0x50, 0xA1, 0x3C, 0x78, 0x55, 0x00, 0x85, 0xC0, 0x74, 0x02, 0xFF, 0xD0, 0x58, 0xC3, 0x90, 0xC3, 0x85, 0xC0),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_Optional_GameTimerSkipStats,
		"[OBSOLETE] Do not use because of possible impact on FPU stack. Call RockNRor to manage autofix for ManageGameTimerSkip and provide statistics.",
		0x011D9DF,
		(0xD8, 0x4E, 0x18, 0xE8, 0x45, 0x86, 0x00, 0x00, 0x03, 0xC7), // default=no
		(0xD8, 0x4E, 0x18, 0xE8, 0x8D, 0xBB, 0xEF, 0xFF, 0x03, 0xC7),
		FM_OFF,
		FM_ON
		);

	// This one is no longer useful, be it is not harmful to keep it.
	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_CityPlanHouseDistanceFromBuildings,
		"[OBSOLETE] City plan: calculate houses distance from other buildings. This fix is no longer necessary as long as ManageCityMapLikeCalculation1 is active.",
		0x00C2536,
		(0x8B, 0xE8, 0x83, 0xED, 0x03, 0x89, 0x6C, 0x24, 0x28, 0xD9, 0x47, 0x3C), // default=no
		(0x8B, 0xE8, 0xE8, 0x37, 0x70, 0xF5, 0xFF, 0xEB, 0x2B, 0xD9, 0x47, 0x3C),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_FixAI_AfterWonder1,
		"[OBSOLETE] Fix the wonder construction flag bug when construction completes",
		756704,
		(0x89, 0x99, 0xB4, 0x22, 0x01, 0x00, 0x6A, 0x3F, 0x8B, 0xCE), // default=no
		(0xE9, 0x2A, 0xDC, 0x07, 0x00, 0x90, 0x6A, 0x3F, 0x8B, 0xCE),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_FixAI_AfterWonder2,
		"[OBSOLETE] Fix the wonder construction flag bug when construction completes",
		1271823,
		(0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00), // default=no
		(0x89, 0x99, 0xB4, 0x22, 0x01, 0x00, 0xC7, 0x81, 0xB0, 0x22, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0xE9, 0xC1, 0x23, 0xF8, 0xFF),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_ShowShortcutsInEditor,
		"[OBSOLETE] Allows overriding display of shortcut number for units, and always show them in editor (for custom purposes).",
		0xA78D1,
		(0x66, 0x8B, 0x50, 0x4A, 0x66, 0x3B, 0x51, 0x7C, 0x75, 0x51, 0x8B, 0x0D, 0x38, 0x0E, 0x58, 0x00), // default=no
		(0x66, 0x8B, 0x50, 0x4A, 0xE8, 0x9A, 0x1C, 0xF7, 0xFF, 0x90, 0x8B, 0x0D, 0x38, 0x0E, 0x58, 0x00),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_PlayerCreationChecks_human,
		"[OBSOLETE] Check that chosen civilization id is valid at game start, force to 1 if not to avoid game crash (human players).",
		0x10A5B2,
		(0x74, 0x13, 0x8A, 0x94, 0x1E, 0x51, 0x02, 0x00, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x01, 0x6A, 0x01, 0xEB, 0xB9),
		(0x74, 0x13, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x00, 0x6A, 0x01, 0x6A, 0x01, 0xE8, 0xB1, 0xEF, 0xF0, 0xFF, 0x90, 0x90, 0xEB, 0xB9),
		FM_OFF,
		FM_ON
		);

	NEXT_INITSEQ_2_NOVAR(this->obsoletes_10c.GetBinSeqDefinition(i),
		OBSOLETE_ManageTacAIUpdate,
		"Obsolete call to RockNRor features for tactical AI updates. Do not use, it changed SNScalingFrequency unit to seconds instead of minutes and had impact on the game.",
		0x0D099E,
		(0x8B, 0x86, 0x20, 0x03, 0x00, 0x00, 0x8D, 0x04, 0x40, 0x8B, 0x49, 0x04, 0x2B, 0xCD, 0x8D, 0x04, 0x80, 0x8D, 0x04, 0x80, 0x8D, 0x04, 0x80, 0x8D, 0x04, 0x80, 0xC1, 0xE0, 0x05, 0x3B, 0xC8, 0x0F, 0x86, 0xEB, 0x00, 0x00, 0x00, 0x8B, 0x8E, 0x0C, 0x03, 0x00, 0x00), // default=no
		(0x8B, 0x86, 0x20, 0x03, 0x00, 0x00, 0x8B, 0x49, 0x04, 0x2B, 0xCD, 0x8D, 0x04, 0x80, 0x8D, 0x04, 0x80, 0x8D, 0x04, 0x80, 0xC1, 0xE0, 0x03, 0x3B, 0xC8, 0x0F, 0x86, 0xF1, 0x00, 0x00, 0x00, 0xE8, 0xB2, 0x8B, 0xF4, 0xFF, 0x90, 0x8B, 0x8E, 0x0C, 0x03, 0x00, 0x00),
		FM_OFF,
		FM_ON
		);


	if (i != COUNT_obsoletes_10c) {
		throw AOE_binDataSetupException("Binary setup error for obsoletes_10c. Bad element count.");
	}
#ifdef _DEBUG
	printf("obsoletes_10c=%d\n", i); // DEBUG
#endif
}


/*
NEXT_INITSEQ_2_NOVAR(this->options_10c.GetBinSeqDefinition(i),
name,
"Ext",
00000,
(0x74, 0x50, 0x85, 0xC0, 0x75, 0x63),
(0x90, 0x90, 0x90, 0x90, 0x90, 0x90)
);

NEXT_INITSEQ_1_VAR(this->options_10c.GetBinSeqDefinition(i),
name,
"zzzz",
00000,
(0x6A, 0x04, 0x68, 0xA1, 0, 0, 0),
SVT_INT_1B,
1
);
*/
